// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/prysmaticlabs/prysm/proto/beacon/rpc/v1 (interfaces: AggregatorServiceClient)

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/prysmaticlabs/prysm/proto/beacon/rpc/v1"
	grpc "google.golang.org/grpc"
)

// MockAggregatorServiceClient is a mock of AggregatorServiceClient interface
type MockAggregatorServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAggregatorServiceClientMockRecorder
}

// MockAggregatorServiceClientMockRecorder is the mock recorder for MockAggregatorServiceClient
type MockAggregatorServiceClientMockRecorder struct {
	mock *MockAggregatorServiceClient
}

// NewMockAggregatorServiceClient creates a new mock instance
func NewMockAggregatorServiceClient(ctrl *gomock.Controller) *MockAggregatorServiceClient {
	mock := &MockAggregatorServiceClient{ctrl: ctrl}
	mock.recorder = &MockAggregatorServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAggregatorServiceClient) EXPECT() *MockAggregatorServiceClientMockRecorder {
	return m.recorder
}

// SubmitAggregateAndProof mocks base method
func (m *MockAggregatorServiceClient) SubmitAggregateAndProof(arg0 context.Context, arg1 *v1.AggregationRequest, arg2 ...grpc.CallOption) (*v1.AggregationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitAggregateAndProof", varargs...)
	ret0, _ := ret[0].(*v1.AggregationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitAggregateAndProof indicates an expected call of SubmitAggregateAndProof
func (mr *MockAggregatorServiceClientMockRecorder) SubmitAggregateAndProof(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitAggregateAndProof", reflect.TypeOf((*MockAggregatorServiceClient)(nil).SubmitAggregateAndProof), varargs...)
}
