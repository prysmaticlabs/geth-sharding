// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/eth/v1alpha1/beacon_chain.proto

package eth

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ListAttestationsRequest struct {
	// Types that are valid to be assigned to QueryFilter:
	//	*ListAttestationsRequest_BlockRoot
	//	*ListAttestationsRequest_Slot
	//	*ListAttestationsRequest_Epoch
	QueryFilter          isListAttestationsRequest_QueryFilter `protobuf_oneof:"query_filter"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *ListAttestationsRequest) Reset()         { *m = ListAttestationsRequest{} }
func (m *ListAttestationsRequest) String() string { return proto.CompactTextString(m) }
func (*ListAttestationsRequest) ProtoMessage()    {}
func (*ListAttestationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_678c88b69c3c78d4, []int{0}
}
func (m *ListAttestationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAttestationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAttestationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAttestationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAttestationsRequest.Merge(m, src)
}
func (m *ListAttestationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListAttestationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAttestationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAttestationsRequest proto.InternalMessageInfo

type isListAttestationsRequest_QueryFilter interface {
	isListAttestationsRequest_QueryFilter()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListAttestationsRequest_BlockRoot struct {
	BlockRoot []byte `protobuf:"bytes,1,opt,name=block_root,json=blockRoot,proto3,oneof"`
}
type ListAttestationsRequest_Slot struct {
	Slot uint64 `protobuf:"varint,2,opt,name=slot,proto3,oneof"`
}
type ListAttestationsRequest_Epoch struct {
	Epoch uint64 `protobuf:"varint,3,opt,name=epoch,proto3,oneof"`
}

func (*ListAttestationsRequest_BlockRoot) isListAttestationsRequest_QueryFilter() {}
func (*ListAttestationsRequest_Slot) isListAttestationsRequest_QueryFilter()      {}
func (*ListAttestationsRequest_Epoch) isListAttestationsRequest_QueryFilter()     {}

func (m *ListAttestationsRequest) GetQueryFilter() isListAttestationsRequest_QueryFilter {
	if m != nil {
		return m.QueryFilter
	}
	return nil
}

func (m *ListAttestationsRequest) GetBlockRoot() []byte {
	if x, ok := m.GetQueryFilter().(*ListAttestationsRequest_BlockRoot); ok {
		return x.BlockRoot
	}
	return nil
}

func (m *ListAttestationsRequest) GetSlot() uint64 {
	if x, ok := m.GetQueryFilter().(*ListAttestationsRequest_Slot); ok {
		return x.Slot
	}
	return 0
}

func (m *ListAttestationsRequest) GetEpoch() uint64 {
	if x, ok := m.GetQueryFilter().(*ListAttestationsRequest_Epoch); ok {
		return x.Epoch
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ListAttestationsRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ListAttestationsRequest_OneofMarshaler, _ListAttestationsRequest_OneofUnmarshaler, _ListAttestationsRequest_OneofSizer, []interface{}{
		(*ListAttestationsRequest_BlockRoot)(nil),
		(*ListAttestationsRequest_Slot)(nil),
		(*ListAttestationsRequest_Epoch)(nil),
	}
}

func _ListAttestationsRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ListAttestationsRequest)
	// query_filter
	switch x := m.QueryFilter.(type) {
	case *ListAttestationsRequest_BlockRoot:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.BlockRoot)
	case *ListAttestationsRequest_Slot:
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Slot))
	case *ListAttestationsRequest_Epoch:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Epoch))
	case nil:
	default:
		return fmt.Errorf("ListAttestationsRequest.QueryFilter has unexpected type %T", x)
	}
	return nil
}

func _ListAttestationsRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ListAttestationsRequest)
	switch tag {
	case 1: // query_filter.block_root
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.QueryFilter = &ListAttestationsRequest_BlockRoot{x}
		return true, err
	case 2: // query_filter.slot
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.QueryFilter = &ListAttestationsRequest_Slot{x}
		return true, err
	case 3: // query_filter.epoch
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.QueryFilter = &ListAttestationsRequest_Epoch{x}
		return true, err
	default:
		return false, nil
	}
}

func _ListAttestationsRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ListAttestationsRequest)
	// query_filter
	switch x := m.QueryFilter.(type) {
	case *ListAttestationsRequest_BlockRoot:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.BlockRoot)))
		n += len(x.BlockRoot)
	case *ListAttestationsRequest_Slot:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Slot))
	case *ListAttestationsRequest_Epoch:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Epoch))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ListAttestationsResponse struct {
	Attestations         []*Attestation `protobuf:"bytes,1,rep,name=attestations,proto3" json:"attestations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ListAttestationsResponse) Reset()         { *m = ListAttestationsResponse{} }
func (m *ListAttestationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListAttestationsResponse) ProtoMessage()    {}
func (*ListAttestationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_678c88b69c3c78d4, []int{1}
}
func (m *ListAttestationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAttestationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAttestationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAttestationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAttestationsResponse.Merge(m, src)
}
func (m *ListAttestationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListAttestationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAttestationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAttestationsResponse proto.InternalMessageInfo

func (m *ListAttestationsResponse) GetAttestations() []*Attestation {
	if m != nil {
		return m.Attestations
	}
	return nil
}

type ListBlocksRequest struct {
	// Types that are valid to be assigned to QueryFilter:
	//	*ListBlocksRequest_Root
	//	*ListBlocksRequest_Slot
	//	*ListBlocksRequest_Epoch
	QueryFilter          isListBlocksRequest_QueryFilter `protobuf_oneof:"query_filter"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *ListBlocksRequest) Reset()         { *m = ListBlocksRequest{} }
func (m *ListBlocksRequest) String() string { return proto.CompactTextString(m) }
func (*ListBlocksRequest) ProtoMessage()    {}
func (*ListBlocksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_678c88b69c3c78d4, []int{2}
}
func (m *ListBlocksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBlocksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBlocksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBlocksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBlocksRequest.Merge(m, src)
}
func (m *ListBlocksRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListBlocksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBlocksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListBlocksRequest proto.InternalMessageInfo

type isListBlocksRequest_QueryFilter interface {
	isListBlocksRequest_QueryFilter()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListBlocksRequest_Root struct {
	Root []byte `protobuf:"bytes,1,opt,name=root,proto3,oneof"`
}
type ListBlocksRequest_Slot struct {
	Slot uint64 `protobuf:"varint,2,opt,name=slot,proto3,oneof"`
}
type ListBlocksRequest_Epoch struct {
	Epoch uint64 `protobuf:"varint,3,opt,name=epoch,proto3,oneof"`
}

func (*ListBlocksRequest_Root) isListBlocksRequest_QueryFilter()  {}
func (*ListBlocksRequest_Slot) isListBlocksRequest_QueryFilter()  {}
func (*ListBlocksRequest_Epoch) isListBlocksRequest_QueryFilter() {}

func (m *ListBlocksRequest) GetQueryFilter() isListBlocksRequest_QueryFilter {
	if m != nil {
		return m.QueryFilter
	}
	return nil
}

func (m *ListBlocksRequest) GetRoot() []byte {
	if x, ok := m.GetQueryFilter().(*ListBlocksRequest_Root); ok {
		return x.Root
	}
	return nil
}

func (m *ListBlocksRequest) GetSlot() uint64 {
	if x, ok := m.GetQueryFilter().(*ListBlocksRequest_Slot); ok {
		return x.Slot
	}
	return 0
}

func (m *ListBlocksRequest) GetEpoch() uint64 {
	if x, ok := m.GetQueryFilter().(*ListBlocksRequest_Epoch); ok {
		return x.Epoch
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ListBlocksRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ListBlocksRequest_OneofMarshaler, _ListBlocksRequest_OneofUnmarshaler, _ListBlocksRequest_OneofSizer, []interface{}{
		(*ListBlocksRequest_Root)(nil),
		(*ListBlocksRequest_Slot)(nil),
		(*ListBlocksRequest_Epoch)(nil),
	}
}

func _ListBlocksRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ListBlocksRequest)
	// query_filter
	switch x := m.QueryFilter.(type) {
	case *ListBlocksRequest_Root:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.Root)
	case *ListBlocksRequest_Slot:
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Slot))
	case *ListBlocksRequest_Epoch:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Epoch))
	case nil:
	default:
		return fmt.Errorf("ListBlocksRequest.QueryFilter has unexpected type %T", x)
	}
	return nil
}

func _ListBlocksRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ListBlocksRequest)
	switch tag {
	case 1: // query_filter.root
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.QueryFilter = &ListBlocksRequest_Root{x}
		return true, err
	case 2: // query_filter.slot
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.QueryFilter = &ListBlocksRequest_Slot{x}
		return true, err
	case 3: // query_filter.epoch
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.QueryFilter = &ListBlocksRequest_Epoch{x}
		return true, err
	default:
		return false, nil
	}
}

func _ListBlocksRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ListBlocksRequest)
	// query_filter
	switch x := m.QueryFilter.(type) {
	case *ListBlocksRequest_Root:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Root)))
		n += len(x.Root)
	case *ListBlocksRequest_Slot:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Slot))
	case *ListBlocksRequest_Epoch:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Epoch))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ListBlocksResponse struct {
	Blocks               []*BeaconBlock `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ListBlocksResponse) Reset()         { *m = ListBlocksResponse{} }
func (m *ListBlocksResponse) String() string { return proto.CompactTextString(m) }
func (*ListBlocksResponse) ProtoMessage()    {}
func (*ListBlocksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_678c88b69c3c78d4, []int{3}
}
func (m *ListBlocksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBlocksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBlocksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBlocksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBlocksResponse.Merge(m, src)
}
func (m *ListBlocksResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListBlocksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBlocksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListBlocksResponse proto.InternalMessageInfo

func (m *ListBlocksResponse) GetBlocks() []*BeaconBlock {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type ChainHead struct {
	BlockRoot                  []byte   `protobuf:"bytes,1,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty" ssz-size:"32"`
	BlockSlot                  uint64   `protobuf:"varint,2,opt,name=block_slot,json=blockSlot,proto3" json:"block_slot,omitempty"`
	FinalizedSlot              uint64   `protobuf:"varint,3,opt,name=finalized_slot,json=finalizedSlot,proto3" json:"finalized_slot,omitempty"`
	FinalizedBlockRoot         []byte   `protobuf:"bytes,4,opt,name=finalized_block_root,json=finalizedBlockRoot,proto3" json:"finalized_block_root,omitempty" ssz-size:"32"`
	JustifiedSlot              uint64   `protobuf:"varint,5,opt,name=justified_slot,json=justifiedSlot,proto3" json:"justified_slot,omitempty"`
	JustifiedBlockRoot         []byte   `protobuf:"bytes,6,opt,name=justified_block_root,json=justifiedBlockRoot,proto3" json:"justified_block_root,omitempty" ssz-size:"32"`
	PreviousJustifiedSlot      uint64   `protobuf:"varint,7,opt,name=previous_justified_slot,json=previousJustifiedSlot,proto3" json:"previous_justified_slot,omitempty"`
	PreviousJustifiedBlockRoot []byte   `protobuf:"bytes,8,opt,name=previous_justified_block_root,json=previousJustifiedBlockRoot,proto3" json:"previous_justified_block_root,omitempty" ssz-size:"32"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *ChainHead) Reset()         { *m = ChainHead{} }
func (m *ChainHead) String() string { return proto.CompactTextString(m) }
func (*ChainHead) ProtoMessage()    {}
func (*ChainHead) Descriptor() ([]byte, []int) {
	return fileDescriptor_678c88b69c3c78d4, []int{4}
}
func (m *ChainHead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainHead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainHead.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainHead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainHead.Merge(m, src)
}
func (m *ChainHead) XXX_Size() int {
	return m.Size()
}
func (m *ChainHead) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainHead.DiscardUnknown(m)
}

var xxx_messageInfo_ChainHead proto.InternalMessageInfo

func (m *ChainHead) GetBlockRoot() []byte {
	if m != nil {
		return m.BlockRoot
	}
	return nil
}

func (m *ChainHead) GetBlockSlot() uint64 {
	if m != nil {
		return m.BlockSlot
	}
	return 0
}

func (m *ChainHead) GetFinalizedSlot() uint64 {
	if m != nil {
		return m.FinalizedSlot
	}
	return 0
}

func (m *ChainHead) GetFinalizedBlockRoot() []byte {
	if m != nil {
		return m.FinalizedBlockRoot
	}
	return nil
}

func (m *ChainHead) GetJustifiedSlot() uint64 {
	if m != nil {
		return m.JustifiedSlot
	}
	return 0
}

func (m *ChainHead) GetJustifiedBlockRoot() []byte {
	if m != nil {
		return m.JustifiedBlockRoot
	}
	return nil
}

func (m *ChainHead) GetPreviousJustifiedSlot() uint64 {
	if m != nil {
		return m.PreviousJustifiedSlot
	}
	return 0
}

func (m *ChainHead) GetPreviousJustifiedBlockRoot() []byte {
	if m != nil {
		return m.PreviousJustifiedBlockRoot
	}
	return nil
}

type GetValidatorBalancesRequest struct {
	Epoch                uint64   `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	PublicKeys           [][]byte `protobuf:"bytes,2,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty" ssz-size:"?,48"`
	Indices              []uint64 `protobuf:"varint,3,rep,packed,name=indices,proto3" json:"indices,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetValidatorBalancesRequest) Reset()         { *m = GetValidatorBalancesRequest{} }
func (m *GetValidatorBalancesRequest) String() string { return proto.CompactTextString(m) }
func (*GetValidatorBalancesRequest) ProtoMessage()    {}
func (*GetValidatorBalancesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_678c88b69c3c78d4, []int{5}
}
func (m *GetValidatorBalancesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetValidatorBalancesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetValidatorBalancesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetValidatorBalancesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetValidatorBalancesRequest.Merge(m, src)
}
func (m *GetValidatorBalancesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetValidatorBalancesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetValidatorBalancesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetValidatorBalancesRequest proto.InternalMessageInfo

func (m *GetValidatorBalancesRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *GetValidatorBalancesRequest) GetPublicKeys() [][]byte {
	if m != nil {
		return m.PublicKeys
	}
	return nil
}

func (m *GetValidatorBalancesRequest) GetIndices() []uint64 {
	if m != nil {
		return m.Indices
	}
	return nil
}

type ValidatorBalances struct {
	Balances             []*ValidatorBalances_Balance `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ValidatorBalances) Reset()         { *m = ValidatorBalances{} }
func (m *ValidatorBalances) String() string { return proto.CompactTextString(m) }
func (*ValidatorBalances) ProtoMessage()    {}
func (*ValidatorBalances) Descriptor() ([]byte, []int) {
	return fileDescriptor_678c88b69c3c78d4, []int{6}
}
func (m *ValidatorBalances) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorBalances) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorBalances.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorBalances) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorBalances.Merge(m, src)
}
func (m *ValidatorBalances) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorBalances) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorBalances.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorBalances proto.InternalMessageInfo

func (m *ValidatorBalances) GetBalances() []*ValidatorBalances_Balance {
	if m != nil {
		return m.Balances
	}
	return nil
}

type ValidatorBalances_Balance struct {
	PublicKey            []byte   `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty" ssz-size:"48"`
	Index                uint64   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Balance              uint64   `protobuf:"varint,3,opt,name=balance,proto3" json:"balance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidatorBalances_Balance) Reset()         { *m = ValidatorBalances_Balance{} }
func (m *ValidatorBalances_Balance) String() string { return proto.CompactTextString(m) }
func (*ValidatorBalances_Balance) ProtoMessage()    {}
func (*ValidatorBalances_Balance) Descriptor() ([]byte, []int) {
	return fileDescriptor_678c88b69c3c78d4, []int{6, 0}
}
func (m *ValidatorBalances_Balance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorBalances_Balance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorBalances_Balance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorBalances_Balance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorBalances_Balance.Merge(m, src)
}
func (m *ValidatorBalances_Balance) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorBalances_Balance) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorBalances_Balance.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorBalances_Balance proto.InternalMessageInfo

func (m *ValidatorBalances_Balance) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *ValidatorBalances_Balance) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ValidatorBalances_Balance) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

type GetValidatorsRequest struct {
	// Types that are valid to be assigned to QueryFilter:
	//	*GetValidatorsRequest_Epoch
	//	*GetValidatorsRequest_Genesis
	QueryFilter          isGetValidatorsRequest_QueryFilter `protobuf_oneof:"query_filter"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *GetValidatorsRequest) Reset()         { *m = GetValidatorsRequest{} }
func (m *GetValidatorsRequest) String() string { return proto.CompactTextString(m) }
func (*GetValidatorsRequest) ProtoMessage()    {}
func (*GetValidatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_678c88b69c3c78d4, []int{7}
}
func (m *GetValidatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetValidatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetValidatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetValidatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetValidatorsRequest.Merge(m, src)
}
func (m *GetValidatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetValidatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetValidatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetValidatorsRequest proto.InternalMessageInfo

type isGetValidatorsRequest_QueryFilter interface {
	isGetValidatorsRequest_QueryFilter()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetValidatorsRequest_Epoch struct {
	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3,oneof"`
}
type GetValidatorsRequest_Genesis struct {
	Genesis bool `protobuf:"varint,2,opt,name=genesis,proto3,oneof"`
}

func (*GetValidatorsRequest_Epoch) isGetValidatorsRequest_QueryFilter()   {}
func (*GetValidatorsRequest_Genesis) isGetValidatorsRequest_QueryFilter() {}

func (m *GetValidatorsRequest) GetQueryFilter() isGetValidatorsRequest_QueryFilter {
	if m != nil {
		return m.QueryFilter
	}
	return nil
}

func (m *GetValidatorsRequest) GetEpoch() uint64 {
	if x, ok := m.GetQueryFilter().(*GetValidatorsRequest_Epoch); ok {
		return x.Epoch
	}
	return 0
}

func (m *GetValidatorsRequest) GetGenesis() bool {
	if x, ok := m.GetQueryFilter().(*GetValidatorsRequest_Genesis); ok {
		return x.Genesis
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetValidatorsRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetValidatorsRequest_OneofMarshaler, _GetValidatorsRequest_OneofUnmarshaler, _GetValidatorsRequest_OneofSizer, []interface{}{
		(*GetValidatorsRequest_Epoch)(nil),
		(*GetValidatorsRequest_Genesis)(nil),
	}
}

func _GetValidatorsRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetValidatorsRequest)
	// query_filter
	switch x := m.QueryFilter.(type) {
	case *GetValidatorsRequest_Epoch:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Epoch))
	case *GetValidatorsRequest_Genesis:
		t := uint64(0)
		if x.Genesis {
			t = 1
		}
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("GetValidatorsRequest.QueryFilter has unexpected type %T", x)
	}
	return nil
}

func _GetValidatorsRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetValidatorsRequest)
	switch tag {
	case 1: // query_filter.epoch
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.QueryFilter = &GetValidatorsRequest_Epoch{x}
		return true, err
	case 2: // query_filter.genesis
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.QueryFilter = &GetValidatorsRequest_Genesis{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _GetValidatorsRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetValidatorsRequest)
	// query_filter
	switch x := m.QueryFilter.(type) {
	case *GetValidatorsRequest_Epoch:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Epoch))
	case *GetValidatorsRequest_Genesis:
		n += 1 // tag and wire
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Validators struct {
	Epoch                uint64       `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Validators           []*Validator `protobuf:"bytes,2,rep,name=validators,proto3" json:"validators,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Validators) Reset()         { *m = Validators{} }
func (m *Validators) String() string { return proto.CompactTextString(m) }
func (*Validators) ProtoMessage()    {}
func (*Validators) Descriptor() ([]byte, []int) {
	return fileDescriptor_678c88b69c3c78d4, []int{8}
}
func (m *Validators) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validators) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validators.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validators) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validators.Merge(m, src)
}
func (m *Validators) XXX_Size() int {
	return m.Size()
}
func (m *Validators) XXX_DiscardUnknown() {
	xxx_messageInfo_Validators.DiscardUnknown(m)
}

var xxx_messageInfo_Validators proto.InternalMessageInfo

func (m *Validators) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *Validators) GetValidators() []*Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

type GetValidatorActiveSetChangesRequest struct {
	Epoch                uint64   `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetValidatorActiveSetChangesRequest) Reset()         { *m = GetValidatorActiveSetChangesRequest{} }
func (m *GetValidatorActiveSetChangesRequest) String() string { return proto.CompactTextString(m) }
func (*GetValidatorActiveSetChangesRequest) ProtoMessage()    {}
func (*GetValidatorActiveSetChangesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_678c88b69c3c78d4, []int{9}
}
func (m *GetValidatorActiveSetChangesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetValidatorActiveSetChangesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetValidatorActiveSetChangesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetValidatorActiveSetChangesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetValidatorActiveSetChangesRequest.Merge(m, src)
}
func (m *GetValidatorActiveSetChangesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetValidatorActiveSetChangesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetValidatorActiveSetChangesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetValidatorActiveSetChangesRequest proto.InternalMessageInfo

func (m *GetValidatorActiveSetChangesRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type ActiveSetChanges struct {
	Epoch                uint64   `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	ActivatedPublicKeys  [][]byte `protobuf:"bytes,2,rep,name=activated_public_keys,json=activatedPublicKeys,proto3" json:"activated_public_keys,omitempty" ssz-size:"?,48"`
	ExitedPublicKeys     [][]byte `protobuf:"bytes,3,rep,name=exited_public_keys,json=exitedPublicKeys,proto3" json:"exited_public_keys,omitempty" ssz-size:"?,48"`
	EjectedPublicKeys    [][]byte `protobuf:"bytes,4,rep,name=ejected_public_keys,json=ejectedPublicKeys,proto3" json:"ejected_public_keys,omitempty" ssz-size:"?,48"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActiveSetChanges) Reset()         { *m = ActiveSetChanges{} }
func (m *ActiveSetChanges) String() string { return proto.CompactTextString(m) }
func (*ActiveSetChanges) ProtoMessage()    {}
func (*ActiveSetChanges) Descriptor() ([]byte, []int) {
	return fileDescriptor_678c88b69c3c78d4, []int{10}
}
func (m *ActiveSetChanges) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveSetChanges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveSetChanges.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveSetChanges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveSetChanges.Merge(m, src)
}
func (m *ActiveSetChanges) XXX_Size() int {
	return m.Size()
}
func (m *ActiveSetChanges) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveSetChanges.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveSetChanges proto.InternalMessageInfo

func (m *ActiveSetChanges) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ActiveSetChanges) GetActivatedPublicKeys() [][]byte {
	if m != nil {
		return m.ActivatedPublicKeys
	}
	return nil
}

func (m *ActiveSetChanges) GetExitedPublicKeys() [][]byte {
	if m != nil {
		return m.ExitedPublicKeys
	}
	return nil
}

func (m *ActiveSetChanges) GetEjectedPublicKeys() [][]byte {
	if m != nil {
		return m.EjectedPublicKeys
	}
	return nil
}

type ValidatorQueue struct {
	ChurnLimit           uint64   `protobuf:"varint,1,opt,name=churn_limit,json=churnLimit,proto3" json:"churn_limit,omitempty"`
	ActivationPublicKeys [][]byte `protobuf:"bytes,2,rep,name=activation_public_keys,json=activationPublicKeys,proto3" json:"activation_public_keys,omitempty" ssz-size:"?,48"`
	ExitPublicKeys       [][]byte `protobuf:"bytes,3,rep,name=exit_public_keys,json=exitPublicKeys,proto3" json:"exit_public_keys,omitempty" ssz-size:"?,48"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidatorQueue) Reset()         { *m = ValidatorQueue{} }
func (m *ValidatorQueue) String() string { return proto.CompactTextString(m) }
func (*ValidatorQueue) ProtoMessage()    {}
func (*ValidatorQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_678c88b69c3c78d4, []int{11}
}
func (m *ValidatorQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorQueue.Merge(m, src)
}
func (m *ValidatorQueue) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorQueue.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorQueue proto.InternalMessageInfo

func (m *ValidatorQueue) GetChurnLimit() uint64 {
	if m != nil {
		return m.ChurnLimit
	}
	return 0
}

func (m *ValidatorQueue) GetActivationPublicKeys() [][]byte {
	if m != nil {
		return m.ActivationPublicKeys
	}
	return nil
}

func (m *ValidatorQueue) GetExitPublicKeys() [][]byte {
	if m != nil {
		return m.ExitPublicKeys
	}
	return nil
}

type ListValidatorAssignmentsRequest struct {
	Epoch                uint64   `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	PublicKeys           [][]byte `protobuf:"bytes,2,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty" ssz-size:"?,48"`
	Indices              []uint64 `protobuf:"varint,3,rep,packed,name=indices,proto3" json:"indices,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListValidatorAssignmentsRequest) Reset()         { *m = ListValidatorAssignmentsRequest{} }
func (m *ListValidatorAssignmentsRequest) String() string { return proto.CompactTextString(m) }
func (*ListValidatorAssignmentsRequest) ProtoMessage()    {}
func (*ListValidatorAssignmentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_678c88b69c3c78d4, []int{12}
}
func (m *ListValidatorAssignmentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListValidatorAssignmentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListValidatorAssignmentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListValidatorAssignmentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListValidatorAssignmentsRequest.Merge(m, src)
}
func (m *ListValidatorAssignmentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListValidatorAssignmentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListValidatorAssignmentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListValidatorAssignmentsRequest proto.InternalMessageInfo

func (m *ListValidatorAssignmentsRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ListValidatorAssignmentsRequest) GetPublicKeys() [][]byte {
	if m != nil {
		return m.PublicKeys
	}
	return nil
}

func (m *ListValidatorAssignmentsRequest) GetIndices() []uint64 {
	if m != nil {
		return m.Indices
	}
	return nil
}

type ValidatorAssignments struct {
	Epoch                uint64                                      `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Assignments          []*ValidatorAssignments_CommitteeAssignment `protobuf:"bytes,2,rep,name=assignments,proto3" json:"assignments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *ValidatorAssignments) Reset()         { *m = ValidatorAssignments{} }
func (m *ValidatorAssignments) String() string { return proto.CompactTextString(m) }
func (*ValidatorAssignments) ProtoMessage()    {}
func (*ValidatorAssignments) Descriptor() ([]byte, []int) {
	return fileDescriptor_678c88b69c3c78d4, []int{13}
}
func (m *ValidatorAssignments) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorAssignments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorAssignments.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorAssignments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorAssignments.Merge(m, src)
}
func (m *ValidatorAssignments) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorAssignments) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorAssignments.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorAssignments proto.InternalMessageInfo

func (m *ValidatorAssignments) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ValidatorAssignments) GetAssignments() []*ValidatorAssignments_CommitteeAssignment {
	if m != nil {
		return m.Assignments
	}
	return nil
}

type ValidatorAssignments_CommitteeAssignment struct {
	CrosslinkCommittees  []uint64 `protobuf:"varint,1,rep,packed,name=crosslink_committees,json=crosslinkCommittees,proto3" json:"crosslink_committees,omitempty"`
	Shard                uint64   `protobuf:"varint,2,opt,name=shard,proto3" json:"shard,omitempty"`
	Slot                 uint64   `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`
	Proposer             bool     `protobuf:"varint,4,opt,name=proposer,proto3" json:"proposer,omitempty"`
	PublicKey            []byte   `protobuf:"bytes,5,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty" ssz-size:"48"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidatorAssignments_CommitteeAssignment) Reset() {
	*m = ValidatorAssignments_CommitteeAssignment{}
}
func (m *ValidatorAssignments_CommitteeAssignment) String() string { return proto.CompactTextString(m) }
func (*ValidatorAssignments_CommitteeAssignment) ProtoMessage()    {}
func (*ValidatorAssignments_CommitteeAssignment) Descriptor() ([]byte, []int) {
	return fileDescriptor_678c88b69c3c78d4, []int{13, 0}
}
func (m *ValidatorAssignments_CommitteeAssignment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorAssignments_CommitteeAssignment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorAssignments_CommitteeAssignment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorAssignments_CommitteeAssignment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorAssignments_CommitteeAssignment.Merge(m, src)
}
func (m *ValidatorAssignments_CommitteeAssignment) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorAssignments_CommitteeAssignment) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorAssignments_CommitteeAssignment.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorAssignments_CommitteeAssignment proto.InternalMessageInfo

func (m *ValidatorAssignments_CommitteeAssignment) GetCrosslinkCommittees() []uint64 {
	if m != nil {
		return m.CrosslinkCommittees
	}
	return nil
}

func (m *ValidatorAssignments_CommitteeAssignment) GetShard() uint64 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *ValidatorAssignments_CommitteeAssignment) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *ValidatorAssignments_CommitteeAssignment) GetProposer() bool {
	if m != nil {
		return m.Proposer
	}
	return false
}

func (m *ValidatorAssignments_CommitteeAssignment) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type GetValidatorParticipationRequest struct {
	Epoch                uint64   `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetValidatorParticipationRequest) Reset()         { *m = GetValidatorParticipationRequest{} }
func (m *GetValidatorParticipationRequest) String() string { return proto.CompactTextString(m) }
func (*GetValidatorParticipationRequest) ProtoMessage()    {}
func (*GetValidatorParticipationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_678c88b69c3c78d4, []int{14}
}
func (m *GetValidatorParticipationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetValidatorParticipationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetValidatorParticipationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetValidatorParticipationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetValidatorParticipationRequest.Merge(m, src)
}
func (m *GetValidatorParticipationRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetValidatorParticipationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetValidatorParticipationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetValidatorParticipationRequest proto.InternalMessageInfo

func (m *GetValidatorParticipationRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type ValidatorParticipation struct {
	Epoch                   uint64   `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Finalized               bool     `protobuf:"varint,2,opt,name=finalized,proto3" json:"finalized,omitempty"`
	GlobalParticipationRate float32  `protobuf:"fixed32,3,opt,name=global_participation_rate,json=globalParticipationRate,proto3" json:"global_participation_rate,omitempty"`
	VotedEther              uint64   `protobuf:"varint,4,opt,name=voted_ether,json=votedEther,proto3" json:"voted_ether,omitempty"`
	EligibleEther           uint64   `protobuf:"varint,5,opt,name=eligible_ether,json=eligibleEther,proto3" json:"eligible_ether,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *ValidatorParticipation) Reset()         { *m = ValidatorParticipation{} }
func (m *ValidatorParticipation) String() string { return proto.CompactTextString(m) }
func (*ValidatorParticipation) ProtoMessage()    {}
func (*ValidatorParticipation) Descriptor() ([]byte, []int) {
	return fileDescriptor_678c88b69c3c78d4, []int{15}
}
func (m *ValidatorParticipation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorParticipation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorParticipation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorParticipation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorParticipation.Merge(m, src)
}
func (m *ValidatorParticipation) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorParticipation) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorParticipation.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorParticipation proto.InternalMessageInfo

func (m *ValidatorParticipation) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ValidatorParticipation) GetFinalized() bool {
	if m != nil {
		return m.Finalized
	}
	return false
}

func (m *ValidatorParticipation) GetGlobalParticipationRate() float32 {
	if m != nil {
		return m.GlobalParticipationRate
	}
	return 0
}

func (m *ValidatorParticipation) GetVotedEther() uint64 {
	if m != nil {
		return m.VotedEther
	}
	return 0
}

func (m *ValidatorParticipation) GetEligibleEther() uint64 {
	if m != nil {
		return m.EligibleEther
	}
	return 0
}

type ListPendingAttestationsResponse struct {
	PendingAttestations  []*PendingAttestation `protobuf:"bytes,1,rep,name=pending_attestations,json=pendingAttestations,proto3" json:"pending_attestations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ListPendingAttestationsResponse) Reset()         { *m = ListPendingAttestationsResponse{} }
func (m *ListPendingAttestationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListPendingAttestationsResponse) ProtoMessage()    {}
func (*ListPendingAttestationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_678c88b69c3c78d4, []int{16}
}
func (m *ListPendingAttestationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPendingAttestationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListPendingAttestationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListPendingAttestationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPendingAttestationsResponse.Merge(m, src)
}
func (m *ListPendingAttestationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListPendingAttestationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPendingAttestationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPendingAttestationsResponse proto.InternalMessageInfo

func (m *ListPendingAttestationsResponse) GetPendingAttestations() []*PendingAttestation {
	if m != nil {
		return m.PendingAttestations
	}
	return nil
}

func init() {
	proto.RegisterType((*ListAttestationsRequest)(nil), "ethereum.eth.v1alpha1.ListAttestationsRequest")
	proto.RegisterType((*ListAttestationsResponse)(nil), "ethereum.eth.v1alpha1.ListAttestationsResponse")
	proto.RegisterType((*ListBlocksRequest)(nil), "ethereum.eth.v1alpha1.ListBlocksRequest")
	proto.RegisterType((*ListBlocksResponse)(nil), "ethereum.eth.v1alpha1.ListBlocksResponse")
	proto.RegisterType((*ChainHead)(nil), "ethereum.eth.v1alpha1.ChainHead")
	proto.RegisterType((*GetValidatorBalancesRequest)(nil), "ethereum.eth.v1alpha1.GetValidatorBalancesRequest")
	proto.RegisterType((*ValidatorBalances)(nil), "ethereum.eth.v1alpha1.ValidatorBalances")
	proto.RegisterType((*ValidatorBalances_Balance)(nil), "ethereum.eth.v1alpha1.ValidatorBalances.Balance")
	proto.RegisterType((*GetValidatorsRequest)(nil), "ethereum.eth.v1alpha1.GetValidatorsRequest")
	proto.RegisterType((*Validators)(nil), "ethereum.eth.v1alpha1.Validators")
	proto.RegisterType((*GetValidatorActiveSetChangesRequest)(nil), "ethereum.eth.v1alpha1.GetValidatorActiveSetChangesRequest")
	proto.RegisterType((*ActiveSetChanges)(nil), "ethereum.eth.v1alpha1.ActiveSetChanges")
	proto.RegisterType((*ValidatorQueue)(nil), "ethereum.eth.v1alpha1.ValidatorQueue")
	proto.RegisterType((*ListValidatorAssignmentsRequest)(nil), "ethereum.eth.v1alpha1.ListValidatorAssignmentsRequest")
	proto.RegisterType((*ValidatorAssignments)(nil), "ethereum.eth.v1alpha1.ValidatorAssignments")
	proto.RegisterType((*ValidatorAssignments_CommitteeAssignment)(nil), "ethereum.eth.v1alpha1.ValidatorAssignments.CommitteeAssignment")
	proto.RegisterType((*GetValidatorParticipationRequest)(nil), "ethereum.eth.v1alpha1.GetValidatorParticipationRequest")
	proto.RegisterType((*ValidatorParticipation)(nil), "ethereum.eth.v1alpha1.ValidatorParticipation")
	proto.RegisterType((*ListPendingAttestationsResponse)(nil), "ethereum.eth.v1alpha1.ListPendingAttestationsResponse")
}

func init() {
	proto.RegisterFile("proto/eth/v1alpha1/beacon_chain.proto", fileDescriptor_678c88b69c3c78d4)
}

var fileDescriptor_678c88b69c3c78d4 = []byte{
	// 1441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x4f, 0x6f, 0xdb, 0xc6,
	0x12, 0x0f, 0x2d, 0x25, 0xb6, 0xc7, 0x8e, 0x5f, 0xbc, 0x96, 0x1d, 0x85, 0x49, 0x6c, 0x85, 0x89,
	0xf3, 0x64, 0x24, 0xa1, 0x62, 0x27, 0xc8, 0x0b, 0x1c, 0x3c, 0xe4, 0x45, 0x46, 0x5e, 0xdc, 0x36,
	0x07, 0x97, 0x29, 0x7a, 0x08, 0x0a, 0x08, 0x14, 0xb5, 0x96, 0x36, 0xa6, 0xb8, 0x0c, 0x77, 0x65,
	0xc4, 0xbe, 0x14, 0x6d, 0x81, 0x16, 0xe8, 0xb5, 0xd7, 0xa2, 0xe8, 0x17, 0xe8, 0xa9, 0x40, 0x2f,
	0xbd, 0x14, 0x3d, 0xf5, 0x54, 0x04, 0xed, 0x3d, 0x28, 0x82, 0x7e, 0x82, 0xdc, 0x7a, 0x2b, 0xb8,
	0xbb, 0xfc, 0x23, 0x89, 0x94, 0x54, 0x14, 0xe8, 0x4d, 0x3b, 0xfb, 0x9b, 0x99, 0xdf, 0xcc, 0xce,
	0xee, 0x0c, 0x05, 0xeb, 0x7e, 0x40, 0x39, 0xad, 0x61, 0xde, 0xa9, 0x1d, 0x6e, 0xda, 0xae, 0xdf,
	0xb1, 0x37, 0x6b, 0x4d, 0x6c, 0x3b, 0xd4, 0x6b, 0x38, 0x1d, 0x9b, 0x78, 0xa6, 0xd8, 0x47, 0xcb,
	0x98, 0x77, 0x70, 0x80, 0x7b, 0x5d, 0x13, 0xf3, 0x8e, 0x19, 0x21, 0xf5, 0x1b, 0x6d, 0xc2, 0x3b,
	0xbd, 0xa6, 0xe9, 0xd0, 0x6e, 0xad, 0x4d, 0xdb, 0xb4, 0x26, 0xd0, 0xcd, 0xde, 0xbe, 0x58, 0x49,
	0xd3, 0xe1, 0x2f, 0x69, 0x45, 0xbf, 0xd0, 0xa6, 0xb4, 0xed, 0xe2, 0x9a, 0xed, 0x93, 0x9a, 0xed,
	0x79, 0x94, 0xdb, 0x9c, 0x50, 0x8f, 0xa9, 0xdd, 0xf3, 0x6a, 0x37, 0xb6, 0x81, 0xbb, 0x3e, 0x3f,
	0x52, 0x9b, 0x57, 0x32, 0x78, 0xda, 0x9c, 0x63, 0x26, 0x6d, 0x28, 0xd4, 0x88, 0x68, 0x9a, 0x2e,
	0x75, 0x0e, 0x14, 0xcc, 0xc8, 0x80, 0x1d, 0xda, 0x2e, 0x69, 0xd9, 0x9c, 0x06, 0x12, 0x63, 0xbc,
	0x80, 0xb3, 0x8f, 0x09, 0xe3, 0x0f, 0x12, 0x1f, 0xcc, 0xc2, 0xcf, 0x7b, 0x98, 0x71, 0xb4, 0x06,
	0x20, 0xac, 0x35, 0x02, 0x4a, 0x79, 0x59, 0xab, 0x68, 0xd5, 0xf9, 0xdd, 0x13, 0xd6, 0xac, 0x90,
	0x59, 0x94, 0x72, 0x54, 0x82, 0x22, 0x73, 0x29, 0x2f, 0x4f, 0x55, 0xb4, 0x6a, 0x71, 0xf7, 0x84,
	0x25, 0x56, 0x68, 0x05, 0x4e, 0x62, 0x9f, 0x3a, 0x9d, 0x72, 0x41, 0x89, 0xe5, 0xb2, 0xbe, 0x00,
	0xf3, 0xcf, 0x7b, 0x38, 0x38, 0x6a, 0xec, 0x13, 0x97, 0xe3, 0xc0, 0x68, 0x42, 0x79, 0xd8, 0x33,
	0xf3, 0xa9, 0xc7, 0x30, 0xfa, 0x3f, 0xcc, 0xa7, 0xa2, 0x66, 0x65, 0xad, 0x52, 0xa8, 0xce, 0x6d,
	0x19, 0x66, 0xe6, 0xf1, 0x98, 0x29, 0x13, 0x56, 0x9f, 0x9e, 0xd1, 0x86, 0xc5, 0xd0, 0x47, 0x3d,
	0xa4, 0x1c, 0xc7, 0x55, 0x82, 0x62, 0x5f, 0x44, 0x62, 0xf5, 0x37, 0x83, 0xd9, 0x03, 0x94, 0x76,
	0xa4, 0xc2, 0xd8, 0x86, 0x53, 0x22, 0x5b, 0xe3, 0x02, 0xa8, 0x8b, 0xb3, 0x13, 0xca, 0x96, 0xd2,
	0x30, 0x7e, 0x2c, 0xc0, 0xec, 0x4e, 0x58, 0x9a, 0xbb, 0xd8, 0x6e, 0xa1, 0x9b, 0xc3, 0x67, 0x51,
	0x5f, 0x7c, 0xf3, 0x6a, 0xed, 0x34, 0x63, 0xc7, 0x37, 0x18, 0x39, 0xc6, 0xdb, 0xc6, 0xad, 0x2d,
	0x23, 0x7d, 0x38, 0x17, 0x23, 0x8d, 0x24, 0x2a, 0xb5, 0xfd, 0x24, 0x0c, 0x6c, 0x1d, 0x16, 0xf6,
	0x89, 0x67, 0xbb, 0xe4, 0x18, 0xb7, 0x24, 0x44, 0x44, 0x68, 0x9d, 0x8e, 0xa5, 0x02, 0xb6, 0x03,
	0xa5, 0x04, 0x96, 0x62, 0x50, 0xcc, 0x63, 0x80, 0x62, 0x78, 0x3d, 0xa6, 0xb2, 0x0e, 0x0b, 0xcf,
	0x7a, 0x8c, 0x93, 0x7d, 0x12, 0xf9, 0x3a, 0x29, 0x7d, 0xc5, 0xd2, 0xc8, 0x57, 0x02, 0x4b, 0xf9,
	0x3a, 0x95, 0xeb, 0x2b, 0x86, 0x27, 0xbe, 0xee, 0xc0, 0x59, 0x3f, 0xc0, 0x87, 0x84, 0xf6, 0x58,
	0x63, 0xc0, 0xe9, 0xb4, 0x70, 0xba, 0x1c, 0x6d, 0xbf, 0xdd, 0xe7, 0xfc, 0x3d, 0xb8, 0x98, 0xa1,
	0x97, 0x62, 0x31, 0x93, 0xc7, 0x42, 0x1f, 0x32, 0x18, 0xb3, 0x31, 0x3e, 0xd1, 0xe0, 0xfc, 0x23,
	0xcc, 0xdf, 0x8f, 0x2e, 0x5d, 0xdd, 0x76, 0x6d, 0xcf, 0xc1, 0xa9, 0x52, 0x54, 0xe5, 0xa5, 0x09,
	0x6e, 0x72, 0x81, 0x6e, 0xc3, 0x9c, 0xdf, 0x6b, 0xba, 0xc4, 0x69, 0x1c, 0xe0, 0x23, 0x56, 0x9e,
	0xaa, 0x14, 0xaa, 0xf3, 0xf5, 0xa5, 0x37, 0xaf, 0xd6, 0xfe, 0x95, 0x78, 0xbe, 0x7f, 0xfd, 0xf6,
	0x5d, 0xc3, 0x02, 0x89, 0x7b, 0x07, 0x1f, 0x31, 0x54, 0x86, 0x69, 0xe2, 0xb5, 0x88, 0x83, 0x59,
	0xb9, 0x50, 0x29, 0x54, 0x8b, 0x56, 0xb4, 0x34, 0x7e, 0xd6, 0x60, 0x71, 0x88, 0x02, 0x7a, 0x0c,
	0x33, 0x4d, 0xf5, 0x5b, 0x95, 0xe7, 0xcd, 0x9c, 0xf2, 0x1c, 0xd2, 0x35, 0xd5, 0x0f, 0x2b, 0xb6,
	0xa0, 0x1f, 0xc0, 0xb4, 0x12, 0x86, 0xb5, 0x9a, 0xd0, 0xcf, 0xae, 0xd5, 0x90, 0xfb, 0x6c, 0xcc,
	0x3d, 0x4c, 0x03, 0xf1, 0x5a, 0xf8, 0x85, 0x2a, 0x53, 0xb9, 0x08, 0x03, 0x52, 0xe6, 0x55, 0x6d,
	0x46, 0x4b, 0xe3, 0x29, 0x94, 0xd2, 0x59, 0x8d, 0xd3, 0xb9, 0xd2, 0x97, 0xce, 0xf8, 0xb6, 0x22,
	0x1d, 0xa6, 0xdb, 0xd8, 0xc3, 0x8c, 0x30, 0xe1, 0x61, 0x66, 0xf7, 0x84, 0x15, 0x09, 0x86, 0x6e,
	0x72, 0x0b, 0x20, 0x31, 0x9c, 0x73, 0x40, 0xff, 0x03, 0x88, 0xdf, 0x51, 0x79, 0x3e, 0x73, 0x5b,
	0x95, 0x71, 0xc9, 0xb3, 0x52, 0x3a, 0xc6, 0x3d, 0xb8, 0x9c, 0x8e, 0xe0, 0x81, 0xc3, 0xc9, 0x21,
	0x7e, 0x82, 0xf9, 0x4e, 0xc7, 0xf6, 0xda, 0x63, 0xea, 0xc3, 0xf8, 0x43, 0x83, 0x33, 0x83, 0x1a,
	0x39, 0x4c, 0x1f, 0xc1, 0xb2, 0x1d, 0x22, 0x6d, 0x8e, 0x5b, 0x8d, 0x09, 0x8b, 0x6a, 0x29, 0xd6,
	0xd8, 0x4b, 0xaa, 0xeb, 0x01, 0x20, 0xfc, 0x82, 0x0c, 0x5a, 0x29, 0xe4, 0x5b, 0x39, 0x23, 0xe1,
	0x29, 0x13, 0x3b, 0xb0, 0x84, 0x9f, 0x61, 0x67, 0xd0, 0x46, 0x31, 0xdf, 0xc6, 0xa2, 0xc2, 0x27,
	0x46, 0x8c, 0xef, 0x35, 0x58, 0x88, 0xd3, 0xf6, 0x6e, 0x0f, 0xf7, 0x30, 0x5a, 0x83, 0x39, 0xa7,
	0xd3, 0x0b, 0xbc, 0x86, 0x4b, 0xba, 0x84, 0xab, 0xf8, 0x41, 0x88, 0x1e, 0x87, 0x12, 0xf4, 0x16,
	0xac, 0xa8, 0x90, 0x08, 0xf5, 0x26, 0xcd, 0x42, 0x29, 0x51, 0x49, 0xc5, 0xf0, 0x5f, 0x10, 0x71,
	0x4d, 0x9a, 0x84, 0x85, 0x10, 0x9c, 0x62, 0xff, 0x99, 0x06, 0x6b, 0x61, 0x9f, 0x48, 0x0e, 0x9e,
	0x31, 0xd2, 0xf6, 0xba, 0xd8, 0xe3, 0xff, 0xf0, 0x9b, 0xf0, 0xcb, 0x14, 0x94, 0xb2, 0x58, 0xe4,
	0xb8, 0xb7, 0x61, 0xce, 0x4e, 0x40, 0xaa, 0xe4, 0xef, 0x8f, 0x2b, 0xf9, 0x94, 0x5d, 0x73, 0x87,
	0x76, 0xbb, 0x84, 0x73, 0x8c, 0x13, 0xa1, 0x95, 0xb6, 0xa9, 0xff, 0xa0, 0xc1, 0x52, 0x06, 0x08,
	0x6d, 0x42, 0xc9, 0x09, 0x28, 0x63, 0x2e, 0xf1, 0x0e, 0x1a, 0x4e, 0x04, 0x90, 0x6f, 0x56, 0xd1,
	0x5a, 0x8a, 0xf7, 0x62, 0x5d, 0x11, 0x03, 0xeb, 0xd8, 0x41, 0x2b, 0x7a, 0x4f, 0xc4, 0x02, 0x21,
	0xd5, 0xe1, 0xe5, 0x63, 0x22, 0xfb, 0xbb, 0x0e, 0x33, 0x7e, 0x40, 0x7d, 0xca, 0x70, 0x20, 0x7a,
	0xda, 0x8c, 0x15, 0xaf, 0x07, 0xde, 0xb1, 0x93, 0xe3, 0xdf, 0x31, 0xe3, 0x2e, 0x54, 0xd2, 0xb7,
	0x7a, 0xcf, 0x0e, 0x38, 0x71, 0x88, 0x2f, 0x27, 0x93, 0x91, 0x57, 0xfa, 0xa5, 0x06, 0x2b, 0xd9,
	0x7a, 0x39, 0x07, 0x72, 0x01, 0x66, 0xe3, 0x4e, 0x2b, 0x1f, 0x35, 0x2b, 0x11, 0xa0, 0x6d, 0x38,
	0xd7, 0x76, 0x69, 0xd3, 0x76, 0x1b, 0x7e, 0xda, 0x56, 0x23, 0xb0, 0xb9, 0x7c, 0x4c, 0xa7, 0xac,
	0xb3, 0x12, 0xd0, 0xcf, 0xd1, 0xe6, 0xe2, 0x3a, 0x1d, 0xd2, 0xf0, 0x92, 0x8a, 0xc3, 0x15, 0x59,
	0x29, 0x5a, 0x20, 0x44, 0x0f, 0x43, 0x49, 0xd8, 0xce, 0xb1, 0x4b, 0xda, 0xa4, 0xe9, 0x62, 0x85,
	0x51, 0xed, 0x3c, 0x92, 0x0a, 0x98, 0xf1, 0xa1, 0x2c, 0xf5, 0x3d, 0xec, 0xb5, 0x88, 0xd7, 0xce,
	0x1c, 0xf3, 0x3e, 0x80, 0x92, 0x2f, 0xb7, 0x1b, 0x19, 0xe3, 0xde, 0x46, 0x4e, 0x79, 0x0d, 0x5b,
	0xb4, 0x96, 0xfc, 0x61, 0x2f, 0x5b, 0x9f, 0xcf, 0xc3, 0x9c, 0x9c, 0xac, 0xc4, 0x1c, 0x85, 0xbe,
	0xd2, 0xe0, 0xcc, 0xe0, 0xc4, 0x89, 0xcc, 0x1c, 0x27, 0x39, 0x43, 0xb1, 0x5e, 0x9b, 0x18, 0x2f,
	0x63, 0x34, 0x36, 0x3e, 0xfe, 0xf5, 0xf7, 0x2f, 0xa6, 0x2e, 0xa3, 0x4b, 0x59, 0xe3, 0x7a, 0x7a,
	0xb6, 0x67, 0xe8, 0x4b, 0x4d, 0x0e, 0xe3, 0x19, 0x29, 0x43, 0x2b, 0xa6, 0xfc, 0x6c, 0x30, 0xa3,
	0xcf, 0x06, 0xf3, 0x61, 0xf8, 0xd9, 0xa0, 0xdf, 0x19, 0xc1, 0x67, 0x44, 0xea, 0x8d, 0x4d, 0x41,
	0xeb, 0x1a, 0xda, 0x18, 0x4b, 0xab, 0xa6, 0x72, 0x8b, 0x3e, 0xd5, 0x00, 0x92, 0x21, 0x17, 0x55,
	0x47, 0x78, 0xee, 0x1b, 0xb8, 0xf5, 0x8d, 0x09, 0x90, 0x8a, 0xd6, 0x65, 0x41, 0xeb, 0x22, 0x3a,
	0x9f, 0x49, 0x4b, 0x8e, 0xc6, 0xc8, 0x87, 0xf9, 0x47, 0xa2, 0xf1, 0xa9, 0xe1, 0x38, 0x2f, 0x37,
	0x79, 0x2d, 0x39, 0xd6, 0x34, 0xae, 0x0a, 0x77, 0x15, 0xb4, 0x9a, 0xe9, 0x4e, 0x7c, 0x19, 0x76,
	0x42, 0x0f, 0x5f, 0x6b, 0xb0, 0xdc, 0xf7, 0x6e, 0xc7, 0x53, 0xd4, 0x56, 0x8e, 0x8f, 0x11, 0x53,
	0x9f, 0x5e, 0x9d, 0x74, 0xce, 0xca, 0x2b, 0x9e, 0x64, 0x90, 0xa8, 0x45, 0x03, 0x18, 0xfa, 0x48,
	0x83, 0xd3, 0x7d, 0x43, 0x11, 0xba, 0x36, 0x01, 0xb5, 0x98, 0xd3, 0xa5, 0x71, 0x9c, 0x98, 0x51,
	0x11, 0x64, 0x74, 0x54, 0xce, 0x23, 0x83, 0xbe, 0xd3, 0xe0, 0xc2, 0xa8, 0xb1, 0x06, 0x6d, 0x4f,
	0x40, 0x29, 0x67, 0x16, 0xd2, 0xff, 0x9d, 0xf7, 0xf5, 0x37, 0x80, 0xcf, 0x2b, 0xed, 0x54, 0xd2,
	0x44, 0x6b, 0xc7, 0x0c, 0x73, 0x47, 0xf1, 0x3a, 0x86, 0xc5, 0x34, 0x05, 0x39, 0x57, 0xe4, 0x95,
	0xd5, 0xfa, 0xb8, 0x54, 0x09, 0xf5, 0xbc, 0xda, 0x4a, 0xd1, 0x78, 0x2e, 0xdc, 0x7c, 0xa3, 0xc9,
	0x0f, 0xe1, 0xcc, 0x6e, 0x3c, 0xea, 0x7a, 0x8f, 0x18, 0x22, 0xf4, 0x6b, 0x7f, 0xa1, 0x35, 0x1b,
	0xd7, 0x05, 0xd3, 0xab, 0xe8, 0x4a, 0x7e, 0xc2, 0x52, 0x94, 0xbe, 0xd5, 0xe0, 0x5c, 0x6e, 0x97,
	0x43, 0xff, 0x99, 0xe0, 0x84, 0xb3, 0xfa, 0xa2, 0x7e, 0x63, 0x1c, 0xe3, 0x3e, 0x2d, 0xc3, 0x14,
	0x9c, 0xab, 0xe8, 0x6a, 0x2e, 0xe7, 0xbe, 0xce, 0x57, 0xaf, 0xff, 0xf4, 0x7a, 0x55, 0x7b, 0xf9,
	0x7a, 0x55, 0xfb, 0xed, 0xf5, 0xaa, 0xf6, 0xf4, 0x76, 0xea, 0x0f, 0x1d, 0x3f, 0x38, 0x62, 0x5d,
	0x9b, 0x13, 0xc7, 0xb5, 0x9b, 0x4c, 0xae, 0x6a, 0x43, 0x7f, 0x9c, 0xdc, 0xc3, 0xbc, 0xd3, 0x3c,
	0x25, 0xc4, 0xb7, 0xfe, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x24, 0x15, 0xd4, 0xca, 0x4d, 0x12, 0x00,
	0x00,
}

func (m *ListAttestationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAttestationsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.QueryFilter != nil {
		nn1, err := m.QueryFilter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListAttestationsRequest_BlockRoot) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlockRoot != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(len(m.BlockRoot)))
		i += copy(dAtA[i:], m.BlockRoot)
	}
	return i, nil
}
func (m *ListAttestationsRequest_Slot) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	i = encodeVarintBeaconChain(dAtA, i, uint64(m.Slot))
	return i, nil
}
func (m *ListAttestationsRequest_Epoch) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	i = encodeVarintBeaconChain(dAtA, i, uint64(m.Epoch))
	return i, nil
}
func (m *ListAttestationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAttestationsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Attestations) > 0 {
		for _, msg := range m.Attestations {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBeaconChain(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListBlocksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBlocksRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.QueryFilter != nil {
		nn2, err := m.QueryFilter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListBlocksRequest_Root) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Root != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(len(m.Root)))
		i += copy(dAtA[i:], m.Root)
	}
	return i, nil
}
func (m *ListBlocksRequest_Slot) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	i = encodeVarintBeaconChain(dAtA, i, uint64(m.Slot))
	return i, nil
}
func (m *ListBlocksRequest_Epoch) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	i = encodeVarintBeaconChain(dAtA, i, uint64(m.Epoch))
	return i, nil
}
func (m *ListBlocksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBlocksResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, msg := range m.Blocks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBeaconChain(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChainHead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainHead) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BlockRoot) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(len(m.BlockRoot)))
		i += copy(dAtA[i:], m.BlockRoot)
	}
	if m.BlockSlot != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(m.BlockSlot))
	}
	if m.FinalizedSlot != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(m.FinalizedSlot))
	}
	if len(m.FinalizedBlockRoot) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(len(m.FinalizedBlockRoot)))
		i += copy(dAtA[i:], m.FinalizedBlockRoot)
	}
	if m.JustifiedSlot != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(m.JustifiedSlot))
	}
	if len(m.JustifiedBlockRoot) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(len(m.JustifiedBlockRoot)))
		i += copy(dAtA[i:], m.JustifiedBlockRoot)
	}
	if m.PreviousJustifiedSlot != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(m.PreviousJustifiedSlot))
	}
	if len(m.PreviousJustifiedBlockRoot) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(len(m.PreviousJustifiedBlockRoot)))
		i += copy(dAtA[i:], m.PreviousJustifiedBlockRoot)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetValidatorBalancesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetValidatorBalancesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(m.Epoch))
	}
	if len(m.PublicKeys) > 0 {
		for _, b := range m.PublicKeys {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBeaconChain(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.Indices) > 0 {
		dAtA4 := make([]byte, len(m.Indices)*10)
		var j3 int
		for _, num := range m.Indices {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ValidatorBalances) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorBalances) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for _, msg := range m.Balances {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBeaconChain(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ValidatorBalances_Balance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorBalances_Balance) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(m.Index))
	}
	if m.Balance != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(m.Balance))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetValidatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetValidatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.QueryFilter != nil {
		nn5, err := m.QueryFilter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetValidatorsRequest_Epoch) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintBeaconChain(dAtA, i, uint64(m.Epoch))
	return i, nil
}
func (m *GetValidatorsRequest_Genesis) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	if m.Genesis {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *Validators) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validators) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(m.Epoch))
	}
	if len(m.Validators) > 0 {
		for _, msg := range m.Validators {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBeaconChain(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetValidatorActiveSetChangesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetValidatorActiveSetChangesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(m.Epoch))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ActiveSetChanges) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveSetChanges) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(m.Epoch))
	}
	if len(m.ActivatedPublicKeys) > 0 {
		for _, b := range m.ActivatedPublicKeys {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBeaconChain(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.ExitedPublicKeys) > 0 {
		for _, b := range m.ExitedPublicKeys {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintBeaconChain(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.EjectedPublicKeys) > 0 {
		for _, b := range m.EjectedPublicKeys {
			dAtA[i] = 0x22
			i++
			i = encodeVarintBeaconChain(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ValidatorQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorQueue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChurnLimit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(m.ChurnLimit))
	}
	if len(m.ActivationPublicKeys) > 0 {
		for _, b := range m.ActivationPublicKeys {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBeaconChain(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.ExitPublicKeys) > 0 {
		for _, b := range m.ExitPublicKeys {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintBeaconChain(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListValidatorAssignmentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListValidatorAssignmentsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(m.Epoch))
	}
	if len(m.PublicKeys) > 0 {
		for _, b := range m.PublicKeys {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBeaconChain(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.Indices) > 0 {
		dAtA7 := make([]byte, len(m.Indices)*10)
		var j6 int
		for _, num := range m.Indices {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ValidatorAssignments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorAssignments) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(m.Epoch))
	}
	if len(m.Assignments) > 0 {
		for _, msg := range m.Assignments {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBeaconChain(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ValidatorAssignments_CommitteeAssignment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorAssignments_CommitteeAssignment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CrosslinkCommittees) > 0 {
		dAtA9 := make([]byte, len(m.CrosslinkCommittees)*10)
		var j8 int
		for _, num := range m.CrosslinkCommittees {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(j8))
		i += copy(dAtA[i:], dAtA9[:j8])
	}
	if m.Shard != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(m.Shard))
	}
	if m.Slot != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(m.Slot))
	}
	if m.Proposer {
		dAtA[i] = 0x20
		i++
		if m.Proposer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.PublicKey) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetValidatorParticipationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetValidatorParticipationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(m.Epoch))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ValidatorParticipation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorParticipation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(m.Epoch))
	}
	if m.Finalized {
		dAtA[i] = 0x10
		i++
		if m.Finalized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.GlobalParticipationRate != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.GlobalParticipationRate))))
		i += 4
	}
	if m.VotedEther != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(m.VotedEther))
	}
	if m.EligibleEther != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBeaconChain(dAtA, i, uint64(m.EligibleEther))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListPendingAttestationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPendingAttestationsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PendingAttestations) > 0 {
		for _, msg := range m.PendingAttestations {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBeaconChain(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintBeaconChain(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ListAttestationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryFilter != nil {
		n += m.QueryFilter.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAttestationsRequest_BlockRoot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockRoot != nil {
		l = len(m.BlockRoot)
		n += 1 + l + sovBeaconChain(uint64(l))
	}
	return n
}
func (m *ListAttestationsRequest_Slot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovBeaconChain(uint64(m.Slot))
	return n
}
func (m *ListAttestationsRequest_Epoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovBeaconChain(uint64(m.Epoch))
	return n
}
func (m *ListAttestationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attestations) > 0 {
		for _, e := range m.Attestations {
			l = e.Size()
			n += 1 + l + sovBeaconChain(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListBlocksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryFilter != nil {
		n += m.QueryFilter.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListBlocksRequest_Root) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Root != nil {
		l = len(m.Root)
		n += 1 + l + sovBeaconChain(uint64(l))
	}
	return n
}
func (m *ListBlocksRequest_Slot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovBeaconChain(uint64(m.Slot))
	return n
}
func (m *ListBlocksRequest_Epoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovBeaconChain(uint64(m.Epoch))
	return n
}
func (m *ListBlocksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovBeaconChain(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChainHead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockRoot)
	if l > 0 {
		n += 1 + l + sovBeaconChain(uint64(l))
	}
	if m.BlockSlot != 0 {
		n += 1 + sovBeaconChain(uint64(m.BlockSlot))
	}
	if m.FinalizedSlot != 0 {
		n += 1 + sovBeaconChain(uint64(m.FinalizedSlot))
	}
	l = len(m.FinalizedBlockRoot)
	if l > 0 {
		n += 1 + l + sovBeaconChain(uint64(l))
	}
	if m.JustifiedSlot != 0 {
		n += 1 + sovBeaconChain(uint64(m.JustifiedSlot))
	}
	l = len(m.JustifiedBlockRoot)
	if l > 0 {
		n += 1 + l + sovBeaconChain(uint64(l))
	}
	if m.PreviousJustifiedSlot != 0 {
		n += 1 + sovBeaconChain(uint64(m.PreviousJustifiedSlot))
	}
	l = len(m.PreviousJustifiedBlockRoot)
	if l > 0 {
		n += 1 + l + sovBeaconChain(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetValidatorBalancesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovBeaconChain(uint64(m.Epoch))
	}
	if len(m.PublicKeys) > 0 {
		for _, b := range m.PublicKeys {
			l = len(b)
			n += 1 + l + sovBeaconChain(uint64(l))
		}
	}
	if len(m.Indices) > 0 {
		l = 0
		for _, e := range m.Indices {
			l += sovBeaconChain(uint64(e))
		}
		n += 1 + sovBeaconChain(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidatorBalances) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovBeaconChain(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidatorBalances_Balance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovBeaconChain(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovBeaconChain(uint64(m.Index))
	}
	if m.Balance != 0 {
		n += 1 + sovBeaconChain(uint64(m.Balance))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetValidatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryFilter != nil {
		n += m.QueryFilter.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetValidatorsRequest_Epoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovBeaconChain(uint64(m.Epoch))
	return n
}
func (m *GetValidatorsRequest_Genesis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *Validators) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovBeaconChain(uint64(m.Epoch))
	}
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovBeaconChain(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetValidatorActiveSetChangesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovBeaconChain(uint64(m.Epoch))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActiveSetChanges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovBeaconChain(uint64(m.Epoch))
	}
	if len(m.ActivatedPublicKeys) > 0 {
		for _, b := range m.ActivatedPublicKeys {
			l = len(b)
			n += 1 + l + sovBeaconChain(uint64(l))
		}
	}
	if len(m.ExitedPublicKeys) > 0 {
		for _, b := range m.ExitedPublicKeys {
			l = len(b)
			n += 1 + l + sovBeaconChain(uint64(l))
		}
	}
	if len(m.EjectedPublicKeys) > 0 {
		for _, b := range m.EjectedPublicKeys {
			l = len(b)
			n += 1 + l + sovBeaconChain(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidatorQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChurnLimit != 0 {
		n += 1 + sovBeaconChain(uint64(m.ChurnLimit))
	}
	if len(m.ActivationPublicKeys) > 0 {
		for _, b := range m.ActivationPublicKeys {
			l = len(b)
			n += 1 + l + sovBeaconChain(uint64(l))
		}
	}
	if len(m.ExitPublicKeys) > 0 {
		for _, b := range m.ExitPublicKeys {
			l = len(b)
			n += 1 + l + sovBeaconChain(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListValidatorAssignmentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovBeaconChain(uint64(m.Epoch))
	}
	if len(m.PublicKeys) > 0 {
		for _, b := range m.PublicKeys {
			l = len(b)
			n += 1 + l + sovBeaconChain(uint64(l))
		}
	}
	if len(m.Indices) > 0 {
		l = 0
		for _, e := range m.Indices {
			l += sovBeaconChain(uint64(e))
		}
		n += 1 + sovBeaconChain(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidatorAssignments) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovBeaconChain(uint64(m.Epoch))
	}
	if len(m.Assignments) > 0 {
		for _, e := range m.Assignments {
			l = e.Size()
			n += 1 + l + sovBeaconChain(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidatorAssignments_CommitteeAssignment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrosslinkCommittees) > 0 {
		l = 0
		for _, e := range m.CrosslinkCommittees {
			l += sovBeaconChain(uint64(e))
		}
		n += 1 + sovBeaconChain(uint64(l)) + l
	}
	if m.Shard != 0 {
		n += 1 + sovBeaconChain(uint64(m.Shard))
	}
	if m.Slot != 0 {
		n += 1 + sovBeaconChain(uint64(m.Slot))
	}
	if m.Proposer {
		n += 2
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovBeaconChain(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetValidatorParticipationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovBeaconChain(uint64(m.Epoch))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidatorParticipation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovBeaconChain(uint64(m.Epoch))
	}
	if m.Finalized {
		n += 2
	}
	if m.GlobalParticipationRate != 0 {
		n += 5
	}
	if m.VotedEther != 0 {
		n += 1 + sovBeaconChain(uint64(m.VotedEther))
	}
	if m.EligibleEther != 0 {
		n += 1 + sovBeaconChain(uint64(m.EligibleEther))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListPendingAttestationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PendingAttestations) > 0 {
		for _, e := range m.PendingAttestations {
			l = e.Size()
			n += 1 + l + sovBeaconChain(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBeaconChain(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBeaconChain(x uint64) (n int) {
	return sovBeaconChain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ListAttestationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAttestationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAttestationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.QueryFilter = &ListAttestationsRequest_BlockRoot{v}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QueryFilter = &ListAttestationsRequest_Slot{v}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QueryFilter = &ListAttestationsRequest_Epoch{v}
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAttestationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAttestationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAttestationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestations = append(m.Attestations, &Attestation{})
			if err := m.Attestations[len(m.Attestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBlocksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBlocksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBlocksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.QueryFilter = &ListBlocksRequest_Root{v}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QueryFilter = &ListBlocksRequest_Slot{v}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QueryFilter = &ListBlocksRequest_Epoch{v}
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBlocksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBlocksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBlocksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, &BeaconBlock{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainHead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainHead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainHead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockRoot = append(m.BlockRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockRoot == nil {
				m.BlockRoot = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSlot", wireType)
			}
			m.BlockSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSlot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedSlot", wireType)
			}
			m.FinalizedSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalizedSlot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedBlockRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalizedBlockRoot = append(m.FinalizedBlockRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.FinalizedBlockRoot == nil {
				m.FinalizedBlockRoot = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JustifiedSlot", wireType)
			}
			m.JustifiedSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JustifiedSlot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JustifiedBlockRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JustifiedBlockRoot = append(m.JustifiedBlockRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.JustifiedBlockRoot == nil {
				m.JustifiedBlockRoot = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousJustifiedSlot", wireType)
			}
			m.PreviousJustifiedSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousJustifiedSlot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousJustifiedBlockRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousJustifiedBlockRoot = append(m.PreviousJustifiedBlockRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.PreviousJustifiedBlockRoot == nil {
				m.PreviousJustifiedBlockRoot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetValidatorBalancesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetValidatorBalancesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetValidatorBalancesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKeys = append(m.PublicKeys, make([]byte, postIndex-iNdEx))
			copy(m.PublicKeys[len(m.PublicKeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBeaconChain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Indices = append(m.Indices, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBeaconChain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBeaconChain
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBeaconChain
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Indices) == 0 {
					m.Indices = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBeaconChain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Indices = append(m.Indices, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Indices", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorBalances) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorBalances: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorBalances: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, &ValidatorBalances_Balance{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorBalances_Balance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Balance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Balance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetValidatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetValidatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetValidatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QueryFilter = &GetValidatorsRequest_Epoch{v}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Genesis", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.QueryFilter = &GetValidatorsRequest_Genesis{b}
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validators) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validators: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validators: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, &Validator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetValidatorActiveSetChangesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetValidatorActiveSetChangesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetValidatorActiveSetChangesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveSetChanges) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveSetChanges: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveSetChanges: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivatedPublicKeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivatedPublicKeys = append(m.ActivatedPublicKeys, make([]byte, postIndex-iNdEx))
			copy(m.ActivatedPublicKeys[len(m.ActivatedPublicKeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitedPublicKeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExitedPublicKeys = append(m.ExitedPublicKeys, make([]byte, postIndex-iNdEx))
			copy(m.ExitedPublicKeys[len(m.ExitedPublicKeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EjectedPublicKeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EjectedPublicKeys = append(m.EjectedPublicKeys, make([]byte, postIndex-iNdEx))
			copy(m.EjectedPublicKeys[len(m.EjectedPublicKeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChurnLimit", wireType)
			}
			m.ChurnLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChurnLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationPublicKeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivationPublicKeys = append(m.ActivationPublicKeys, make([]byte, postIndex-iNdEx))
			copy(m.ActivationPublicKeys[len(m.ActivationPublicKeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitPublicKeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExitPublicKeys = append(m.ExitPublicKeys, make([]byte, postIndex-iNdEx))
			copy(m.ExitPublicKeys[len(m.ExitPublicKeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListValidatorAssignmentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListValidatorAssignmentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListValidatorAssignmentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKeys = append(m.PublicKeys, make([]byte, postIndex-iNdEx))
			copy(m.PublicKeys[len(m.PublicKeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBeaconChain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Indices = append(m.Indices, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBeaconChain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBeaconChain
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBeaconChain
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Indices) == 0 {
					m.Indices = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBeaconChain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Indices = append(m.Indices, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Indices", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorAssignments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorAssignments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorAssignments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assignments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assignments = append(m.Assignments, &ValidatorAssignments_CommitteeAssignment{})
			if err := m.Assignments[len(m.Assignments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorAssignments_CommitteeAssignment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitteeAssignment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitteeAssignment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBeaconChain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CrosslinkCommittees = append(m.CrosslinkCommittees, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBeaconChain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBeaconChain
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBeaconChain
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CrosslinkCommittees) == 0 {
					m.CrosslinkCommittees = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBeaconChain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CrosslinkCommittees = append(m.CrosslinkCommittees, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosslinkCommittees", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			m.Shard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shard |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Proposer = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetValidatorParticipationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetValidatorParticipationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetValidatorParticipationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorParticipation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorParticipation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorParticipation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finalized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Finalized = bool(v != 0)
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalParticipationRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.GlobalParticipationRate = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotedEther", wireType)
			}
			m.VotedEther = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotedEther |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EligibleEther", wireType)
			}
			m.EligibleEther = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EligibleEther |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPendingAttestationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPendingAttestationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPendingAttestationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingAttestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingAttestations = append(m.PendingAttestations, &PendingAttestation{})
			if err := m.PendingAttestations[len(m.PendingAttestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBeaconChain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBeaconChain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBeaconChain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBeaconChain
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthBeaconChain
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBeaconChain
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBeaconChain(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthBeaconChain
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBeaconChain = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBeaconChain   = fmt.Errorf("proto: integer overflow")
)
