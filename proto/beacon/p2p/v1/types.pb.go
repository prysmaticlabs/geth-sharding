// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/beacon/p2p/v1/types.proto

package ethereum_beacon_p2p_v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/prysmaticlabs/prysm/proto/common"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ValidatorRecord_StatusFlags int32

const (
	ValidatorRecord_INITIAL        ValidatorRecord_StatusFlags = 0
	ValidatorRecord_INITIATED_EXIT ValidatorRecord_StatusFlags = 1
	ValidatorRecord_WITHDRAWABLE   ValidatorRecord_StatusFlags = 2
)

var ValidatorRecord_StatusFlags_name = map[int32]string{
	0: "INITIAL",
	1: "INITIATED_EXIT",
	2: "WITHDRAWABLE",
}
var ValidatorRecord_StatusFlags_value = map[string]int32{
	"INITIAL":        0,
	"INITIATED_EXIT": 1,
	"WITHDRAWABLE":   2,
}

func (x ValidatorRecord_StatusFlags) String() string {
	return proto.EnumName(ValidatorRecord_StatusFlags_name, int32(x))
}
func (ValidatorRecord_StatusFlags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_types_c60944b3f0e8dec2, []int{6, 0}
}

type ValidatorRegistryDeltaBlock_ValidatorRegistryDeltaFlags int32

const (
	ValidatorRegistryDeltaBlock_ACTIVATION ValidatorRegistryDeltaBlock_ValidatorRegistryDeltaFlags = 0
	ValidatorRegistryDeltaBlock_EXIT       ValidatorRegistryDeltaBlock_ValidatorRegistryDeltaFlags = 1
)

var ValidatorRegistryDeltaBlock_ValidatorRegistryDeltaFlags_name = map[int32]string{
	0: "ACTIVATION",
	1: "EXIT",
}
var ValidatorRegistryDeltaBlock_ValidatorRegistryDeltaFlags_value = map[string]int32{
	"ACTIVATION": 0,
	"EXIT":       1,
}

func (x ValidatorRegistryDeltaBlock_ValidatorRegistryDeltaFlags) String() string {
	return proto.EnumName(ValidatorRegistryDeltaBlock_ValidatorRegistryDeltaFlags_name, int32(x))
}
func (ValidatorRegistryDeltaBlock_ValidatorRegistryDeltaFlags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_types_c60944b3f0e8dec2, []int{19, 0}
}

type BeaconState struct {
	ValidatorRegistry                    []*ValidatorRecord          `protobuf:"bytes,1,rep,name=validator_registry,json=validatorRegistry,proto3" json:"validator_registry,omitempty"`
	ValidatorRegistryUpdateSlot          uint64                      `protobuf:"varint,2,opt,name=validator_registry_update_slot,json=validatorRegistryUpdateSlot,proto3" json:"validator_registry_update_slot,omitempty"`
	ValidatorRegistryDeltaChainTipHash32 []byte                      `protobuf:"bytes,3,opt,name=validator_registry_delta_chain_tip_hash32,json=validatorRegistryDeltaChainTipHash32,proto3" json:"validator_registry_delta_chain_tip_hash32,omitempty"`
	ValidatorBalances                    []uint64                    `protobuf:"varint,4,rep,packed,name=validator_balances,json=validatorBalances,proto3" json:"validator_balances,omitempty"`
	LatestRandaoMixesHash32S             [][]byte                    `protobuf:"bytes,1004,rep,name=latest_randao_mixes_hash32s,json=latestRandaoMixesHash32s,proto3" json:"latest_randao_mixes_hash32s,omitempty"`
	PreviousEpochStartShard              uint64                      `protobuf:"varint,1005,opt,name=previous_epoch_start_shard,json=previousEpochStartShard,proto3" json:"previous_epoch_start_shard,omitempty"`
	CurrentEpochStartShard               uint64                      `protobuf:"varint,1006,opt,name=current_epoch_start_shard,json=currentEpochStartShard,proto3" json:"current_epoch_start_shard,omitempty"`
	PreviousEpochCalculationSlot         uint64                      `protobuf:"varint,1007,opt,name=previous_epoch_calculation_slot,json=previousEpochCalculationSlot,proto3" json:"previous_epoch_calculation_slot,omitempty"`
	CurrentEpochCalculationSlot          uint64                      `protobuf:"varint,1008,opt,name=current_epoch_calculation_slot,json=currentEpochCalculationSlot,proto3" json:"current_epoch_calculation_slot,omitempty"`
	PreviousEpochSeedHash32              []byte                      `protobuf:"bytes,1009,opt,name=previous_epoch_seed_hash32,json=previousEpochSeedHash32,proto3" json:"previous_epoch_seed_hash32,omitempty"`
	CurrentEpochSeedHash32               []byte                      `protobuf:"bytes,1010,opt,name=current_epoch_seed_hash32,json=currentEpochSeedHash32,proto3" json:"current_epoch_seed_hash32,omitempty"`
	PreviousJustifiedSlot                uint64                      `protobuf:"varint,2001,opt,name=previous_justified_slot,json=previousJustifiedSlot,proto3" json:"previous_justified_slot,omitempty"`
	JustifiedSlot                        uint64                      `protobuf:"varint,2002,opt,name=justified_slot,json=justifiedSlot,proto3" json:"justified_slot,omitempty"`
	JustificationBitfield                uint64                      `protobuf:"varint,2003,opt,name=justification_bitfield,json=justificationBitfield,proto3" json:"justification_bitfield,omitempty"`
	FinalizedSlot                        uint64                      `protobuf:"varint,2004,opt,name=finalized_slot,json=finalizedSlot,proto3" json:"finalized_slot,omitempty"`
	LatestCrosslinks                     []*CrosslinkRecord          `protobuf:"bytes,3001,rep,name=latest_crosslinks,json=latestCrosslinks,proto3" json:"latest_crosslinks,omitempty"`
	LatestBlockRootHash32S               [][]byte                    `protobuf:"bytes,3003,rep,name=latest_block_root_hash32s,json=latestBlockRootHash32s,proto3" json:"latest_block_root_hash32s,omitempty"`
	BatchedBlockRootHash32S              [][]byte                    `protobuf:"bytes,3004,rep,name=batched_block_root_hash32s,json=batchedBlockRootHash32s,proto3" json:"batched_block_root_hash32s,omitempty"`
	LatestPenalizedBalances              []uint64                    `protobuf:"varint,3005,rep,packed,name=latest_penalized_balances,json=latestPenalizedBalances,proto3" json:"latest_penalized_balances,omitempty"`
	LatestAttestations                   []*PendingAttestationRecord `protobuf:"bytes,3006,rep,name=latest_attestations,json=latestAttestations,proto3" json:"latest_attestations,omitempty"`
	LatestIndexRootHash32S               [][]byte                    `protobuf:"bytes,3007,rep,name=latest_index_root_hash32s,json=latestIndexRootHash32s,proto3" json:"latest_index_root_hash32s,omitempty"`
	LatestEth1Data                       *Eth1Data                   `protobuf:"bytes,4001,opt,name=latest_eth1_data,json=latestEth1Data,proto3" json:"latest_eth1_data,omitempty"`
	Eth1DataVotes                        []*Eth1DataVote             `protobuf:"bytes,4002,rep,name=eth1_data_votes,json=eth1DataVotes,proto3" json:"eth1_data_votes,omitempty"`
	GenesisTime                          uint64                      `protobuf:"varint,5001,opt,name=genesis_time,json=genesisTime,proto3" json:"genesis_time,omitempty"`
	Fork                                 *Fork                       `protobuf:"bytes,5002,opt,name=fork,proto3" json:"fork,omitempty"`
	Slot                                 uint64                      `protobuf:"varint,5003,opt,name=slot,proto3" json:"slot,omitempty"`
	XXX_NoUnkeyedLiteral                 struct{}                    `json:"-"`
	XXX_unrecognized                     []byte                      `json:"-"`
	XXX_sizecache                        int32                       `json:"-"`
}

func (m *BeaconState) Reset()         { *m = BeaconState{} }
func (m *BeaconState) String() string { return proto.CompactTextString(m) }
func (*BeaconState) ProtoMessage()    {}
func (*BeaconState) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_c60944b3f0e8dec2, []int{0}
}
func (m *BeaconState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeaconState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeaconState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BeaconState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconState.Merge(dst, src)
}
func (m *BeaconState) XXX_Size() int {
	return m.Size()
}
func (m *BeaconState) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconState.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconState proto.InternalMessageInfo

func (m *BeaconState) GetValidatorRegistry() []*ValidatorRecord {
	if m != nil {
		return m.ValidatorRegistry
	}
	return nil
}

func (m *BeaconState) GetValidatorRegistryUpdateSlot() uint64 {
	if m != nil {
		return m.ValidatorRegistryUpdateSlot
	}
	return 0
}

func (m *BeaconState) GetValidatorRegistryDeltaChainTipHash32() []byte {
	if m != nil {
		return m.ValidatorRegistryDeltaChainTipHash32
	}
	return nil
}

func (m *BeaconState) GetValidatorBalances() []uint64 {
	if m != nil {
		return m.ValidatorBalances
	}
	return nil
}

func (m *BeaconState) GetLatestRandaoMixesHash32S() [][]byte {
	if m != nil {
		return m.LatestRandaoMixesHash32S
	}
	return nil
}

func (m *BeaconState) GetPreviousEpochStartShard() uint64 {
	if m != nil {
		return m.PreviousEpochStartShard
	}
	return 0
}

func (m *BeaconState) GetCurrentEpochStartShard() uint64 {
	if m != nil {
		return m.CurrentEpochStartShard
	}
	return 0
}

func (m *BeaconState) GetPreviousEpochCalculationSlot() uint64 {
	if m != nil {
		return m.PreviousEpochCalculationSlot
	}
	return 0
}

func (m *BeaconState) GetCurrentEpochCalculationSlot() uint64 {
	if m != nil {
		return m.CurrentEpochCalculationSlot
	}
	return 0
}

func (m *BeaconState) GetPreviousEpochSeedHash32() []byte {
	if m != nil {
		return m.PreviousEpochSeedHash32
	}
	return nil
}

func (m *BeaconState) GetCurrentEpochSeedHash32() []byte {
	if m != nil {
		return m.CurrentEpochSeedHash32
	}
	return nil
}

func (m *BeaconState) GetPreviousJustifiedSlot() uint64 {
	if m != nil {
		return m.PreviousJustifiedSlot
	}
	return 0
}

func (m *BeaconState) GetJustifiedSlot() uint64 {
	if m != nil {
		return m.JustifiedSlot
	}
	return 0
}

func (m *BeaconState) GetJustificationBitfield() uint64 {
	if m != nil {
		return m.JustificationBitfield
	}
	return 0
}

func (m *BeaconState) GetFinalizedSlot() uint64 {
	if m != nil {
		return m.FinalizedSlot
	}
	return 0
}

func (m *BeaconState) GetLatestCrosslinks() []*CrosslinkRecord {
	if m != nil {
		return m.LatestCrosslinks
	}
	return nil
}

func (m *BeaconState) GetLatestBlockRootHash32S() [][]byte {
	if m != nil {
		return m.LatestBlockRootHash32S
	}
	return nil
}

func (m *BeaconState) GetBatchedBlockRootHash32S() [][]byte {
	if m != nil {
		return m.BatchedBlockRootHash32S
	}
	return nil
}

func (m *BeaconState) GetLatestPenalizedBalances() []uint64 {
	if m != nil {
		return m.LatestPenalizedBalances
	}
	return nil
}

func (m *BeaconState) GetLatestAttestations() []*PendingAttestationRecord {
	if m != nil {
		return m.LatestAttestations
	}
	return nil
}

func (m *BeaconState) GetLatestIndexRootHash32S() [][]byte {
	if m != nil {
		return m.LatestIndexRootHash32S
	}
	return nil
}

func (m *BeaconState) GetLatestEth1Data() *Eth1Data {
	if m != nil {
		return m.LatestEth1Data
	}
	return nil
}

func (m *BeaconState) GetEth1DataVotes() []*Eth1DataVote {
	if m != nil {
		return m.Eth1DataVotes
	}
	return nil
}

func (m *BeaconState) GetGenesisTime() uint64 {
	if m != nil {
		return m.GenesisTime
	}
	return 0
}

func (m *BeaconState) GetFork() *Fork {
	if m != nil {
		return m.Fork
	}
	return nil
}

func (m *BeaconState) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

type Fork struct {
	PreviousVersion      uint64   `protobuf:"varint,1,opt,name=previous_version,json=previousVersion,proto3" json:"previous_version,omitempty"`
	CurrentVersion       uint64   `protobuf:"varint,2,opt,name=current_version,json=currentVersion,proto3" json:"current_version,omitempty"`
	Slot                 uint64   `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Fork) Reset()         { *m = Fork{} }
func (m *Fork) String() string { return proto.CompactTextString(m) }
func (*Fork) ProtoMessage()    {}
func (*Fork) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_c60944b3f0e8dec2, []int{1}
}
func (m *Fork) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fork.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Fork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fork.Merge(dst, src)
}
func (m *Fork) XXX_Size() int {
	return m.Size()
}
func (m *Fork) XXX_DiscardUnknown() {
	xxx_messageInfo_Fork.DiscardUnknown(m)
}

var xxx_messageInfo_Fork proto.InternalMessageInfo

func (m *Fork) GetPreviousVersion() uint64 {
	if m != nil {
		return m.PreviousVersion
	}
	return 0
}

func (m *Fork) GetCurrentVersion() uint64 {
	if m != nil {
		return m.CurrentVersion
	}
	return 0
}

func (m *Fork) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

type PendingAttestationRecord struct {
	Data                  *AttestationData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	ParticipationBitfield []byte           `protobuf:"bytes,2,opt,name=participation_bitfield,json=participationBitfield,proto3" json:"participation_bitfield,omitempty"`
	CustodyBitfield       []byte           `protobuf:"bytes,3,opt,name=custody_bitfield,json=custodyBitfield,proto3" json:"custody_bitfield,omitempty"`
	SlotIncluded          uint64           `protobuf:"varint,4,opt,name=slot_included,json=slotIncluded,proto3" json:"slot_included,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}         `json:"-"`
	XXX_unrecognized      []byte           `json:"-"`
	XXX_sizecache         int32            `json:"-"`
}

func (m *PendingAttestationRecord) Reset()         { *m = PendingAttestationRecord{} }
func (m *PendingAttestationRecord) String() string { return proto.CompactTextString(m) }
func (*PendingAttestationRecord) ProtoMessage()    {}
func (*PendingAttestationRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_c60944b3f0e8dec2, []int{2}
}
func (m *PendingAttestationRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingAttestationRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingAttestationRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PendingAttestationRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingAttestationRecord.Merge(dst, src)
}
func (m *PendingAttestationRecord) XXX_Size() int {
	return m.Size()
}
func (m *PendingAttestationRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingAttestationRecord.DiscardUnknown(m)
}

var xxx_messageInfo_PendingAttestationRecord proto.InternalMessageInfo

func (m *PendingAttestationRecord) GetData() *AttestationData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PendingAttestationRecord) GetParticipationBitfield() []byte {
	if m != nil {
		return m.ParticipationBitfield
	}
	return nil
}

func (m *PendingAttestationRecord) GetCustodyBitfield() []byte {
	if m != nil {
		return m.CustodyBitfield
	}
	return nil
}

func (m *PendingAttestationRecord) GetSlotIncluded() uint64 {
	if m != nil {
		return m.SlotIncluded
	}
	return 0
}

type Attestation struct {
	Data                  *AttestationData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	ParticipationBitfield []byte           `protobuf:"bytes,2,opt,name=participation_bitfield,json=participationBitfield,proto3" json:"participation_bitfield,omitempty"`
	CustodyBitfield       []byte           `protobuf:"bytes,3,opt,name=custody_bitfield,json=custodyBitfield,proto3" json:"custody_bitfield,omitempty"`
	AggregateSignature    []byte           `protobuf:"bytes,4,opt,name=aggregate_signature,json=aggregateSignature,proto3" json:"aggregate_signature,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}         `json:"-"`
	XXX_unrecognized      []byte           `json:"-"`
	XXX_sizecache         int32            `json:"-"`
}

func (m *Attestation) Reset()         { *m = Attestation{} }
func (m *Attestation) String() string { return proto.CompactTextString(m) }
func (*Attestation) ProtoMessage()    {}
func (*Attestation) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_c60944b3f0e8dec2, []int{3}
}
func (m *Attestation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Attestation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Attestation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Attestation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attestation.Merge(dst, src)
}
func (m *Attestation) XXX_Size() int {
	return m.Size()
}
func (m *Attestation) XXX_DiscardUnknown() {
	xxx_messageInfo_Attestation.DiscardUnknown(m)
}

var xxx_messageInfo_Attestation proto.InternalMessageInfo

func (m *Attestation) GetData() *AttestationData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Attestation) GetParticipationBitfield() []byte {
	if m != nil {
		return m.ParticipationBitfield
	}
	return nil
}

func (m *Attestation) GetCustodyBitfield() []byte {
	if m != nil {
		return m.CustodyBitfield
	}
	return nil
}

func (m *Attestation) GetAggregateSignature() []byte {
	if m != nil {
		return m.AggregateSignature
	}
	return nil
}

type AttestationData struct {
	Slot                      uint64   `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	Shard                     uint64   `protobuf:"varint,2,opt,name=shard,proto3" json:"shard,omitempty"`
	BeaconBlockRootHash32     []byte   `protobuf:"bytes,3,opt,name=beacon_block_root_hash32,json=beaconBlockRootHash32,proto3" json:"beacon_block_root_hash32,omitempty"`
	EpochBoundaryRootHash32   []byte   `protobuf:"bytes,4,opt,name=epoch_boundary_root_hash32,json=epochBoundaryRootHash32,proto3" json:"epoch_boundary_root_hash32,omitempty"`
	ShardBlockRootHash32      []byte   `protobuf:"bytes,5,opt,name=shard_block_root_hash32,json=shardBlockRootHash32,proto3" json:"shard_block_root_hash32,omitempty"`
	LatestCrosslinkRootHash32 []byte   `protobuf:"bytes,6,opt,name=latest_crosslink_root_hash32,json=latestCrosslinkRootHash32,proto3" json:"latest_crosslink_root_hash32,omitempty"`
	JustifiedSlot             uint64   `protobuf:"varint,7,opt,name=justified_slot,json=justifiedSlot,proto3" json:"justified_slot,omitempty"`
	JustifiedBlockRootHash32  []byte   `protobuf:"bytes,8,opt,name=justified_block_root_hash32,json=justifiedBlockRootHash32,proto3" json:"justified_block_root_hash32,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *AttestationData) Reset()         { *m = AttestationData{} }
func (m *AttestationData) String() string { return proto.CompactTextString(m) }
func (*AttestationData) ProtoMessage()    {}
func (*AttestationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_c60944b3f0e8dec2, []int{4}
}
func (m *AttestationData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttestationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttestationData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AttestationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestationData.Merge(dst, src)
}
func (m *AttestationData) XXX_Size() int {
	return m.Size()
}
func (m *AttestationData) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestationData.DiscardUnknown(m)
}

var xxx_messageInfo_AttestationData proto.InternalMessageInfo

func (m *AttestationData) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *AttestationData) GetShard() uint64 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *AttestationData) GetBeaconBlockRootHash32() []byte {
	if m != nil {
		return m.BeaconBlockRootHash32
	}
	return nil
}

func (m *AttestationData) GetEpochBoundaryRootHash32() []byte {
	if m != nil {
		return m.EpochBoundaryRootHash32
	}
	return nil
}

func (m *AttestationData) GetShardBlockRootHash32() []byte {
	if m != nil {
		return m.ShardBlockRootHash32
	}
	return nil
}

func (m *AttestationData) GetLatestCrosslinkRootHash32() []byte {
	if m != nil {
		return m.LatestCrosslinkRootHash32
	}
	return nil
}

func (m *AttestationData) GetJustifiedSlot() uint64 {
	if m != nil {
		return m.JustifiedSlot
	}
	return 0
}

func (m *AttestationData) GetJustifiedBlockRootHash32() []byte {
	if m != nil {
		return m.JustifiedBlockRootHash32
	}
	return nil
}

type AttestationDataAndCustodyBit struct {
	Data                 *AttestationData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	CustodyBit           bool             `protobuf:"varint,2,opt,name=custody_bit,json=custodyBit,proto3" json:"custody_bit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AttestationDataAndCustodyBit) Reset()         { *m = AttestationDataAndCustodyBit{} }
func (m *AttestationDataAndCustodyBit) String() string { return proto.CompactTextString(m) }
func (*AttestationDataAndCustodyBit) ProtoMessage()    {}
func (*AttestationDataAndCustodyBit) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_c60944b3f0e8dec2, []int{5}
}
func (m *AttestationDataAndCustodyBit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttestationDataAndCustodyBit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttestationDataAndCustodyBit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AttestationDataAndCustodyBit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestationDataAndCustodyBit.Merge(dst, src)
}
func (m *AttestationDataAndCustodyBit) XXX_Size() int {
	return m.Size()
}
func (m *AttestationDataAndCustodyBit) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestationDataAndCustodyBit.DiscardUnknown(m)
}

var xxx_messageInfo_AttestationDataAndCustodyBit proto.InternalMessageInfo

func (m *AttestationDataAndCustodyBit) GetData() *AttestationData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AttestationDataAndCustodyBit) GetCustodyBit() bool {
	if m != nil {
		return m.CustodyBit
	}
	return false
}

type ValidatorRecord struct {
	Pubkey                      []byte                      `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	WithdrawalCredentialsHash32 []byte                      `protobuf:"bytes,2,opt,name=withdrawal_credentials_hash32,json=withdrawalCredentialsHash32,proto3" json:"withdrawal_credentials_hash32,omitempty"`
	RandaoCommitmentHash32      []byte                      `protobuf:"bytes,3,opt,name=randao_commitment_hash32,json=randaoCommitmentHash32,proto3" json:"randao_commitment_hash32,omitempty"`
	RandaoLayers                uint64                      `protobuf:"varint,4,opt,name=randao_layers,json=randaoLayers,proto3" json:"randao_layers,omitempty"`
	ActivationEpoch             uint64                      `protobuf:"varint,5,opt,name=activation_epoch,json=activationEpoch,proto3" json:"activation_epoch,omitempty"`
	ExitEpoch                   uint64                      `protobuf:"varint,6,opt,name=exit_epoch,json=exitEpoch,proto3" json:"exit_epoch,omitempty"`
	WithdrawalEpoch             uint64                      `protobuf:"varint,7,opt,name=withdrawal_epoch,json=withdrawalEpoch,proto3" json:"withdrawal_epoch,omitempty"`
	PenalizedEpoch              uint64                      `protobuf:"varint,8,opt,name=penalized_epoch,json=penalizedEpoch,proto3" json:"penalized_epoch,omitempty"`
	StatusFlags                 ValidatorRecord_StatusFlags `protobuf:"varint,10,opt,name=status_flags,json=statusFlags,proto3,enum=ethereum.beacon.p2p.v1.ValidatorRecord_StatusFlags" json:"status_flags,omitempty"`
	Balance                     uint64                      `protobuf:"varint,1000,opt,name=balance,proto3" json:"balance,omitempty"` // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral        struct{}                    `json:"-"`
	XXX_unrecognized            []byte                      `json:"-"`
	XXX_sizecache               int32                       `json:"-"`
}

func (m *ValidatorRecord) Reset()         { *m = ValidatorRecord{} }
func (m *ValidatorRecord) String() string { return proto.CompactTextString(m) }
func (*ValidatorRecord) ProtoMessage()    {}
func (*ValidatorRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_c60944b3f0e8dec2, []int{6}
}
func (m *ValidatorRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ValidatorRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorRecord.Merge(dst, src)
}
func (m *ValidatorRecord) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorRecord proto.InternalMessageInfo

func (m *ValidatorRecord) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *ValidatorRecord) GetWithdrawalCredentialsHash32() []byte {
	if m != nil {
		return m.WithdrawalCredentialsHash32
	}
	return nil
}

func (m *ValidatorRecord) GetRandaoCommitmentHash32() []byte {
	if m != nil {
		return m.RandaoCommitmentHash32
	}
	return nil
}

func (m *ValidatorRecord) GetRandaoLayers() uint64 {
	if m != nil {
		return m.RandaoLayers
	}
	return 0
}

func (m *ValidatorRecord) GetActivationEpoch() uint64 {
	if m != nil {
		return m.ActivationEpoch
	}
	return 0
}

func (m *ValidatorRecord) GetExitEpoch() uint64 {
	if m != nil {
		return m.ExitEpoch
	}
	return 0
}

func (m *ValidatorRecord) GetWithdrawalEpoch() uint64 {
	if m != nil {
		return m.WithdrawalEpoch
	}
	return 0
}

func (m *ValidatorRecord) GetPenalizedEpoch() uint64 {
	if m != nil {
		return m.PenalizedEpoch
	}
	return 0
}

func (m *ValidatorRecord) GetStatusFlags() ValidatorRecord_StatusFlags {
	if m != nil {
		return m.StatusFlags
	}
	return ValidatorRecord_INITIAL
}

// Deprecated: Do not use.
func (m *ValidatorRecord) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

type ShardReassignmentRecord struct {
	ValidatorIndex       uint64   `protobuf:"varint,1,opt,name=validator_index,json=validatorIndex,proto3" json:"validator_index,omitempty"`
	Shard                uint64   `protobuf:"varint,2,opt,name=shard,proto3" json:"shard,omitempty"`
	Slot                 uint64   `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShardReassignmentRecord) Reset()         { *m = ShardReassignmentRecord{} }
func (m *ShardReassignmentRecord) String() string { return proto.CompactTextString(m) }
func (*ShardReassignmentRecord) ProtoMessage()    {}
func (*ShardReassignmentRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_c60944b3f0e8dec2, []int{7}
}
func (m *ShardReassignmentRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardReassignmentRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardReassignmentRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ShardReassignmentRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardReassignmentRecord.Merge(dst, src)
}
func (m *ShardReassignmentRecord) XXX_Size() int {
	return m.Size()
}
func (m *ShardReassignmentRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardReassignmentRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ShardReassignmentRecord proto.InternalMessageInfo

func (m *ShardReassignmentRecord) GetValidatorIndex() uint64 {
	if m != nil {
		return m.ValidatorIndex
	}
	return 0
}

func (m *ShardReassignmentRecord) GetShard() uint64 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *ShardReassignmentRecord) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

type CrosslinkRecord struct {
	Slot                 uint64   `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	ShardBlockRootHash32 []byte   `protobuf:"bytes,2,opt,name=shard_block_root_hash32,json=shardBlockRootHash32,proto3" json:"shard_block_root_hash32,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CrosslinkRecord) Reset()         { *m = CrosslinkRecord{} }
func (m *CrosslinkRecord) String() string { return proto.CompactTextString(m) }
func (*CrosslinkRecord) ProtoMessage()    {}
func (*CrosslinkRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_c60944b3f0e8dec2, []int{8}
}
func (m *CrosslinkRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrosslinkRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrosslinkRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CrosslinkRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrosslinkRecord.Merge(dst, src)
}
func (m *CrosslinkRecord) XXX_Size() int {
	return m.Size()
}
func (m *CrosslinkRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_CrosslinkRecord.DiscardUnknown(m)
}

var xxx_messageInfo_CrosslinkRecord proto.InternalMessageInfo

func (m *CrosslinkRecord) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *CrosslinkRecord) GetShardBlockRootHash32() []byte {
	if m != nil {
		return m.ShardBlockRootHash32
	}
	return nil
}

type BeaconBlock struct {
	Slot                 uint64           `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	ParentRootHash32     []byte           `protobuf:"bytes,2,opt,name=parent_root_hash32,json=parentRootHash32,proto3" json:"parent_root_hash32,omitempty"`
	StateRootHash32      []byte           `protobuf:"bytes,3,opt,name=state_root_hash32,json=stateRootHash32,proto3" json:"state_root_hash32,omitempty"`
	RandaoRevealHash32   []byte           `protobuf:"bytes,4,opt,name=randao_reveal_hash32,json=randaoRevealHash32,proto3" json:"randao_reveal_hash32,omitempty"`
	Eth1Data             *Eth1Data        `protobuf:"bytes,5,opt,name=eth1_data,json=eth1Data,proto3" json:"eth1_data,omitempty"`
	Signature            [][]byte         `protobuf:"bytes,6,rep,name=signature,proto3" json:"signature,omitempty"`
	Body                 *BeaconBlockBody `protobuf:"bytes,7,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BeaconBlock) Reset()         { *m = BeaconBlock{} }
func (m *BeaconBlock) String() string { return proto.CompactTextString(m) }
func (*BeaconBlock) ProtoMessage()    {}
func (*BeaconBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_c60944b3f0e8dec2, []int{9}
}
func (m *BeaconBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeaconBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeaconBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BeaconBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconBlock.Merge(dst, src)
}
func (m *BeaconBlock) XXX_Size() int {
	return m.Size()
}
func (m *BeaconBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconBlock.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconBlock proto.InternalMessageInfo

func (m *BeaconBlock) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *BeaconBlock) GetParentRootHash32() []byte {
	if m != nil {
		return m.ParentRootHash32
	}
	return nil
}

func (m *BeaconBlock) GetStateRootHash32() []byte {
	if m != nil {
		return m.StateRootHash32
	}
	return nil
}

func (m *BeaconBlock) GetRandaoRevealHash32() []byte {
	if m != nil {
		return m.RandaoRevealHash32
	}
	return nil
}

func (m *BeaconBlock) GetEth1Data() *Eth1Data {
	if m != nil {
		return m.Eth1Data
	}
	return nil
}

func (m *BeaconBlock) GetSignature() [][]byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *BeaconBlock) GetBody() *BeaconBlockBody {
	if m != nil {
		return m.Body
	}
	return nil
}

type BeaconBlockBody struct {
	Attestations         []*Attestation      `protobuf:"bytes,1,rep,name=attestations,proto3" json:"attestations,omitempty"`
	ProposerSlashings    []*ProposerSlashing `protobuf:"bytes,2,rep,name=proposer_slashings,json=proposerSlashings,proto3" json:"proposer_slashings,omitempty"`
	AttesterSlashings    []*AttesterSlashing `protobuf:"bytes,3,rep,name=attester_slashings,json=attesterSlashings,proto3" json:"attester_slashings,omitempty"`
	Deposits             []*Deposit          `protobuf:"bytes,4,rep,name=deposits,proto3" json:"deposits,omitempty"`
	Exits                []*Exit             `protobuf:"bytes,5,rep,name=exits,proto3" json:"exits,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *BeaconBlockBody) Reset()         { *m = BeaconBlockBody{} }
func (m *BeaconBlockBody) String() string { return proto.CompactTextString(m) }
func (*BeaconBlockBody) ProtoMessage()    {}
func (*BeaconBlockBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_c60944b3f0e8dec2, []int{10}
}
func (m *BeaconBlockBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeaconBlockBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeaconBlockBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BeaconBlockBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconBlockBody.Merge(dst, src)
}
func (m *BeaconBlockBody) XXX_Size() int {
	return m.Size()
}
func (m *BeaconBlockBody) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconBlockBody.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconBlockBody proto.InternalMessageInfo

func (m *BeaconBlockBody) GetAttestations() []*Attestation {
	if m != nil {
		return m.Attestations
	}
	return nil
}

func (m *BeaconBlockBody) GetProposerSlashings() []*ProposerSlashing {
	if m != nil {
		return m.ProposerSlashings
	}
	return nil
}

func (m *BeaconBlockBody) GetAttesterSlashings() []*AttesterSlashing {
	if m != nil {
		return m.AttesterSlashings
	}
	return nil
}

func (m *BeaconBlockBody) GetDeposits() []*Deposit {
	if m != nil {
		return m.Deposits
	}
	return nil
}

func (m *BeaconBlockBody) GetExits() []*Exit {
	if m != nil {
		return m.Exits
	}
	return nil
}

type DepositInput struct {
	Pubkey                      []byte   `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	ProofOfPossession           []byte   `protobuf:"bytes,2,opt,name=proof_of_possession,json=proofOfPossession,proto3" json:"proof_of_possession,omitempty"`
	WithdrawalCredentialsHash32 []byte   `protobuf:"bytes,3,opt,name=withdrawal_credentials_hash32,json=withdrawalCredentialsHash32,proto3" json:"withdrawal_credentials_hash32,omitempty"`
	RandaoCommitmentHash32      []byte   `protobuf:"bytes,4,opt,name=randao_commitment_hash32,json=randaoCommitmentHash32,proto3" json:"randao_commitment_hash32,omitempty"`
	CustodyCommitmentHash32     []byte   `protobuf:"bytes,5,opt,name=custody_commitment_hash32,json=custodyCommitmentHash32,proto3" json:"custody_commitment_hash32,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *DepositInput) Reset()         { *m = DepositInput{} }
func (m *DepositInput) String() string { return proto.CompactTextString(m) }
func (*DepositInput) ProtoMessage()    {}
func (*DepositInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_c60944b3f0e8dec2, []int{11}
}
func (m *DepositInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DepositInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositInput.Merge(dst, src)
}
func (m *DepositInput) XXX_Size() int {
	return m.Size()
}
func (m *DepositInput) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositInput.DiscardUnknown(m)
}

var xxx_messageInfo_DepositInput proto.InternalMessageInfo

func (m *DepositInput) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *DepositInput) GetProofOfPossession() []byte {
	if m != nil {
		return m.ProofOfPossession
	}
	return nil
}

func (m *DepositInput) GetWithdrawalCredentialsHash32() []byte {
	if m != nil {
		return m.WithdrawalCredentialsHash32
	}
	return nil
}

func (m *DepositInput) GetRandaoCommitmentHash32() []byte {
	if m != nil {
		return m.RandaoCommitmentHash32
	}
	return nil
}

func (m *DepositInput) GetCustodyCommitmentHash32() []byte {
	if m != nil {
		return m.CustodyCommitmentHash32
	}
	return nil
}

type ProposalSignedData struct {
	Slot                 uint64   `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	Shard                uint64   `protobuf:"varint,2,opt,name=shard,proto3" json:"shard,omitempty"`
	BlockRootHash32      []byte   `protobuf:"bytes,3,opt,name=block_root_hash32,json=blockRootHash32,proto3" json:"block_root_hash32,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProposalSignedData) Reset()         { *m = ProposalSignedData{} }
func (m *ProposalSignedData) String() string { return proto.CompactTextString(m) }
func (*ProposalSignedData) ProtoMessage()    {}
func (*ProposalSignedData) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_c60944b3f0e8dec2, []int{12}
}
func (m *ProposalSignedData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalSignedData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalSignedData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ProposalSignedData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalSignedData.Merge(dst, src)
}
func (m *ProposalSignedData) XXX_Size() int {
	return m.Size()
}
func (m *ProposalSignedData) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalSignedData.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalSignedData proto.InternalMessageInfo

func (m *ProposalSignedData) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *ProposalSignedData) GetShard() uint64 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *ProposalSignedData) GetBlockRootHash32() []byte {
	if m != nil {
		return m.BlockRootHash32
	}
	return nil
}

type SlashableVote struct {
	ValidatorIndices     []uint64         `protobuf:"varint,1,rep,packed,name=validator_indices,json=validatorIndices,proto3" json:"validator_indices,omitempty"`
	CustodyBitfield      []byte           `protobuf:"bytes,2,opt,name=custody_bitfield,json=custodyBitfield,proto3" json:"custody_bitfield,omitempty"`
	Data                 *AttestationData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	AggregateSignature   []byte           `protobuf:"bytes,4,opt,name=aggregate_signature,json=aggregateSignature,proto3" json:"aggregate_signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SlashableVote) Reset()         { *m = SlashableVote{} }
func (m *SlashableVote) String() string { return proto.CompactTextString(m) }
func (*SlashableVote) ProtoMessage()    {}
func (*SlashableVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_c60944b3f0e8dec2, []int{13}
}
func (m *SlashableVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlashableVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlashableVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SlashableVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlashableVote.Merge(dst, src)
}
func (m *SlashableVote) XXX_Size() int {
	return m.Size()
}
func (m *SlashableVote) XXX_DiscardUnknown() {
	xxx_messageInfo_SlashableVote.DiscardUnknown(m)
}

var xxx_messageInfo_SlashableVote proto.InternalMessageInfo

func (m *SlashableVote) GetValidatorIndices() []uint64 {
	if m != nil {
		return m.ValidatorIndices
	}
	return nil
}

func (m *SlashableVote) GetCustodyBitfield() []byte {
	if m != nil {
		return m.CustodyBitfield
	}
	return nil
}

func (m *SlashableVote) GetData() *AttestationData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SlashableVote) GetAggregateSignature() []byte {
	if m != nil {
		return m.AggregateSignature
	}
	return nil
}

type DepositData struct {
	DepositInput         *DepositInput `protobuf:"bytes,1,opt,name=deposit_input,json=depositInput,proto3" json:"deposit_input,omitempty"`
	Amount               uint64        `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Timestamp            uint64        `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DepositData) Reset()         { *m = DepositData{} }
func (m *DepositData) String() string { return proto.CompactTextString(m) }
func (*DepositData) ProtoMessage()    {}
func (*DepositData) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_c60944b3f0e8dec2, []int{14}
}
func (m *DepositData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DepositData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositData.Merge(dst, src)
}
func (m *DepositData) XXX_Size() int {
	return m.Size()
}
func (m *DepositData) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositData.DiscardUnknown(m)
}

var xxx_messageInfo_DepositData proto.InternalMessageInfo

func (m *DepositData) GetDepositInput() *DepositInput {
	if m != nil {
		return m.DepositInput
	}
	return nil
}

func (m *DepositData) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *DepositData) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type ProposerSlashing struct {
	ProposerIndex        uint64              `protobuf:"varint,1,opt,name=proposer_index,json=proposerIndex,proto3" json:"proposer_index,omitempty"`
	ProposalData_1       *ProposalSignedData `protobuf:"bytes,2,opt,name=proposal_data_1,json=proposalData1,proto3" json:"proposal_data_1,omitempty"`
	ProposalSignature_1  []byte              `protobuf:"bytes,3,opt,name=proposal_signature_1,json=proposalSignature1,proto3" json:"proposal_signature_1,omitempty"`
	ProposalData_2       *ProposalSignedData `protobuf:"bytes,4,opt,name=proposal_data_2,json=proposalData2,proto3" json:"proposal_data_2,omitempty"`
	ProposalSignature_2  []byte              `protobuf:"bytes,5,opt,name=proposal_signature_2,json=proposalSignature2,proto3" json:"proposal_signature_2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ProposerSlashing) Reset()         { *m = ProposerSlashing{} }
func (m *ProposerSlashing) String() string { return proto.CompactTextString(m) }
func (*ProposerSlashing) ProtoMessage()    {}
func (*ProposerSlashing) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_c60944b3f0e8dec2, []int{15}
}
func (m *ProposerSlashing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposerSlashing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposerSlashing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ProposerSlashing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposerSlashing.Merge(dst, src)
}
func (m *ProposerSlashing) XXX_Size() int {
	return m.Size()
}
func (m *ProposerSlashing) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposerSlashing.DiscardUnknown(m)
}

var xxx_messageInfo_ProposerSlashing proto.InternalMessageInfo

func (m *ProposerSlashing) GetProposerIndex() uint64 {
	if m != nil {
		return m.ProposerIndex
	}
	return 0
}

func (m *ProposerSlashing) GetProposalData_1() *ProposalSignedData {
	if m != nil {
		return m.ProposalData_1
	}
	return nil
}

func (m *ProposerSlashing) GetProposalSignature_1() []byte {
	if m != nil {
		return m.ProposalSignature_1
	}
	return nil
}

func (m *ProposerSlashing) GetProposalData_2() *ProposalSignedData {
	if m != nil {
		return m.ProposalData_2
	}
	return nil
}

func (m *ProposerSlashing) GetProposalSignature_2() []byte {
	if m != nil {
		return m.ProposalSignature_2
	}
	return nil
}

type AttesterSlashing struct {
	SlashableVote_1      *SlashableVote `protobuf:"bytes,1,opt,name=slashable_vote_1,json=slashableVote1,proto3" json:"slashable_vote_1,omitempty"`
	SlashableVote_2      *SlashableVote `protobuf:"bytes,2,opt,name=slashable_vote_2,json=slashableVote2,proto3" json:"slashable_vote_2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AttesterSlashing) Reset()         { *m = AttesterSlashing{} }
func (m *AttesterSlashing) String() string { return proto.CompactTextString(m) }
func (*AttesterSlashing) ProtoMessage()    {}
func (*AttesterSlashing) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_c60944b3f0e8dec2, []int{16}
}
func (m *AttesterSlashing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttesterSlashing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttesterSlashing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AttesterSlashing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttesterSlashing.Merge(dst, src)
}
func (m *AttesterSlashing) XXX_Size() int {
	return m.Size()
}
func (m *AttesterSlashing) XXX_DiscardUnknown() {
	xxx_messageInfo_AttesterSlashing.DiscardUnknown(m)
}

var xxx_messageInfo_AttesterSlashing proto.InternalMessageInfo

func (m *AttesterSlashing) GetSlashableVote_1() *SlashableVote {
	if m != nil {
		return m.SlashableVote_1
	}
	return nil
}

func (m *AttesterSlashing) GetSlashableVote_2() *SlashableVote {
	if m != nil {
		return m.SlashableVote_2
	}
	return nil
}

type Deposit struct {
	MerkleBranchHash32S  [][]byte `protobuf:"bytes,1,rep,name=merkle_branch_hash32s,json=merkleBranchHash32s,proto3" json:"merkle_branch_hash32s,omitempty"`
	MerkleTreeIndex      uint64   `protobuf:"varint,2,opt,name=merkle_tree_index,json=merkleTreeIndex,proto3" json:"merkle_tree_index,omitempty"`
	DepositData          []byte   `protobuf:"bytes,3,opt,name=deposit_data,json=depositData,proto3" json:"deposit_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Deposit) Reset()         { *m = Deposit{} }
func (m *Deposit) String() string { return proto.CompactTextString(m) }
func (*Deposit) ProtoMessage()    {}
func (*Deposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_c60944b3f0e8dec2, []int{17}
}
func (m *Deposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Deposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Deposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Deposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deposit.Merge(dst, src)
}
func (m *Deposit) XXX_Size() int {
	return m.Size()
}
func (m *Deposit) XXX_DiscardUnknown() {
	xxx_messageInfo_Deposit.DiscardUnknown(m)
}

var xxx_messageInfo_Deposit proto.InternalMessageInfo

func (m *Deposit) GetMerkleBranchHash32S() [][]byte {
	if m != nil {
		return m.MerkleBranchHash32S
	}
	return nil
}

func (m *Deposit) GetMerkleTreeIndex() uint64 {
	if m != nil {
		return m.MerkleTreeIndex
	}
	return 0
}

func (m *Deposit) GetDepositData() []byte {
	if m != nil {
		return m.DepositData
	}
	return nil
}

type Exit struct {
	Slot                 uint64   `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	ValidatorIndex       uint64   `protobuf:"varint,2,opt,name=validator_index,json=validatorIndex,proto3" json:"validator_index,omitempty"`
	Signature            []byte   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Exit) Reset()         { *m = Exit{} }
func (m *Exit) String() string { return proto.CompactTextString(m) }
func (*Exit) ProtoMessage()    {}
func (*Exit) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_c60944b3f0e8dec2, []int{18}
}
func (m *Exit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Exit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Exit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Exit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Exit.Merge(dst, src)
}
func (m *Exit) XXX_Size() int {
	return m.Size()
}
func (m *Exit) XXX_DiscardUnknown() {
	xxx_messageInfo_Exit.DiscardUnknown(m)
}

var xxx_messageInfo_Exit proto.InternalMessageInfo

func (m *Exit) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *Exit) GetValidatorIndex() uint64 {
	if m != nil {
		return m.ValidatorIndex
	}
	return 0
}

func (m *Exit) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ValidatorRegistryDeltaBlock struct {
	LatestRegistryDeltaRootHash32 []byte                                                  `protobuf:"bytes,1,opt,name=latest_registry_delta_root_hash32,json=latestRegistryDeltaRootHash32,proto3" json:"latest_registry_delta_root_hash32,omitempty"`
	ValidatorIndex                uint64                                                  `protobuf:"varint,2,opt,name=validator_index,json=validatorIndex,proto3" json:"validator_index,omitempty"`
	Pubkey                        []byte                                                  `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Slot                          uint64                                                  `protobuf:"varint,4,opt,name=slot,proto3" json:"slot,omitempty"`
	Flag                          ValidatorRegistryDeltaBlock_ValidatorRegistryDeltaFlags `protobuf:"varint,5,opt,name=flag,proto3,enum=ethereum.beacon.p2p.v1.ValidatorRegistryDeltaBlock_ValidatorRegistryDeltaFlags" json:"flag,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}                                                `json:"-"`
	XXX_unrecognized              []byte                                                  `json:"-"`
	XXX_sizecache                 int32                                                   `json:"-"`
}

func (m *ValidatorRegistryDeltaBlock) Reset()         { *m = ValidatorRegistryDeltaBlock{} }
func (m *ValidatorRegistryDeltaBlock) String() string { return proto.CompactTextString(m) }
func (*ValidatorRegistryDeltaBlock) ProtoMessage()    {}
func (*ValidatorRegistryDeltaBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_c60944b3f0e8dec2, []int{19}
}
func (m *ValidatorRegistryDeltaBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorRegistryDeltaBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorRegistryDeltaBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ValidatorRegistryDeltaBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorRegistryDeltaBlock.Merge(dst, src)
}
func (m *ValidatorRegistryDeltaBlock) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorRegistryDeltaBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorRegistryDeltaBlock.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorRegistryDeltaBlock proto.InternalMessageInfo

func (m *ValidatorRegistryDeltaBlock) GetLatestRegistryDeltaRootHash32() []byte {
	if m != nil {
		return m.LatestRegistryDeltaRootHash32
	}
	return nil
}

func (m *ValidatorRegistryDeltaBlock) GetValidatorIndex() uint64 {
	if m != nil {
		return m.ValidatorIndex
	}
	return 0
}

func (m *ValidatorRegistryDeltaBlock) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *ValidatorRegistryDeltaBlock) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *ValidatorRegistryDeltaBlock) GetFlag() ValidatorRegistryDeltaBlock_ValidatorRegistryDeltaFlags {
	if m != nil {
		return m.Flag
	}
	return ValidatorRegistryDeltaBlock_ACTIVATION
}

type Eth1Data struct {
	DepositRootHash32    []byte   `protobuf:"bytes,1,opt,name=deposit_root_hash32,json=depositRootHash32,proto3" json:"deposit_root_hash32,omitempty"`
	BlockHash32          []byte   `protobuf:"bytes,2,opt,name=block_hash32,json=blockHash32,proto3" json:"block_hash32,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Eth1Data) Reset()         { *m = Eth1Data{} }
func (m *Eth1Data) String() string { return proto.CompactTextString(m) }
func (*Eth1Data) ProtoMessage()    {}
func (*Eth1Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_c60944b3f0e8dec2, []int{20}
}
func (m *Eth1Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Eth1Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Eth1Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Eth1Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Eth1Data.Merge(dst, src)
}
func (m *Eth1Data) XXX_Size() int {
	return m.Size()
}
func (m *Eth1Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Eth1Data.DiscardUnknown(m)
}

var xxx_messageInfo_Eth1Data proto.InternalMessageInfo

func (m *Eth1Data) GetDepositRootHash32() []byte {
	if m != nil {
		return m.DepositRootHash32
	}
	return nil
}

func (m *Eth1Data) GetBlockHash32() []byte {
	if m != nil {
		return m.BlockHash32
	}
	return nil
}

type Eth1DataVote struct {
	Eth1Data             *Eth1Data `protobuf:"bytes,1,opt,name=eth1_data,json=eth1Data,proto3" json:"eth1_data,omitempty"`
	VoteCount            uint64    `protobuf:"varint,2,opt,name=vote_count,json=voteCount,proto3" json:"vote_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Eth1DataVote) Reset()         { *m = Eth1DataVote{} }
func (m *Eth1DataVote) String() string { return proto.CompactTextString(m) }
func (*Eth1DataVote) ProtoMessage()    {}
func (*Eth1DataVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_c60944b3f0e8dec2, []int{21}
}
func (m *Eth1DataVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Eth1DataVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Eth1DataVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Eth1DataVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Eth1DataVote.Merge(dst, src)
}
func (m *Eth1DataVote) XXX_Size() int {
	return m.Size()
}
func (m *Eth1DataVote) XXX_DiscardUnknown() {
	xxx_messageInfo_Eth1DataVote.DiscardUnknown(m)
}

var xxx_messageInfo_Eth1DataVote proto.InternalMessageInfo

func (m *Eth1DataVote) GetEth1Data() *Eth1Data {
	if m != nil {
		return m.Eth1Data
	}
	return nil
}

func (m *Eth1DataVote) GetVoteCount() uint64 {
	if m != nil {
		return m.VoteCount
	}
	return 0
}

func init() {
	proto.RegisterType((*BeaconState)(nil), "ethereum.beacon.p2p.v1.BeaconState")
	proto.RegisterType((*Fork)(nil), "ethereum.beacon.p2p.v1.Fork")
	proto.RegisterType((*PendingAttestationRecord)(nil), "ethereum.beacon.p2p.v1.PendingAttestationRecord")
	proto.RegisterType((*Attestation)(nil), "ethereum.beacon.p2p.v1.Attestation")
	proto.RegisterType((*AttestationData)(nil), "ethereum.beacon.p2p.v1.AttestationData")
	proto.RegisterType((*AttestationDataAndCustodyBit)(nil), "ethereum.beacon.p2p.v1.AttestationDataAndCustodyBit")
	proto.RegisterType((*ValidatorRecord)(nil), "ethereum.beacon.p2p.v1.ValidatorRecord")
	proto.RegisterType((*ShardReassignmentRecord)(nil), "ethereum.beacon.p2p.v1.ShardReassignmentRecord")
	proto.RegisterType((*CrosslinkRecord)(nil), "ethereum.beacon.p2p.v1.CrosslinkRecord")
	proto.RegisterType((*BeaconBlock)(nil), "ethereum.beacon.p2p.v1.BeaconBlock")
	proto.RegisterType((*BeaconBlockBody)(nil), "ethereum.beacon.p2p.v1.BeaconBlockBody")
	proto.RegisterType((*DepositInput)(nil), "ethereum.beacon.p2p.v1.DepositInput")
	proto.RegisterType((*ProposalSignedData)(nil), "ethereum.beacon.p2p.v1.ProposalSignedData")
	proto.RegisterType((*SlashableVote)(nil), "ethereum.beacon.p2p.v1.SlashableVote")
	proto.RegisterType((*DepositData)(nil), "ethereum.beacon.p2p.v1.DepositData")
	proto.RegisterType((*ProposerSlashing)(nil), "ethereum.beacon.p2p.v1.ProposerSlashing")
	proto.RegisterType((*AttesterSlashing)(nil), "ethereum.beacon.p2p.v1.AttesterSlashing")
	proto.RegisterType((*Deposit)(nil), "ethereum.beacon.p2p.v1.Deposit")
	proto.RegisterType((*Exit)(nil), "ethereum.beacon.p2p.v1.Exit")
	proto.RegisterType((*ValidatorRegistryDeltaBlock)(nil), "ethereum.beacon.p2p.v1.ValidatorRegistryDeltaBlock")
	proto.RegisterType((*Eth1Data)(nil), "ethereum.beacon.p2p.v1.Eth1Data")
	proto.RegisterType((*Eth1DataVote)(nil), "ethereum.beacon.p2p.v1.Eth1DataVote")
	proto.RegisterEnum("ethereum.beacon.p2p.v1.ValidatorRecord_StatusFlags", ValidatorRecord_StatusFlags_name, ValidatorRecord_StatusFlags_value)
	proto.RegisterEnum("ethereum.beacon.p2p.v1.ValidatorRegistryDeltaBlock_ValidatorRegistryDeltaFlags", ValidatorRegistryDeltaBlock_ValidatorRegistryDeltaFlags_name, ValidatorRegistryDeltaBlock_ValidatorRegistryDeltaFlags_value)
}
func (m *BeaconState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeaconState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ValidatorRegistry) > 0 {
		for _, msg := range m.ValidatorRegistry {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ValidatorRegistryUpdateSlot != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ValidatorRegistryUpdateSlot))
	}
	if len(m.ValidatorRegistryDeltaChainTipHash32) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ValidatorRegistryDeltaChainTipHash32)))
		i += copy(dAtA[i:], m.ValidatorRegistryDeltaChainTipHash32)
	}
	if len(m.ValidatorBalances) > 0 {
		dAtA2 := make([]byte, len(m.ValidatorBalances)*10)
		var j1 int
		for _, num := range m.ValidatorBalances {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.LatestRandaoMixesHash32S) > 0 {
		for _, b := range m.LatestRandaoMixesHash32S {
			dAtA[i] = 0xe2
			i++
			dAtA[i] = 0x3e
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.PreviousEpochStartShard != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PreviousEpochStartShard))
	}
	if m.CurrentEpochStartShard != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CurrentEpochStartShard))
	}
	if m.PreviousEpochCalculationSlot != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PreviousEpochCalculationSlot))
	}
	if m.CurrentEpochCalculationSlot != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x3f
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CurrentEpochCalculationSlot))
	}
	if len(m.PreviousEpochSeedHash32) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x3f
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PreviousEpochSeedHash32)))
		i += copy(dAtA[i:], m.PreviousEpochSeedHash32)
	}
	if len(m.CurrentEpochSeedHash32) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x3f
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CurrentEpochSeedHash32)))
		i += copy(dAtA[i:], m.CurrentEpochSeedHash32)
	}
	if m.PreviousJustifiedSlot != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x7d
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PreviousJustifiedSlot))
	}
	if m.JustifiedSlot != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x7d
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JustifiedSlot))
	}
	if m.JustificationBitfield != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x7d
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JustificationBitfield))
	}
	if m.FinalizedSlot != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x7d
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.FinalizedSlot))
	}
	if len(m.LatestCrosslinks) > 0 {
		for _, msg := range m.LatestCrosslinks {
			dAtA[i] = 0xca
			i++
			dAtA[i] = 0xbb
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.LatestBlockRootHash32S) > 0 {
		for _, b := range m.LatestBlockRootHash32S {
			dAtA[i] = 0xda
			i++
			dAtA[i] = 0xbb
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.BatchedBlockRootHash32S) > 0 {
		for _, b := range m.BatchedBlockRootHash32S {
			dAtA[i] = 0xe2
			i++
			dAtA[i] = 0xbb
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.LatestPenalizedBalances) > 0 {
		dAtA4 := make([]byte, len(m.LatestPenalizedBalances)*10)
		var j3 int
		for _, num := range m.LatestPenalizedBalances {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0xbb
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if len(m.LatestAttestations) > 0 {
		for _, msg := range m.LatestAttestations {
			dAtA[i] = 0xf2
			i++
			dAtA[i] = 0xbb
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.LatestIndexRootHash32S) > 0 {
		for _, b := range m.LatestIndexRootHash32S {
			dAtA[i] = 0xfa
			i++
			dAtA[i] = 0xbb
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.LatestEth1Data != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LatestEth1Data.Size()))
		n5, err := m.LatestEth1Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Eth1DataVotes) > 0 {
		for _, msg := range m.Eth1DataVotes {
			dAtA[i] = 0x92
			i++
			dAtA[i] = 0xfa
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.GenesisTime != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.GenesisTime))
	}
	if m.Fork != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Fork.Size()))
		n6, err := m.Fork.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Slot != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Slot))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Fork) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fork) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PreviousVersion != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PreviousVersion))
	}
	if m.CurrentVersion != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CurrentVersion))
	}
	if m.Slot != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Slot))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PendingAttestationRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingAttestationRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Data.Size()))
		n7, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.ParticipationBitfield) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ParticipationBitfield)))
		i += copy(dAtA[i:], m.ParticipationBitfield)
	}
	if len(m.CustodyBitfield) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CustodyBitfield)))
		i += copy(dAtA[i:], m.CustodyBitfield)
	}
	if m.SlotIncluded != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SlotIncluded))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Attestation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attestation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Data.Size()))
		n8, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.ParticipationBitfield) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ParticipationBitfield)))
		i += copy(dAtA[i:], m.ParticipationBitfield)
	}
	if len(m.CustodyBitfield) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CustodyBitfield)))
		i += copy(dAtA[i:], m.CustodyBitfield)
	}
	if len(m.AggregateSignature) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AggregateSignature)))
		i += copy(dAtA[i:], m.AggregateSignature)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AttestationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttestationData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slot != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Slot))
	}
	if m.Shard != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Shard))
	}
	if len(m.BeaconBlockRootHash32) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BeaconBlockRootHash32)))
		i += copy(dAtA[i:], m.BeaconBlockRootHash32)
	}
	if len(m.EpochBoundaryRootHash32) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.EpochBoundaryRootHash32)))
		i += copy(dAtA[i:], m.EpochBoundaryRootHash32)
	}
	if len(m.ShardBlockRootHash32) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ShardBlockRootHash32)))
		i += copy(dAtA[i:], m.ShardBlockRootHash32)
	}
	if len(m.LatestCrosslinkRootHash32) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LatestCrosslinkRootHash32)))
		i += copy(dAtA[i:], m.LatestCrosslinkRootHash32)
	}
	if m.JustifiedSlot != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.JustifiedSlot))
	}
	if len(m.JustifiedBlockRootHash32) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.JustifiedBlockRootHash32)))
		i += copy(dAtA[i:], m.JustifiedBlockRootHash32)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AttestationDataAndCustodyBit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttestationDataAndCustodyBit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Data.Size()))
		n9, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.CustodyBit {
		dAtA[i] = 0x10
		i++
		if m.CustodyBit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ValidatorRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pubkey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Pubkey)))
		i += copy(dAtA[i:], m.Pubkey)
	}
	if len(m.WithdrawalCredentialsHash32) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.WithdrawalCredentialsHash32)))
		i += copy(dAtA[i:], m.WithdrawalCredentialsHash32)
	}
	if len(m.RandaoCommitmentHash32) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RandaoCommitmentHash32)))
		i += copy(dAtA[i:], m.RandaoCommitmentHash32)
	}
	if m.RandaoLayers != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RandaoLayers))
	}
	if m.ActivationEpoch != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ActivationEpoch))
	}
	if m.ExitEpoch != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ExitEpoch))
	}
	if m.WithdrawalEpoch != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.WithdrawalEpoch))
	}
	if m.PenalizedEpoch != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PenalizedEpoch))
	}
	if m.StatusFlags != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.StatusFlags))
	}
	if m.Balance != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Balance))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShardReassignmentRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardReassignmentRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ValidatorIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ValidatorIndex))
	}
	if m.Shard != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Shard))
	}
	if m.Slot != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Slot))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CrosslinkRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrosslinkRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slot != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Slot))
	}
	if len(m.ShardBlockRootHash32) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ShardBlockRootHash32)))
		i += copy(dAtA[i:], m.ShardBlockRootHash32)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BeaconBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeaconBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slot != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Slot))
	}
	if len(m.ParentRootHash32) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ParentRootHash32)))
		i += copy(dAtA[i:], m.ParentRootHash32)
	}
	if len(m.StateRootHash32) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.StateRootHash32)))
		i += copy(dAtA[i:], m.StateRootHash32)
	}
	if len(m.RandaoRevealHash32) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RandaoRevealHash32)))
		i += copy(dAtA[i:], m.RandaoRevealHash32)
	}
	if m.Eth1Data != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Eth1Data.Size()))
		n10, err := m.Eth1Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if len(m.Signature) > 0 {
		for _, b := range m.Signature {
			dAtA[i] = 0x32
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Body != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Body.Size()))
		n11, err := m.Body.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BeaconBlockBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeaconBlockBody) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Attestations) > 0 {
		for _, msg := range m.Attestations {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ProposerSlashings) > 0 {
		for _, msg := range m.ProposerSlashings {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AttesterSlashings) > 0 {
		for _, msg := range m.AttesterSlashings {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Deposits) > 0 {
		for _, msg := range m.Deposits {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Exits) > 0 {
		for _, msg := range m.Exits {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DepositInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositInput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pubkey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Pubkey)))
		i += copy(dAtA[i:], m.Pubkey)
	}
	if len(m.ProofOfPossession) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ProofOfPossession)))
		i += copy(dAtA[i:], m.ProofOfPossession)
	}
	if len(m.WithdrawalCredentialsHash32) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.WithdrawalCredentialsHash32)))
		i += copy(dAtA[i:], m.WithdrawalCredentialsHash32)
	}
	if len(m.RandaoCommitmentHash32) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RandaoCommitmentHash32)))
		i += copy(dAtA[i:], m.RandaoCommitmentHash32)
	}
	if len(m.CustodyCommitmentHash32) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CustodyCommitmentHash32)))
		i += copy(dAtA[i:], m.CustodyCommitmentHash32)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProposalSignedData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalSignedData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slot != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Slot))
	}
	if m.Shard != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Shard))
	}
	if len(m.BlockRootHash32) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BlockRootHash32)))
		i += copy(dAtA[i:], m.BlockRootHash32)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SlashableVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlashableVote) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ValidatorIndices) > 0 {
		dAtA13 := make([]byte, len(m.ValidatorIndices)*10)
		var j12 int
		for _, num := range m.ValidatorIndices {
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(j12))
		i += copy(dAtA[i:], dAtA13[:j12])
	}
	if len(m.CustodyBitfield) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CustodyBitfield)))
		i += copy(dAtA[i:], m.CustodyBitfield)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Data.Size()))
		n14, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if len(m.AggregateSignature) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AggregateSignature)))
		i += copy(dAtA[i:], m.AggregateSignature)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DepositData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DepositInput != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.DepositInput.Size()))
		n15, err := m.DepositInput.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.Amount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Amount))
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Timestamp))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProposerSlashing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposerSlashing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProposerIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ProposerIndex))
	}
	if m.ProposalData_1 != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ProposalData_1.Size()))
		n16, err := m.ProposalData_1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if len(m.ProposalSignature_1) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ProposalSignature_1)))
		i += copy(dAtA[i:], m.ProposalSignature_1)
	}
	if m.ProposalData_2 != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ProposalData_2.Size()))
		n17, err := m.ProposalData_2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if len(m.ProposalSignature_2) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ProposalSignature_2)))
		i += copy(dAtA[i:], m.ProposalSignature_2)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AttesterSlashing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttesterSlashing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SlashableVote_1 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SlashableVote_1.Size()))
		n18, err := m.SlashableVote_1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.SlashableVote_2 != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.SlashableVote_2.Size()))
		n19, err := m.SlashableVote_2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Deposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Deposit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MerkleBranchHash32S) > 0 {
		for _, b := range m.MerkleBranchHash32S {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.MerkleTreeIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MerkleTreeIndex))
	}
	if len(m.DepositData) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DepositData)))
		i += copy(dAtA[i:], m.DepositData)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Exit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Exit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slot != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Slot))
	}
	if m.ValidatorIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ValidatorIndex))
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ValidatorRegistryDeltaBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorRegistryDeltaBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LatestRegistryDeltaRootHash32) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LatestRegistryDeltaRootHash32)))
		i += copy(dAtA[i:], m.LatestRegistryDeltaRootHash32)
	}
	if m.ValidatorIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ValidatorIndex))
	}
	if len(m.Pubkey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Pubkey)))
		i += copy(dAtA[i:], m.Pubkey)
	}
	if m.Slot != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Slot))
	}
	if m.Flag != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Flag))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Eth1Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Eth1Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DepositRootHash32) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DepositRootHash32)))
		i += copy(dAtA[i:], m.DepositRootHash32)
	}
	if len(m.BlockHash32) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BlockHash32)))
		i += copy(dAtA[i:], m.BlockHash32)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Eth1DataVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Eth1DataVote) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Eth1Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Eth1Data.Size()))
		n20, err := m.Eth1Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.VoteCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VoteCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BeaconState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidatorRegistry) > 0 {
		for _, e := range m.ValidatorRegistry {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ValidatorRegistryUpdateSlot != 0 {
		n += 1 + sovTypes(uint64(m.ValidatorRegistryUpdateSlot))
	}
	l = len(m.ValidatorRegistryDeltaChainTipHash32)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.ValidatorBalances) > 0 {
		l = 0
		for _, e := range m.ValidatorBalances {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.LatestRandaoMixesHash32S) > 0 {
		for _, b := range m.LatestRandaoMixesHash32S {
			l = len(b)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.PreviousEpochStartShard != 0 {
		n += 2 + sovTypes(uint64(m.PreviousEpochStartShard))
	}
	if m.CurrentEpochStartShard != 0 {
		n += 2 + sovTypes(uint64(m.CurrentEpochStartShard))
	}
	if m.PreviousEpochCalculationSlot != 0 {
		n += 2 + sovTypes(uint64(m.PreviousEpochCalculationSlot))
	}
	if m.CurrentEpochCalculationSlot != 0 {
		n += 2 + sovTypes(uint64(m.CurrentEpochCalculationSlot))
	}
	l = len(m.PreviousEpochSeedHash32)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.CurrentEpochSeedHash32)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.PreviousJustifiedSlot != 0 {
		n += 2 + sovTypes(uint64(m.PreviousJustifiedSlot))
	}
	if m.JustifiedSlot != 0 {
		n += 2 + sovTypes(uint64(m.JustifiedSlot))
	}
	if m.JustificationBitfield != 0 {
		n += 2 + sovTypes(uint64(m.JustificationBitfield))
	}
	if m.FinalizedSlot != 0 {
		n += 2 + sovTypes(uint64(m.FinalizedSlot))
	}
	if len(m.LatestCrosslinks) > 0 {
		for _, e := range m.LatestCrosslinks {
			l = e.Size()
			n += 3 + l + sovTypes(uint64(l))
		}
	}
	if len(m.LatestBlockRootHash32S) > 0 {
		for _, b := range m.LatestBlockRootHash32S {
			l = len(b)
			n += 3 + l + sovTypes(uint64(l))
		}
	}
	if len(m.BatchedBlockRootHash32S) > 0 {
		for _, b := range m.BatchedBlockRootHash32S {
			l = len(b)
			n += 3 + l + sovTypes(uint64(l))
		}
	}
	if len(m.LatestPenalizedBalances) > 0 {
		l = 0
		for _, e := range m.LatestPenalizedBalances {
			l += sovTypes(uint64(e))
		}
		n += 3 + sovTypes(uint64(l)) + l
	}
	if len(m.LatestAttestations) > 0 {
		for _, e := range m.LatestAttestations {
			l = e.Size()
			n += 3 + l + sovTypes(uint64(l))
		}
	}
	if len(m.LatestIndexRootHash32S) > 0 {
		for _, b := range m.LatestIndexRootHash32S {
			l = len(b)
			n += 3 + l + sovTypes(uint64(l))
		}
	}
	if m.LatestEth1Data != nil {
		l = m.LatestEth1Data.Size()
		n += 3 + l + sovTypes(uint64(l))
	}
	if len(m.Eth1DataVotes) > 0 {
		for _, e := range m.Eth1DataVotes {
			l = e.Size()
			n += 3 + l + sovTypes(uint64(l))
		}
	}
	if m.GenesisTime != 0 {
		n += 3 + sovTypes(uint64(m.GenesisTime))
	}
	if m.Fork != nil {
		l = m.Fork.Size()
		n += 3 + l + sovTypes(uint64(l))
	}
	if m.Slot != 0 {
		n += 3 + sovTypes(uint64(m.Slot))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Fork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PreviousVersion != 0 {
		n += 1 + sovTypes(uint64(m.PreviousVersion))
	}
	if m.CurrentVersion != 0 {
		n += 1 + sovTypes(uint64(m.CurrentVersion))
	}
	if m.Slot != 0 {
		n += 1 + sovTypes(uint64(m.Slot))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PendingAttestationRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ParticipationBitfield)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.CustodyBitfield)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SlotIncluded != 0 {
		n += 1 + sovTypes(uint64(m.SlotIncluded))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Attestation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ParticipationBitfield)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.CustodyBitfield)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AggregateSignature)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttestationData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovTypes(uint64(m.Slot))
	}
	if m.Shard != 0 {
		n += 1 + sovTypes(uint64(m.Shard))
	}
	l = len(m.BeaconBlockRootHash32)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.EpochBoundaryRootHash32)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ShardBlockRootHash32)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.LatestCrosslinkRootHash32)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.JustifiedSlot != 0 {
		n += 1 + sovTypes(uint64(m.JustifiedSlot))
	}
	l = len(m.JustifiedBlockRootHash32)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttestationDataAndCustodyBit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CustodyBit {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidatorRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.WithdrawalCredentialsHash32)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.RandaoCommitmentHash32)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RandaoLayers != 0 {
		n += 1 + sovTypes(uint64(m.RandaoLayers))
	}
	if m.ActivationEpoch != 0 {
		n += 1 + sovTypes(uint64(m.ActivationEpoch))
	}
	if m.ExitEpoch != 0 {
		n += 1 + sovTypes(uint64(m.ExitEpoch))
	}
	if m.WithdrawalEpoch != 0 {
		n += 1 + sovTypes(uint64(m.WithdrawalEpoch))
	}
	if m.PenalizedEpoch != 0 {
		n += 1 + sovTypes(uint64(m.PenalizedEpoch))
	}
	if m.StatusFlags != 0 {
		n += 1 + sovTypes(uint64(m.StatusFlags))
	}
	if m.Balance != 0 {
		n += 2 + sovTypes(uint64(m.Balance))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardReassignmentRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidatorIndex != 0 {
		n += 1 + sovTypes(uint64(m.ValidatorIndex))
	}
	if m.Shard != 0 {
		n += 1 + sovTypes(uint64(m.Shard))
	}
	if m.Slot != 0 {
		n += 1 + sovTypes(uint64(m.Slot))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CrosslinkRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovTypes(uint64(m.Slot))
	}
	l = len(m.ShardBlockRootHash32)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BeaconBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovTypes(uint64(m.Slot))
	}
	l = len(m.ParentRootHash32)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.StateRootHash32)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.RandaoRevealHash32)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Eth1Data != nil {
		l = m.Eth1Data.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Signature) > 0 {
		for _, b := range m.Signature {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BeaconBlockBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attestations) > 0 {
		for _, e := range m.Attestations {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ProposerSlashings) > 0 {
		for _, e := range m.ProposerSlashings {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.AttesterSlashings) > 0 {
		for _, e := range m.AttesterSlashings {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Deposits) > 0 {
		for _, e := range m.Deposits {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Exits) > 0 {
		for _, e := range m.Exits {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DepositInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ProofOfPossession)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.WithdrawalCredentialsHash32)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.RandaoCommitmentHash32)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.CustodyCommitmentHash32)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProposalSignedData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovTypes(uint64(m.Slot))
	}
	if m.Shard != 0 {
		n += 1 + sovTypes(uint64(m.Shard))
	}
	l = len(m.BlockRootHash32)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SlashableVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidatorIndices) > 0 {
		l = 0
		for _, e := range m.ValidatorIndices {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	l = len(m.CustodyBitfield)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AggregateSignature)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DepositData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DepositInput != nil {
		l = m.DepositInput.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTypes(uint64(m.Amount))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTypes(uint64(m.Timestamp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProposerSlashing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposerIndex != 0 {
		n += 1 + sovTypes(uint64(m.ProposerIndex))
	}
	if m.ProposalData_1 != nil {
		l = m.ProposalData_1.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ProposalSignature_1)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ProposalData_2 != nil {
		l = m.ProposalData_2.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ProposalSignature_2)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttesterSlashing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlashableVote_1 != nil {
		l = m.SlashableVote_1.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SlashableVote_2 != nil {
		l = m.SlashableVote_2.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Deposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MerkleBranchHash32S) > 0 {
		for _, b := range m.MerkleBranchHash32S {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.MerkleTreeIndex != 0 {
		n += 1 + sovTypes(uint64(m.MerkleTreeIndex))
	}
	l = len(m.DepositData)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Exit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovTypes(uint64(m.Slot))
	}
	if m.ValidatorIndex != 0 {
		n += 1 + sovTypes(uint64(m.ValidatorIndex))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidatorRegistryDeltaBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LatestRegistryDeltaRootHash32)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ValidatorIndex != 0 {
		n += 1 + sovTypes(uint64(m.ValidatorIndex))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Slot != 0 {
		n += 1 + sovTypes(uint64(m.Slot))
	}
	if m.Flag != 0 {
		n += 1 + sovTypes(uint64(m.Flag))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Eth1Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepositRootHash32)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.BlockHash32)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Eth1DataVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Eth1Data != nil {
		l = m.Eth1Data.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VoteCount != 0 {
		n += 1 + sovTypes(uint64(m.VoteCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BeaconState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeaconState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeaconState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorRegistry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorRegistry = append(m.ValidatorRegistry, &ValidatorRecord{})
			if err := m.ValidatorRegistry[len(m.ValidatorRegistry)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorRegistryUpdateSlot", wireType)
			}
			m.ValidatorRegistryUpdateSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorRegistryUpdateSlot |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorRegistryDeltaChainTipHash32", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorRegistryDeltaChainTipHash32 = append(m.ValidatorRegistryDeltaChainTipHash32[:0], dAtA[iNdEx:postIndex]...)
			if m.ValidatorRegistryDeltaChainTipHash32 == nil {
				m.ValidatorRegistryDeltaChainTipHash32 = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ValidatorBalances = append(m.ValidatorBalances, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ValidatorBalances) == 0 {
					m.ValidatorBalances = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ValidatorBalances = append(m.ValidatorBalances, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorBalances", wireType)
			}
		case 1004:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestRandaoMixesHash32S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestRandaoMixesHash32S = append(m.LatestRandaoMixesHash32S, make([]byte, postIndex-iNdEx))
			copy(m.LatestRandaoMixesHash32S[len(m.LatestRandaoMixesHash32S)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1005:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousEpochStartShard", wireType)
			}
			m.PreviousEpochStartShard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousEpochStartShard |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1006:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpochStartShard", wireType)
			}
			m.CurrentEpochStartShard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentEpochStartShard |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1007:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousEpochCalculationSlot", wireType)
			}
			m.PreviousEpochCalculationSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousEpochCalculationSlot |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1008:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpochCalculationSlot", wireType)
			}
			m.CurrentEpochCalculationSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentEpochCalculationSlot |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1009:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousEpochSeedHash32", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousEpochSeedHash32 = append(m.PreviousEpochSeedHash32[:0], dAtA[iNdEx:postIndex]...)
			if m.PreviousEpochSeedHash32 == nil {
				m.PreviousEpochSeedHash32 = []byte{}
			}
			iNdEx = postIndex
		case 1010:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpochSeedHash32", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentEpochSeedHash32 = append(m.CurrentEpochSeedHash32[:0], dAtA[iNdEx:postIndex]...)
			if m.CurrentEpochSeedHash32 == nil {
				m.CurrentEpochSeedHash32 = []byte{}
			}
			iNdEx = postIndex
		case 2001:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousJustifiedSlot", wireType)
			}
			m.PreviousJustifiedSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousJustifiedSlot |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2002:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JustifiedSlot", wireType)
			}
			m.JustifiedSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JustifiedSlot |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2003:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JustificationBitfield", wireType)
			}
			m.JustificationBitfield = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JustificationBitfield |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2004:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedSlot", wireType)
			}
			m.FinalizedSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalizedSlot |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestCrosslinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestCrosslinks = append(m.LatestCrosslinks, &CrosslinkRecord{})
			if err := m.LatestCrosslinks[len(m.LatestCrosslinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3003:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlockRootHash32S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestBlockRootHash32S = append(m.LatestBlockRootHash32S, make([]byte, postIndex-iNdEx))
			copy(m.LatestBlockRootHash32S[len(m.LatestBlockRootHash32S)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3004:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchedBlockRootHash32S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchedBlockRootHash32S = append(m.BatchedBlockRootHash32S, make([]byte, postIndex-iNdEx))
			copy(m.BatchedBlockRootHash32S[len(m.BatchedBlockRootHash32S)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3005:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LatestPenalizedBalances = append(m.LatestPenalizedBalances, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LatestPenalizedBalances) == 0 {
					m.LatestPenalizedBalances = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LatestPenalizedBalances = append(m.LatestPenalizedBalances, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestPenalizedBalances", wireType)
			}
		case 3006:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestAttestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestAttestations = append(m.LatestAttestations, &PendingAttestationRecord{})
			if err := m.LatestAttestations[len(m.LatestAttestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3007:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestIndexRootHash32S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestIndexRootHash32S = append(m.LatestIndexRootHash32S, make([]byte, postIndex-iNdEx))
			copy(m.LatestIndexRootHash32S[len(m.LatestIndexRootHash32S)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestEth1Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestEth1Data == nil {
				m.LatestEth1Data = &Eth1Data{}
			}
			if err := m.LatestEth1Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eth1DataVotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Eth1DataVotes = append(m.Eth1DataVotes, &Eth1DataVote{})
			if err := m.Eth1DataVotes[len(m.Eth1DataVotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5001:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisTime", wireType)
			}
			m.GenesisTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GenesisTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fork == nil {
				m.Fork = &Fork{}
			}
			if err := m.Fork.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5003:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fork) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fork: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fork: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousVersion", wireType)
			}
			m.PreviousVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousVersion |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentVersion", wireType)
			}
			m.CurrentVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentVersion |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingAttestationRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingAttestationRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingAttestationRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &AttestationData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipationBitfield", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipationBitfield = append(m.ParticipationBitfield[:0], dAtA[iNdEx:postIndex]...)
			if m.ParticipationBitfield == nil {
				m.ParticipationBitfield = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustodyBitfield", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustodyBitfield = append(m.CustodyBitfield[:0], dAtA[iNdEx:postIndex]...)
			if m.CustodyBitfield == nil {
				m.CustodyBitfield = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotIncluded", wireType)
			}
			m.SlotIncluded = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotIncluded |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attestation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attestation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attestation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &AttestationData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipationBitfield", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipationBitfield = append(m.ParticipationBitfield[:0], dAtA[iNdEx:postIndex]...)
			if m.ParticipationBitfield == nil {
				m.ParticipationBitfield = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustodyBitfield", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustodyBitfield = append(m.CustodyBitfield[:0], dAtA[iNdEx:postIndex]...)
			if m.CustodyBitfield == nil {
				m.CustodyBitfield = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregateSignature = append(m.AggregateSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.AggregateSignature == nil {
				m.AggregateSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttestationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttestationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttestationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			m.Shard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shard |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconBlockRootHash32", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeaconBlockRootHash32 = append(m.BeaconBlockRootHash32[:0], dAtA[iNdEx:postIndex]...)
			if m.BeaconBlockRootHash32 == nil {
				m.BeaconBlockRootHash32 = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochBoundaryRootHash32", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochBoundaryRootHash32 = append(m.EpochBoundaryRootHash32[:0], dAtA[iNdEx:postIndex]...)
			if m.EpochBoundaryRootHash32 == nil {
				m.EpochBoundaryRootHash32 = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardBlockRootHash32", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardBlockRootHash32 = append(m.ShardBlockRootHash32[:0], dAtA[iNdEx:postIndex]...)
			if m.ShardBlockRootHash32 == nil {
				m.ShardBlockRootHash32 = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestCrosslinkRootHash32", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestCrosslinkRootHash32 = append(m.LatestCrosslinkRootHash32[:0], dAtA[iNdEx:postIndex]...)
			if m.LatestCrosslinkRootHash32 == nil {
				m.LatestCrosslinkRootHash32 = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JustifiedSlot", wireType)
			}
			m.JustifiedSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JustifiedSlot |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JustifiedBlockRootHash32", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JustifiedBlockRootHash32 = append(m.JustifiedBlockRootHash32[:0], dAtA[iNdEx:postIndex]...)
			if m.JustifiedBlockRootHash32 == nil {
				m.JustifiedBlockRootHash32 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttestationDataAndCustodyBit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttestationDataAndCustodyBit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttestationDataAndCustodyBit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &AttestationData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustodyBit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CustodyBit = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = append(m.Pubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Pubkey == nil {
				m.Pubkey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalCredentialsHash32", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawalCredentialsHash32 = append(m.WithdrawalCredentialsHash32[:0], dAtA[iNdEx:postIndex]...)
			if m.WithdrawalCredentialsHash32 == nil {
				m.WithdrawalCredentialsHash32 = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandaoCommitmentHash32", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandaoCommitmentHash32 = append(m.RandaoCommitmentHash32[:0], dAtA[iNdEx:postIndex]...)
			if m.RandaoCommitmentHash32 == nil {
				m.RandaoCommitmentHash32 = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandaoLayers", wireType)
			}
			m.RandaoLayers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandaoLayers |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationEpoch", wireType)
			}
			m.ActivationEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivationEpoch |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitEpoch", wireType)
			}
			m.ExitEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExitEpoch |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalEpoch", wireType)
			}
			m.WithdrawalEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawalEpoch |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PenalizedEpoch", wireType)
			}
			m.PenalizedEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PenalizedEpoch |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusFlags", wireType)
			}
			m.StatusFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusFlags |= (ValidatorRecord_StatusFlags(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1000:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardReassignmentRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardReassignmentRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardReassignmentRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorIndex", wireType)
			}
			m.ValidatorIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			m.Shard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shard |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrosslinkRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrosslinkRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrosslinkRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardBlockRootHash32", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardBlockRootHash32 = append(m.ShardBlockRootHash32[:0], dAtA[iNdEx:postIndex]...)
			if m.ShardBlockRootHash32 == nil {
				m.ShardBlockRootHash32 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeaconBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeaconBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeaconBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentRootHash32", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentRootHash32 = append(m.ParentRootHash32[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentRootHash32 == nil {
				m.ParentRootHash32 = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRootHash32", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRootHash32 = append(m.StateRootHash32[:0], dAtA[iNdEx:postIndex]...)
			if m.StateRootHash32 == nil {
				m.StateRootHash32 = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandaoRevealHash32", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandaoRevealHash32 = append(m.RandaoRevealHash32[:0], dAtA[iNdEx:postIndex]...)
			if m.RandaoRevealHash32 == nil {
				m.RandaoRevealHash32 = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eth1Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Eth1Data == nil {
				m.Eth1Data = &Eth1Data{}
			}
			if err := m.Eth1Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature, make([]byte, postIndex-iNdEx))
			copy(m.Signature[len(m.Signature)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &BeaconBlockBody{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeaconBlockBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeaconBlockBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeaconBlockBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestations = append(m.Attestations, &Attestation{})
			if err := m.Attestations[len(m.Attestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerSlashings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposerSlashings = append(m.ProposerSlashings, &ProposerSlashing{})
			if err := m.ProposerSlashings[len(m.ProposerSlashings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttesterSlashings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttesterSlashings = append(m.AttesterSlashings, &AttesterSlashing{})
			if err := m.AttesterSlashings[len(m.AttesterSlashings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposits = append(m.Deposits, &Deposit{})
			if err := m.Deposits[len(m.Deposits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exits = append(m.Exits, &Exit{})
			if err := m.Exits[len(m.Exits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = append(m.Pubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Pubkey == nil {
				m.Pubkey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofOfPossession", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofOfPossession = append(m.ProofOfPossession[:0], dAtA[iNdEx:postIndex]...)
			if m.ProofOfPossession == nil {
				m.ProofOfPossession = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalCredentialsHash32", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawalCredentialsHash32 = append(m.WithdrawalCredentialsHash32[:0], dAtA[iNdEx:postIndex]...)
			if m.WithdrawalCredentialsHash32 == nil {
				m.WithdrawalCredentialsHash32 = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandaoCommitmentHash32", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandaoCommitmentHash32 = append(m.RandaoCommitmentHash32[:0], dAtA[iNdEx:postIndex]...)
			if m.RandaoCommitmentHash32 == nil {
				m.RandaoCommitmentHash32 = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustodyCommitmentHash32", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustodyCommitmentHash32 = append(m.CustodyCommitmentHash32[:0], dAtA[iNdEx:postIndex]...)
			if m.CustodyCommitmentHash32 == nil {
				m.CustodyCommitmentHash32 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalSignedData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalSignedData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalSignedData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			m.Shard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shard |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockRootHash32", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockRootHash32 = append(m.BlockRootHash32[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockRootHash32 == nil {
				m.BlockRootHash32 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlashableVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlashableVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlashableVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ValidatorIndices = append(m.ValidatorIndices, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ValidatorIndices) == 0 {
					m.ValidatorIndices = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ValidatorIndices = append(m.ValidatorIndices, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorIndices", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustodyBitfield", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustodyBitfield = append(m.CustodyBitfield[:0], dAtA[iNdEx:postIndex]...)
			if m.CustodyBitfield == nil {
				m.CustodyBitfield = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &AttestationData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregateSignature = append(m.AggregateSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.AggregateSignature == nil {
				m.AggregateSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositInput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DepositInput == nil {
				m.DepositInput = &DepositInput{}
			}
			if err := m.DepositInput.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposerSlashing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposerSlashing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposerSlashing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerIndex", wireType)
			}
			m.ProposerIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposerIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalData_1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProposalData_1 == nil {
				m.ProposalData_1 = &ProposalSignedData{}
			}
			if err := m.ProposalData_1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalSignature_1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalSignature_1 = append(m.ProposalSignature_1[:0], dAtA[iNdEx:postIndex]...)
			if m.ProposalSignature_1 == nil {
				m.ProposalSignature_1 = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalData_2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProposalData_2 == nil {
				m.ProposalData_2 = &ProposalSignedData{}
			}
			if err := m.ProposalData_2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalSignature_2", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalSignature_2 = append(m.ProposalSignature_2[:0], dAtA[iNdEx:postIndex]...)
			if m.ProposalSignature_2 == nil {
				m.ProposalSignature_2 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttesterSlashing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttesterSlashing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttesterSlashing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashableVote_1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SlashableVote_1 == nil {
				m.SlashableVote_1 = &SlashableVote{}
			}
			if err := m.SlashableVote_1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashableVote_2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SlashableVote_2 == nil {
				m.SlashableVote_2 = &SlashableVote{}
			}
			if err := m.SlashableVote_2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Deposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleBranchHash32S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerkleBranchHash32S = append(m.MerkleBranchHash32S, make([]byte, postIndex-iNdEx))
			copy(m.MerkleBranchHash32S[len(m.MerkleBranchHash32S)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleTreeIndex", wireType)
			}
			m.MerkleTreeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MerkleTreeIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositData = append(m.DepositData[:0], dAtA[iNdEx:postIndex]...)
			if m.DepositData == nil {
				m.DepositData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Exit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Exit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Exit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorIndex", wireType)
			}
			m.ValidatorIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorRegistryDeltaBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorRegistryDeltaBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorRegistryDeltaBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestRegistryDeltaRootHash32", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestRegistryDeltaRootHash32 = append(m.LatestRegistryDeltaRootHash32[:0], dAtA[iNdEx:postIndex]...)
			if m.LatestRegistryDeltaRootHash32 == nil {
				m.LatestRegistryDeltaRootHash32 = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorIndex", wireType)
			}
			m.ValidatorIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = append(m.Pubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Pubkey == nil {
				m.Pubkey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (ValidatorRegistryDeltaBlock_ValidatorRegistryDeltaFlags(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Eth1Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Eth1Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Eth1Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositRootHash32", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositRootHash32 = append(m.DepositRootHash32[:0], dAtA[iNdEx:postIndex]...)
			if m.DepositRootHash32 == nil {
				m.DepositRootHash32 = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash32", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash32 = append(m.BlockHash32[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash32 == nil {
				m.BlockHash32 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Eth1DataVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Eth1DataVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Eth1DataVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eth1Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Eth1Data == nil {
				m.Eth1Data = &Eth1Data{}
			}
			if err := m.Eth1Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteCount", wireType)
			}
			m.VoteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("proto/beacon/p2p/v1/types.proto", fileDescriptor_types_c60944b3f0e8dec2)
}

var fileDescriptor_types_c60944b3f0e8dec2 = []byte{
	// 2142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0x5b, 0x73, 0x1b, 0x49,
	0x15, 0xde, 0x91, 0x94, 0xd8, 0x39, 0x92, 0x2d, 0xb9, 0x9d, 0x58, 0xb3, 0x71, 0x12, 0x3b, 0x93,
	0x2c, 0x76, 0x02, 0xd8, 0x2b, 0xa5, 0x96, 0x50, 0x84, 0x05, 0x2c, 0xdb, 0x21, 0x82, 0xec, 0x26,
	0x35, 0xf6, 0x3a, 0x3c, 0x40, 0x4d, 0xb5, 0x66, 0xda, 0xd2, 0xc4, 0xa3, 0x99, 0xa9, 0xe9, 0x96,
	0x37, 0xa6, 0xf8, 0x03, 0x5c, 0x0a, 0xf8, 0x0b, 0xc0, 0x5f, 0xe0, 0x85, 0xe2, 0xf6, 0x44, 0xc1,
	0x23, 0xd7, 0x17, 0xaa, 0xa0, 0xa8, 0x3c, 0x51, 0xc5, 0x9d, 0x77, 0xaa, 0xa8, 0xbe, 0xcc, 0x55,
	0x92, 0xe3, 0x6c, 0x5e, 0xf6, 0x49, 0x35, 0xe7, 0x7c, 0xe7, 0x74, 0xf7, 0x39, 0xa7, 0xcf, 0xf9,
	0x66, 0x04, 0x2b, 0x61, 0x14, 0xb0, 0x60, 0xb3, 0x47, 0xb0, 0x1d, 0xf8, 0x9b, 0x61, 0x3b, 0xdc,
	0x3c, 0x6e, 0x6d, 0xb2, 0x93, 0x90, 0xd0, 0x0d, 0xa1, 0x41, 0x4b, 0x84, 0x0d, 0x48, 0x44, 0x46,
	0xc3, 0x0d, 0x89, 0xd9, 0x08, 0xdb, 0xe1, 0xc6, 0x71, 0xeb, 0xf2, 0xb2, 0x34, 0xb4, 0x83, 0xe1,
	0x30, 0xf0, 0x37, 0x87, 0x84, 0x52, 0xdc, 0x8f, 0x8d, 0x8c, 0xbf, 0xd5, 0xa0, 0xda, 0x11, 0xf0,
	0x3d, 0x86, 0x19, 0x41, 0x07, 0x80, 0x8e, 0xb1, 0xe7, 0x3a, 0x98, 0x05, 0x91, 0x15, 0x91, 0xbe,
	0x4b, 0x59, 0x74, 0xa2, 0x6b, 0xab, 0xe5, 0xf5, 0x6a, 0x7b, 0x6d, 0x63, 0xf2, 0x0a, 0x1b, 0x07,
	0xb1, 0x85, 0x49, 0xec, 0x20, 0x72, 0xcc, 0x85, 0xe3, 0x54, 0x20, 0x3d, 0xa0, 0x6d, 0xb8, 0x36,
	0xee, 0xd7, 0x1a, 0x85, 0x0e, 0x66, 0xc4, 0xa2, 0x5e, 0xc0, 0xf4, 0xd2, 0xaa, 0xb6, 0x5e, 0x31,
	0x97, 0xc7, 0x4c, 0xdf, 0x13, 0x98, 0x3d, 0x2f, 0x60, 0xe8, 0x09, 0xdc, 0x9a, 0xe0, 0xc4, 0x21,
	0x1e, 0xc3, 0x96, 0x3d, 0xc0, 0xae, 0x6f, 0x31, 0x37, 0xb4, 0x06, 0x98, 0x0e, 0xee, 0xb4, 0xf5,
	0xf2, 0xaa, 0xb6, 0x5e, 0x33, 0x6f, 0x8e, 0xf9, 0xdb, 0xe1, 0xf0, 0x6d, 0x8e, 0xde, 0x77, 0xc3,
	0x07, 0x02, 0x8b, 0x3e, 0x9e, 0x3d, 0x75, 0x0f, 0x7b, 0xd8, 0xb7, 0x09, 0xd5, 0x2b, 0xab, 0xe5,
	0xf5, 0x4a, 0xe6, 0x30, 0x1d, 0xa5, 0x40, 0x9f, 0x81, 0x65, 0x0f, 0x33, 0x42, 0x99, 0x15, 0x61,
	0xdf, 0xc1, 0x81, 0x35, 0x74, 0x9f, 0x11, 0xaa, 0x16, 0xa6, 0xfa, 0xdf, 0x67, 0x56, 0xcb, 0xeb,
	0x35, 0x53, 0x97, 0x18, 0x53, 0x40, 0xde, 0xe1, 0x08, 0xb9, 0x1a, 0x45, 0x9f, 0x86, 0xcb, 0x61,
	0x44, 0x8e, 0xdd, 0x60, 0x44, 0x2d, 0x12, 0x06, 0xf6, 0xc0, 0xa2, 0x0c, 0x47, 0xcc, 0xa2, 0x03,
	0x1c, 0x39, 0xfa, 0x3f, 0x66, 0x44, 0x24, 0x9a, 0x31, 0x64, 0x97, 0x23, 0xf6, 0x38, 0x60, 0x8f,
	0xeb, 0xd1, 0xa7, 0xe0, 0x75, 0x7b, 0x14, 0x45, 0xc4, 0x67, 0x13, 0x8c, 0xff, 0x29, 0x8d, 0x97,
	0x14, 0xa2, 0x68, 0x7b, 0x9f, 0x97, 0x51, 0x6e, 0x65, 0x1b, 0x7b, 0xf6, 0xc8, 0xc3, 0xcc, 0x0d,
	0x7c, 0x99, 0x87, 0x7f, 0x49, 0x0f, 0x57, 0x72, 0xcb, 0x6f, 0xa7, 0x28, 0x91, 0x89, 0x1d, 0xb8,
	0x96, 0xdf, 0xc3, 0x98, 0x9b, 0x7f, 0x4b, 0x37, 0xcb, 0xd9, 0x8d, 0x14, 0xbd, 0x4c, 0x88, 0x03,
	0x21, 0x4e, 0x9c, 0xc0, 0xff, 0xcc, 0x88, 0x0c, 0x16, 0xe2, 0x40, 0x88, 0xa3, 0x92, 0x36, 0x1e,
	0x87, 0x8c, 0xf1, 0x7f, 0xa5, 0x71, 0x3e, 0x0e, 0xa9, 0xed, 0x5d, 0x48, 0xdc, 0x5a, 0x4f, 0x47,
	0x94, 0xb9, 0x87, 0x2e, 0x71, 0xe4, 0xc6, 0x7f, 0x53, 0x17, 0x1b, 0xbf, 0x14, 0xeb, 0xbf, 0x10,
	0xab, 0xc5, 0x96, 0x3f, 0x02, 0xf3, 0x05, 0xfc, 0x6f, 0x25, 0x7e, 0xee, 0x69, 0x0e, 0xf7, 0x09,
	0x58, 0x52, 0x02, 0x5b, 0x06, 0xa5, 0xe7, 0xb2, 0x43, 0x97, 0x78, 0x8e, 0xfe, 0x3b, 0xe5, 0x3f,
	0xa7, 0xee, 0x28, 0x2d, 0xf7, 0x7f, 0xe8, 0xfa, 0xd8, 0x73, 0xbf, 0x1a, 0xfb, 0xff, 0xbd, 0xf2,
	0x9f, 0x88, 0x85, 0xff, 0xf7, 0x60, 0x41, 0x95, 0xa0, 0x1d, 0x05, 0x94, 0x7a, 0xae, 0x7f, 0x44,
	0xf5, 0x1f, 0x35, 0x4f, 0xbf, 0xa7, 0xdb, 0x31, 0x54, 0xdd, 0xd3, 0x86, 0x74, 0x91, 0x88, 0x29,
	0x8f, 0xa9, 0x72, 0xdb, 0xf3, 0x02, 0xfb, 0xc8, 0x8a, 0x82, 0x80, 0x25, 0x75, 0xfd, 0xe3, 0xa6,
	0xa8, 0xeb, 0x25, 0x89, 0xe8, 0x70, 0x80, 0x19, 0x04, 0x2c, 0x53, 0xd5, 0x3d, 0xcc, 0xec, 0x01,
	0x71, 0x26, 0x19, 0xff, 0x44, 0x1a, 0x37, 0x15, 0x64, 0xcc, 0xfa, 0x5e, 0xb2, 0x72, 0x48, 0xe2,
	0xf3, 0x27, 0x37, 0xf1, 0xa7, 0x4d, 0x71, 0x15, 0x9b, 0x12, 0xf1, 0x38, 0x06, 0x24, 0x17, 0xb2,
	0x07, 0x8b, 0xca, 0x18, 0x33, 0xfe, 0x23, 0x62, 0x4a, 0xf5, 0x9f, 0xc9, 0x78, 0xbc, 0x39, 0x2d,
	0x1e, 0x8f, 0x89, 0xef, 0xb8, 0x7e, 0x7f, 0x2b, 0xb5, 0x51, 0x81, 0x41, 0xd2, 0x5b, 0x46, 0x91,
	0x0d, 0x8d, 0xeb, 0x3b, 0xe4, 0x59, 0xfe, 0x74, 0x3f, 0xcf, 0x85, 0xa6, 0xcb, 0x01, 0xd9, 0xc3,
	0x7d, 0x11, 0x54, 0xa8, 0x2d, 0xc2, 0x06, 0x2d, 0xcb, 0xc1, 0x0c, 0xeb, 0xdf, 0x5b, 0x59, 0xd5,
	0xd6, 0xab, 0xed, 0xd5, 0x69, 0x9b, 0xdb, 0x65, 0x83, 0xd6, 0x0e, 0x66, 0xd8, 0x9c, 0x97, 0xa6,
	0xf1, 0x33, 0x7a, 0x07, 0xea, 0x89, 0x17, 0xeb, 0x38, 0x60, 0x84, 0xea, 0xdf, 0x5f, 0x11, 0x07,
	0xbd, 0xf9, 0x22, 0x5f, 0x07, 0x01, 0x23, 0xe6, 0x1c, 0xc9, 0x3c, 0x51, 0x64, 0x40, 0xad, 0x4f,
	0x7c, 0x42, 0x5d, 0x6a, 0x31, 0x77, 0x48, 0xf4, 0xaf, 0xaf, 0x89, 0x7a, 0xab, 0x2a, 0xe1, 0xbe,
	0x3b, 0x24, 0xa8, 0x05, 0x95, 0xc3, 0x20, 0x3a, 0xd2, 0xbf, 0xb1, 0x26, 0xf6, 0x7c, 0x65, 0xda,
	0x3a, 0xf7, 0x83, 0xe8, 0xc8, 0x14, 0x50, 0xb4, 0x08, 0x15, 0x51, 0xbe, 0xdf, 0x94, 0xee, 0xc4,
	0x83, 0xe1, 0x43, 0x85, 0x43, 0xd0, 0x2d, 0x68, 0x24, 0xd7, 0xef, 0x98, 0x44, 0xd4, 0x0d, 0x7c,
	0x5d, 0x13, 0xb8, 0x7a, 0x2c, 0x3f, 0x90, 0x62, 0xb4, 0x06, 0xf5, 0xf8, 0x96, 0xc7, 0x48, 0x39,
	0x29, 0xe6, 0x95, 0x38, 0x06, 0x22, 0xb5, 0x60, 0x39, 0xb3, 0xde, 0x9f, 0x35, 0xd0, 0xa7, 0x25,
	0x19, 0xdd, 0x83, 0x8a, 0x48, 0x84, 0x26, 0xce, 0x34, 0xf5, 0xd2, 0x64, 0x0c, 0x45, 0x3a, 0x84,
	0x11, 0x7a, 0x0b, 0x96, 0x42, 0x1c, 0x31, 0xd7, 0x76, 0xc3, 0xc2, 0xfd, 0x2e, 0x89, 0xc6, 0x73,
	0x29, 0xa7, 0x4d, 0xae, 0xf7, 0x2d, 0x68, 0xd8, 0x23, 0xca, 0x02, 0xe7, 0x24, 0x35, 0x90, 0x83,
	0xaa, 0xae, 0xe4, 0x09, 0xf4, 0x06, 0xcc, 0xf1, 0x33, 0x58, 0xae, 0x6f, 0x7b, 0x23, 0x87, 0x38,
	0x7a, 0x45, 0x1c, 0xac, 0xc6, 0x85, 0x5d, 0x25, 0x33, 0xfe, 0xa4, 0x41, 0x35, 0xb3, 0xc1, 0x0f,
	0xfb, 0x99, 0x36, 0x61, 0x11, 0xf7, 0xfb, 0x11, 0xe9, 0x8b, 0xa9, 0xef, 0xf6, 0x7d, 0xcc, 0x46,
	0x11, 0x11, 0x27, 0xab, 0x99, 0x28, 0x51, 0xed, 0xc5, 0x1a, 0xe3, 0x3b, 0x65, 0xa8, 0x17, 0x36,
	0x9b, 0x24, 0x5a, 0x4b, 0x13, 0x8d, 0x2e, 0xc2, 0x39, 0x39, 0xff, 0x64, 0x6d, 0xc8, 0x07, 0x74,
	0x17, 0x74, 0x79, 0xee, 0xf1, 0x86, 0xa4, 0x76, 0x78, 0x49, 0xea, 0x0b, 0xdd, 0x08, 0xdd, 0x83,
	0xcb, 0x72, 0xa4, 0xf4, 0x82, 0x91, 0xef, 0xe0, 0xe8, 0x24, 0x67, 0x2a, 0xb7, 0xdb, 0x14, 0x88,
	0x8e, 0x02, 0x64, 0x8c, 0xdf, 0x82, 0xa6, 0x58, 0x7e, 0xc2, 0xa2, 0xe7, 0x84, 0xe5, 0x45, 0xa1,
	0x2e, 0xae, 0xf9, 0x59, 0xb8, 0x52, 0xec, 0xe8, 0x39, 0xdb, 0xf3, 0xc2, 0xf6, 0xf5, 0x42, 0xcb,
	0xce, 0x38, 0x78, 0x63, 0x6c, 0x34, 0xcd, 0x4c, 0x9a, 0x4c, 0x6f, 0xc3, 0x72, 0x0a, 0x1b, 0xdf,
	0xe2, 0xac, 0x58, 0x46, 0x4f, 0x20, 0x85, 0x6d, 0x1a, 0x5f, 0x83, 0x2b, 0x85, 0x84, 0x6c, 0xf9,
	0xce, 0x76, 0x92, 0xe7, 0x57, 0xab, 0xc0, 0x15, 0xa8, 0x66, 0x4a, 0x49, 0x24, 0x73, 0xd6, 0x84,
	0xb4, 0x8a, 0x8c, 0x1f, 0x54, 0xa0, 0x5e, 0x60, 0x9b, 0x68, 0x09, 0xce, 0x87, 0xa3, 0xde, 0x11,
	0x39, 0x11, 0x6b, 0xd6, 0x4c, 0xf5, 0x84, 0x3a, 0x70, 0xf5, 0x7d, 0x97, 0x0d, 0x9c, 0x08, 0xbf,
	0x8f, 0x3d, 0xcb, 0x8e, 0x88, 0x43, 0x7c, 0xe6, 0x62, 0x2f, 0x26, 0x6a, 0xaa, 0xaa, 0x97, 0x53,
	0xd0, 0x76, 0x8a, 0x51, 0x31, 0xfd, 0x24, 0xe8, 0x8a, 0xe2, 0x71, 0xfa, 0xec, 0xb2, 0x21, 0xef,
	0x43, 0xb9, 0x0a, 0x5a, 0x92, 0xfa, 0xed, 0x44, 0xad, 0x2c, 0x6f, 0xc0, 0x9c, 0xb2, 0xf4, 0xf0,
	0x09, 0x89, 0x68, 0x7c, 0x7d, 0xa5, 0xf0, 0xa1, 0x90, 0xf1, 0xab, 0x83, 0x6d, 0xe6, 0x1e, 0xcb,
	0xeb, 0x26, 0x0a, 0x4a, 0xd4, 0x48, 0xc5, 0xac, 0xa7, 0x72, 0xc1, 0x5d, 0xd0, 0x55, 0x00, 0xf2,
	0xcc, 0x55, 0x54, 0x47, 0x14, 0x43, 0xc5, 0xbc, 0xc0, 0x25, 0x52, 0x7d, 0x0b, 0x1a, 0x99, 0xc3,
	0x4a, 0x90, 0x4c, 0x7f, 0x3d, 0x95, 0x4b, 0xe8, 0x1a, 0xd4, 0xd3, 0x11, 0x2b, 0x91, 0xb3, 0xb2,
	0xa3, 0x26, 0x62, 0x09, 0x3c, 0x80, 0x1a, 0x4f, 0xd1, 0x88, 0x5a, 0x87, 0x1e, 0xee, 0x53, 0x1d,
	0x56, 0xb5, 0xf5, 0xf9, 0xf6, 0x9d, 0x33, 0xbe, 0x05, 0x6c, 0xec, 0x09, 0xdb, 0xfb, 0xdc, 0xd4,
	0xac, 0xd2, 0xf4, 0x01, 0x5d, 0x85, 0x19, 0x35, 0xd9, 0xf5, 0xbf, 0x8a, 0x3d, 0x76, 0x4a, 0xba,
	0x66, 0xc6, 0x32, 0xe3, 0x73, 0x50, 0xcd, 0x98, 0xa2, 0x2a, 0xcc, 0x74, 0xdf, 0xed, 0xee, 0x77,
	0xb7, 0x1e, 0x36, 0x5e, 0x43, 0x08, 0xe6, 0xe5, 0xc3, 0xfe, 0xee, 0x8e, 0xb5, 0xfb, 0xa5, 0xee,
	0x7e, 0x43, 0x43, 0x0d, 0xa8, 0x3d, 0xe9, 0xee, 0x3f, 0xd8, 0x31, 0xb7, 0x9e, 0x6c, 0x75, 0x1e,
	0xee, 0x36, 0x4a, 0x86, 0x07, 0x4d, 0x41, 0x77, 0x4d, 0x82, 0x29, 0xef, 0x32, 0x3c, 0x2d, 0xaa,
	0x58, 0xd6, 0xa0, 0x9e, 0x32, 0x7d, 0x31, 0xc8, 0x55, 0x1f, 0x99, 0x4f, 0xc4, 0x62, 0x7a, 0x4f,
	0xe9, 0x28, 0x93, 0x86, 0xcc, 0x97, 0xa1, 0x5e, 0x20, 0x56, 0x13, 0x5b, 0xd4, 0x29, 0x6d, 0xa1,
	0x34, 0xbd, 0x2d, 0x18, 0xbf, 0x2c, 0xc5, 0x2f, 0x68, 0x42, 0x33, 0xd1, 0xf5, 0xc7, 0x00, 0x85,
	0x58, 0x8c, 0xc8, 0x71, 0xaf, 0x0d, 0xa9, 0xc9, 0xf4, 0x89, 0xdb, 0xb0, 0xc0, 0xb3, 0x41, 0x26,
	0xb4, 0xc3, 0xba, 0x50, 0x64, 0xb0, 0x6f, 0xc2, 0x45, 0x55, 0xc5, 0x11, 0x39, 0x26, 0xd8, 0xcb,
	0xb7, 0x40, 0x24, 0x75, 0xa6, 0x50, 0x29, 0x8b, 0xb7, 0xe1, 0x42, 0xca, 0x71, 0xce, 0x9d, 0x91,
	0xe2, 0xcc, 0xc6, 0x94, 0x04, 0x5d, 0x81, 0x0b, 0xe9, 0x5c, 0x38, 0x2f, 0x48, 0x55, 0x2a, 0xe0,
	0xcd, 0xa5, 0x17, 0x38, 0x27, 0xa2, 0xb2, 0x4f, 0x69, 0x2e, 0x99, 0x78, 0x75, 0x02, 0xe7, 0xc4,
	0x14, 0x46, 0xc6, 0xff, 0x4a, 0x50, 0x2f, 0x68, 0xd0, 0xe7, 0xa1, 0x96, 0x63, 0x8c, 0xf2, 0x45,
	0xf7, 0xc6, 0x19, 0xba, 0x96, 0x99, 0x33, 0x44, 0x4f, 0x00, 0x85, 0x51, 0x10, 0x06, 0x94, 0x44,
	0x16, 0xf5, 0x30, 0x1d, 0xb8, 0x7e, 0x9f, 0xea, 0x25, 0xe1, 0x6e, 0x7d, 0x2a, 0xff, 0x54, 0x16,
	0x7b, 0xca, 0xc0, 0x5c, 0x08, 0x0b, 0x12, 0xe1, 0x58, 0x2e, 0x94, 0x73, 0x5c, 0x3e, 0xdd, 0xf1,
	0x96, 0xb2, 0x48, 0x1d, 0xe3, 0x82, 0x84, 0x13, 0xee, 0x59, 0x87, 0x84, 0x01, 0x75, 0x99, 0x7c,
	0xd3, 0xad, 0xb6, 0x57, 0xa6, 0xb9, 0xdb, 0x91, 0x38, 0x33, 0x31, 0x40, 0x6d, 0x38, 0xc7, 0x7b,
	0x0f, 0xd5, 0xcf, 0x09, 0xcb, 0xa9, 0x84, 0x70, 0xf7, 0x99, 0xcb, 0x4c, 0x09, 0x35, 0xbe, 0x5b,
	0x82, 0x9a, 0xf2, 0xd4, 0xf5, 0xc3, 0x11, 0x9b, 0xda, 0xb8, 0x37, 0x60, 0x31, 0x8c, 0x82, 0xe0,
	0xd0, 0x0a, 0x0e, 0xad, 0x30, 0xa0, 0x94, 0xd0, 0x84, 0xf6, 0xd5, 0x44, 0x88, 0x82, 0xc3, 0x47,
	0x87, 0x8f, 0x13, 0xc5, 0x8b, 0x1b, 0x7d, 0xf9, 0xd5, 0x1a, 0x7d, 0xe5, 0xd4, 0x46, 0x2f, 0x5e,
	0x43, 0xe5, 0xcc, 0x1a, 0x37, 0x95, 0x03, 0xbf, 0xa9, 0x00, 0x45, 0x5b, 0xe3, 0x29, 0x20, 0x59,
	0x03, 0xd8, 0xe3, 0x9c, 0x87, 0x38, 0x2f, 0x49, 0x70, 0x6e, 0xc3, 0xc2, 0x34, 0x66, 0x53, 0xef,
	0x15, 0x1a, 0xc9, 0x1f, 0x34, 0x98, 0x13, 0xd9, 0xc7, 0x3d, 0x8f, 0x70, 0xea, 0x8f, 0x3e, 0x0a,
	0x0b, 0xb9, 0x5e, 0xe8, 0xf2, 0x57, 0x2d, 0x4d, 0xbc, 0x69, 0x35, 0xb2, 0xdd, 0x90, 0xcb, 0x27,
	0xb2, 0xbc, 0xd2, 0x64, 0x96, 0x17, 0x53, 0x80, 0xf2, 0x07, 0xa1, 0x00, 0x2f, 0x4d, 0x11, 0xbf,
	0xad, 0x41, 0x55, 0x95, 0x95, 0x88, 0x5e, 0x17, 0xe6, 0x54, 0x99, 0x5a, 0x2e, 0x2f, 0x33, 0xc5,
	0x44, 0x6e, 0xbe, 0xa0, 0xb8, 0x45, 0x49, 0x9a, 0x35, 0xa7, 0x50, 0xa0, 0x78, 0x18, 0x8c, 0xfc,
	0xf8, 0xe3, 0x94, 0x7a, 0xe2, 0x4d, 0x8a, 0xbf, 0x2a, 0x51, 0x86, 0x87, 0xa1, 0x1a, 0x05, 0xa9,
	0xc0, 0xf8, 0x45, 0x09, 0x1a, 0xc5, 0x9b, 0xcd, 0xc9, 0x59, 0xd2, 0x1f, 0xb2, 0x63, 0x67, 0x2e,
	0x96, 0xca, 0xa9, 0x63, 0x42, 0x3d, 0x54, 0x05, 0x21, 0xdf, 0xef, 0x5a, 0x62, 0xe9, 0x6a, 0xfb,
	0xf6, 0xe9, 0x3d, 0x24, 0x5b, 0x3f, 0xb1, 0x4f, 0xec, 0xf1, 0xa7, 0x16, 0xef, 0xe1, 0x89, 0xcf,
	0x24, 0xa0, 0x56, 0x4b, 0xd5, 0x09, 0x0a, 0x33, 0x0e, 0x84, 0xaa, 0x35, 0xbe, 0x0b, 0x79, 0x07,
	0x5e, 0x61, 0x17, 0xed, 0x29, 0xbb, 0x88, 0x6f, 0xc8, 0xf8, 0x2e, 0xda, 0xc6, 0x0f, 0x35, 0x68,
	0x14, 0x1b, 0x19, 0x7a, 0x04, 0x0d, 0x1a, 0x17, 0xb1, 0x78, 0xf9, 0xb5, 0x5a, 0x2a, 0xc1, 0x6f,
	0x4c, 0xdb, 0x5b, 0xae, 0xe8, 0xcd, 0x79, 0x9a, 0x7d, 0x6c, 0x4d, 0x70, 0xd8, 0x56, 0x21, 0xff,
	0x40, 0x0e, 0xdb, 0xc6, 0xb7, 0x34, 0x98, 0x51, 0x35, 0x85, 0xda, 0x70, 0x69, 0x48, 0xa2, 0x23,
	0x8f, 0x58, 0xbd, 0x08, 0xfb, 0xf6, 0x20, 0xf9, 0x5e, 0xa0, 0x89, 0xc9, 0xb6, 0x28, 0x95, 0x1d,
	0xa1, 0x8b, 0xbf, 0x15, 0xdc, 0x86, 0x05, 0x65, 0xc3, 0x22, 0x42, 0x54, 0xb1, 0xc8, 0xfa, 0xab,
	0x4b, 0xc5, 0x7e, 0x44, 0x88, 0x2c, 0x97, 0xeb, 0x10, 0x17, 0xac, 0x95, 0xdc, 0xb8, 0x9a, 0x59,
	0x75, 0xd2, 0xeb, 0x60, 0x60, 0xa8, 0xf0, 0x26, 0x3c, 0xb1, 0xa9, 0x4c, 0x20, 0x43, 0xa5, 0x89,
	0x64, 0x28, 0x37, 0x95, 0xe5, 0x22, 0xa9, 0xc0, 0xf8, 0x63, 0x09, 0x96, 0x0f, 0x26, 0x7e, 0x66,
	0x95, 0x94, 0xe5, 0x01, 0x5c, 0x8f, 0x3f, 0x97, 0xe6, 0xbf, 0xd9, 0x66, 0xbb, 0x96, 0x1c, 0x01,
	0x57, 0xd5, 0x37, 0xd3, 0xac, 0x93, 0x0c, 0x1d, 0x39, 0xf3, 0x86, 0xd3, 0xd1, 0x52, 0xce, 0x8d,
	0x96, 0x38, 0x0a, 0x95, 0x4c, 0x14, 0x6c, 0xa8, 0x70, 0x7e, 0x2b, 0x2a, 0x71, 0xbe, 0xfd, 0xe8,
	0x0c, 0xf4, 0xb6, 0x78, 0xc2, 0x29, 0x3a, 0x49, 0x7d, 0x85, 0x73, 0xe3, 0xee, 0xb4, 0x10, 0x49,
	0x92, 0x3b, 0x0f, 0xb0, 0xb5, 0xbd, 0xdf, 0x3d, 0xd8, 0xda, 0xef, 0x3e, 0x7a, 0xb7, 0xf1, 0x1a,
	0x9a, 0x85, 0x8a, 0x64, 0xb7, 0xc6, 0x57, 0x60, 0x36, 0xf9, 0xf2, 0xb3, 0x01, 0x8b, 0x71, 0xba,
	0xc7, 0x43, 0xb7, 0xa0, 0x54, 0x99, 0x70, 0x5d, 0x87, 0x9a, 0x1c, 0x0f, 0x39, 0x46, 0x58, 0x15,
	0x32, 0x35, 0x15, 0x3c, 0xa8, 0x65, 0x3f, 0x0e, 0xe5, 0xe9, 0x9b, 0xf6, 0xd2, 0xf4, 0xed, 0x2a,
	0x80, 0xb8, 0x43, 0x76, 0xa6, 0x6b, 0x5e, 0xe0, 0x92, 0x6d, 0x2e, 0xe8, 0xd4, 0x7e, 0xf5, 0xfc,
	0x9a, 0xf6, 0xeb, 0xe7, 0xd7, 0xb4, 0xbf, 0x3c, 0xbf, 0xa6, 0xf5, 0xce, 0x8b, 0xbf, 0x20, 0xee,
	0xfc, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x3a, 0xde, 0x3c, 0xda, 0x18, 0x00, 0x00,
}
