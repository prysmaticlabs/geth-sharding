// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/beacon/p2p/v1/types.proto

package ethereum_beacon_p2p_v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BeaconState struct {
	// Versioning [1001-2000]
	GenesisTime uint64 `protobuf:"varint,1001,opt,name=genesis_time,json=genesisTime,proto3" json:"genesis_time,omitempty"`
	Slot        uint64 `protobuf:"varint,1002,opt,name=slot,proto3" json:"slot,omitempty"`
	Fork        *Fork  `protobuf:"bytes,1003,opt,name=fork,proto3" json:"fork,omitempty"`
	// History [2001-3000]
	LatestBlockHeader *BeaconBlockHeader `protobuf:"bytes,2001,opt,name=latest_block_header,json=latestBlockHeader,proto3" json:"latest_block_header,omitempty"`
	BlockRoots        [][]byte           `protobuf:"bytes,2002,rep,name=block_roots,json=blockRoots,proto3" json:"block_roots,omitempty"`
	StateRoots        [][]byte           `protobuf:"bytes,2003,rep,name=state_roots,json=stateRoots,proto3" json:"state_roots,omitempty"`
	HistoricalRoots   [][]byte           `protobuf:"bytes,2004,rep,name=historical_roots,json=historicalRoots,proto3" json:"historical_roots,omitempty"`
	// Eth1 [3001-4000]
	Eth1Data         *Eth1Data   `protobuf:"bytes,3001,opt,name=eth1_data,json=eth1Data,proto3" json:"eth1_data,omitempty"`
	Eth1DataVotes    []*Eth1Data `protobuf:"bytes,3002,rep,name=eth1_data_votes,json=eth1DataVotes,proto3" json:"eth1_data_votes,omitempty"`
	Eth1DepositIndex uint64      `protobuf:"varint,3003,opt,name=eth1_deposit_index,json=eth1DepositIndex,proto3" json:"eth1_deposit_index,omitempty"`
	// Registry [4001-5000]
	Validators []*Validator `protobuf:"bytes,4001,rep,name=validators,proto3" json:"validators,omitempty"`
	Balances   []uint64     `protobuf:"varint,4002,rep,packed,name=balances,proto3" json:"balances,omitempty"`
	// Shuffling [5001-6000]
	StartShard             uint64   `protobuf:"varint,5001,opt,name=start_shard,json=startShard,proto3" json:"start_shard,omitempty"`
	RandaoMixes            [][]byte `protobuf:"bytes,5002,rep,name=randao_mixes,json=randaoMixes,proto3" json:"randao_mixes,omitempty"`
	ActiveIndexRoots       [][]byte `protobuf:"bytes,5003,rep,name=active_index_roots,json=activeIndexRoots,proto3" json:"active_index_roots,omitempty"`
	CompactCommitteesRoots [][]byte `protobuf:"bytes,5004,rep,name=compact_committees_roots,json=compactCommitteesRoots,proto3" json:"compact_committees_roots,omitempty"`
	// Slashings [6001-7000]
	Slashings []uint64 `protobuf:"varint,6001,rep,packed,name=slashings,proto3" json:"slashings,omitempty"`
	// Attestations [7001-8000]
	PreviousEpochAttestations []*PendingAttestation `protobuf:"bytes,7001,rep,name=previous_epoch_attestations,json=previousEpochAttestations,proto3" json:"previous_epoch_attestations,omitempty"`
	CurrentEpochAttestations  []*PendingAttestation `protobuf:"bytes,7002,rep,name=current_epoch_attestations,json=currentEpochAttestations,proto3" json:"current_epoch_attestations,omitempty"`
	// Crosslinks [8001-9000]
	PreviousCrosslinks []*Crosslink `protobuf:"bytes,8001,rep,name=previous_crosslinks,json=previousCrosslinks,proto3" json:"previous_crosslinks,omitempty"`
	CurrentCrosslinks  []*Crosslink `protobuf:"bytes,8002,rep,name=current_crosslinks,json=currentCrosslinks,proto3" json:"current_crosslinks,omitempty"`
	// Finality [9001-10000]
	// Spec type [4]Bitvector which means this would be a fixed size of 4 bits.
	JustificationBits           []byte      `protobuf:"bytes,9001,opt,name=justification_bits,json=justificationBits,proto3" json:"justification_bits,omitempty"`
	PreviousJustifiedCheckpoint *Checkpoint `protobuf:"bytes,9002,opt,name=previous_justified_checkpoint,json=previousJustifiedCheckpoint,proto3" json:"previous_justified_checkpoint,omitempty"`
	CurrentJustifiedCheckpoint  *Checkpoint `protobuf:"bytes,9003,opt,name=current_justified_checkpoint,json=currentJustifiedCheckpoint,proto3" json:"current_justified_checkpoint,omitempty"`
	FinalizedCheckpoint         *Checkpoint `protobuf:"bytes,9004,opt,name=finalized_checkpoint,json=finalizedCheckpoint,proto3" json:"finalized_checkpoint,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}    `json:"-"`
	XXX_unrecognized            []byte      `json:"-"`
	XXX_sizecache               int32       `json:"-"`
}

func (m *BeaconState) Reset()         { *m = BeaconState{} }
func (m *BeaconState) String() string { return proto.CompactTextString(m) }
func (*BeaconState) ProtoMessage()    {}
func (*BeaconState) Descriptor() ([]byte, []int) {
	return fileDescriptor_e719e7d82cfa7b0d, []int{0}
}

func (m *BeaconState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BeaconState.Unmarshal(m, b)
}
func (m *BeaconState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BeaconState.Marshal(b, m, deterministic)
}
func (m *BeaconState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconState.Merge(m, src)
}
func (m *BeaconState) XXX_Size() int {
	return xxx_messageInfo_BeaconState.Size(m)
}
func (m *BeaconState) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconState.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconState proto.InternalMessageInfo

func (m *BeaconState) GetGenesisTime() uint64 {
	if m != nil {
		return m.GenesisTime
	}
	return 0
}

func (m *BeaconState) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *BeaconState) GetFork() *Fork {
	if m != nil {
		return m.Fork
	}
	return nil
}

func (m *BeaconState) GetLatestBlockHeader() *BeaconBlockHeader {
	if m != nil {
		return m.LatestBlockHeader
	}
	return nil
}

func (m *BeaconState) GetBlockRoots() [][]byte {
	if m != nil {
		return m.BlockRoots
	}
	return nil
}

func (m *BeaconState) GetStateRoots() [][]byte {
	if m != nil {
		return m.StateRoots
	}
	return nil
}

func (m *BeaconState) GetHistoricalRoots() [][]byte {
	if m != nil {
		return m.HistoricalRoots
	}
	return nil
}

func (m *BeaconState) GetEth1Data() *Eth1Data {
	if m != nil {
		return m.Eth1Data
	}
	return nil
}

func (m *BeaconState) GetEth1DataVotes() []*Eth1Data {
	if m != nil {
		return m.Eth1DataVotes
	}
	return nil
}

func (m *BeaconState) GetEth1DepositIndex() uint64 {
	if m != nil {
		return m.Eth1DepositIndex
	}
	return 0
}

func (m *BeaconState) GetValidators() []*Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *BeaconState) GetBalances() []uint64 {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *BeaconState) GetStartShard() uint64 {
	if m != nil {
		return m.StartShard
	}
	return 0
}

func (m *BeaconState) GetRandaoMixes() [][]byte {
	if m != nil {
		return m.RandaoMixes
	}
	return nil
}

func (m *BeaconState) GetActiveIndexRoots() [][]byte {
	if m != nil {
		return m.ActiveIndexRoots
	}
	return nil
}

func (m *BeaconState) GetCompactCommitteesRoots() [][]byte {
	if m != nil {
		return m.CompactCommitteesRoots
	}
	return nil
}

func (m *BeaconState) GetSlashings() []uint64 {
	if m != nil {
		return m.Slashings
	}
	return nil
}

func (m *BeaconState) GetPreviousEpochAttestations() []*PendingAttestation {
	if m != nil {
		return m.PreviousEpochAttestations
	}
	return nil
}

func (m *BeaconState) GetCurrentEpochAttestations() []*PendingAttestation {
	if m != nil {
		return m.CurrentEpochAttestations
	}
	return nil
}

func (m *BeaconState) GetPreviousCrosslinks() []*Crosslink {
	if m != nil {
		return m.PreviousCrosslinks
	}
	return nil
}

func (m *BeaconState) GetCurrentCrosslinks() []*Crosslink {
	if m != nil {
		return m.CurrentCrosslinks
	}
	return nil
}

func (m *BeaconState) GetJustificationBits() []byte {
	if m != nil {
		return m.JustificationBits
	}
	return nil
}

func (m *BeaconState) GetPreviousJustifiedCheckpoint() *Checkpoint {
	if m != nil {
		return m.PreviousJustifiedCheckpoint
	}
	return nil
}

func (m *BeaconState) GetCurrentJustifiedCheckpoint() *Checkpoint {
	if m != nil {
		return m.CurrentJustifiedCheckpoint
	}
	return nil
}

func (m *BeaconState) GetFinalizedCheckpoint() *Checkpoint {
	if m != nil {
		return m.FinalizedCheckpoint
	}
	return nil
}

type Fork struct {
	PreviousVersion      []byte   `protobuf:"bytes,1,opt,name=previous_version,json=previousVersion,proto3" json:"previous_version,omitempty"`
	CurrentVersion       []byte   `protobuf:"bytes,2,opt,name=current_version,json=currentVersion,proto3" json:"current_version,omitempty"`
	Epoch                uint64   `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Fork) Reset()         { *m = Fork{} }
func (m *Fork) String() string { return proto.CompactTextString(m) }
func (*Fork) ProtoMessage()    {}
func (*Fork) Descriptor() ([]byte, []int) {
	return fileDescriptor_e719e7d82cfa7b0d, []int{1}
}

func (m *Fork) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Fork.Unmarshal(m, b)
}
func (m *Fork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Fork.Marshal(b, m, deterministic)
}
func (m *Fork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fork.Merge(m, src)
}
func (m *Fork) XXX_Size() int {
	return xxx_messageInfo_Fork.Size(m)
}
func (m *Fork) XXX_DiscardUnknown() {
	xxx_messageInfo_Fork.DiscardUnknown(m)
}

var xxx_messageInfo_Fork proto.InternalMessageInfo

func (m *Fork) GetPreviousVersion() []byte {
	if m != nil {
		return m.PreviousVersion
	}
	return nil
}

func (m *Fork) GetCurrentVersion() []byte {
	if m != nil {
		return m.CurrentVersion
	}
	return nil
}

func (m *Fork) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type PendingAttestation struct {
	// Bitfield representation of validator indices that have voted exactly
	// the same vote and have been aggregated into this attestation.
	AggregationBits []byte           `protobuf:"bytes,1,opt,name=aggregation_bits,json=aggregationBits,proto3" json:"aggregation_bits,omitempty"`
	Data            *AttestationData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// The difference of when attestation gets created and get included on chain.
	InclusionDelay uint64 `protobuf:"varint,3,opt,name=inclusion_delay,json=inclusionDelay,proto3" json:"inclusion_delay,omitempty"`
	// The proposer who included the attestation in the block.
	ProposerIndex        uint64   `protobuf:"varint,4,opt,name=proposer_index,json=proposerIndex,proto3" json:"proposer_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PendingAttestation) Reset()         { *m = PendingAttestation{} }
func (m *PendingAttestation) String() string { return proto.CompactTextString(m) }
func (*PendingAttestation) ProtoMessage()    {}
func (*PendingAttestation) Descriptor() ([]byte, []int) {
	return fileDescriptor_e719e7d82cfa7b0d, []int{2}
}

func (m *PendingAttestation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PendingAttestation.Unmarshal(m, b)
}
func (m *PendingAttestation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PendingAttestation.Marshal(b, m, deterministic)
}
func (m *PendingAttestation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingAttestation.Merge(m, src)
}
func (m *PendingAttestation) XXX_Size() int {
	return xxx_messageInfo_PendingAttestation.Size(m)
}
func (m *PendingAttestation) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingAttestation.DiscardUnknown(m)
}

var xxx_messageInfo_PendingAttestation proto.InternalMessageInfo

func (m *PendingAttestation) GetAggregationBits() []byte {
	if m != nil {
		return m.AggregationBits
	}
	return nil
}

func (m *PendingAttestation) GetData() *AttestationData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PendingAttestation) GetInclusionDelay() uint64 {
	if m != nil {
		return m.InclusionDelay
	}
	return 0
}

func (m *PendingAttestation) GetProposerIndex() uint64 {
	if m != nil {
		return m.ProposerIndex
	}
	return 0
}

type Attestation struct {
	// Bitfield representation of validator indices that have voted exactly
	// the same vote and have been aggregated into this attestation.
	// Spec type: Bitlist[4096]
	AggregationBits []byte           `protobuf:"bytes,1,opt,name=aggregation_bits,json=aggregationBits,proto3" json:"aggregation_bits,omitempty"`
	Data            *AttestationData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// Challengeable bit (SSZ-bool, 1 byte) for the custody of crosslink data. Not used in phase 0.
	CustodyBits []byte `protobuf:"bytes,3,opt,name=custody_bits,json=custodyBits,proto3" json:"custody_bits,omitempty"`
	// 96 byte BLS aggregate signature.
	Signature            []byte   `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Attestation) Reset()         { *m = Attestation{} }
func (m *Attestation) String() string { return proto.CompactTextString(m) }
func (*Attestation) ProtoMessage()    {}
func (*Attestation) Descriptor() ([]byte, []int) {
	return fileDescriptor_e719e7d82cfa7b0d, []int{3}
}

func (m *Attestation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Attestation.Unmarshal(m, b)
}
func (m *Attestation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Attestation.Marshal(b, m, deterministic)
}
func (m *Attestation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attestation.Merge(m, src)
}
func (m *Attestation) XXX_Size() int {
	return xxx_messageInfo_Attestation.Size(m)
}
func (m *Attestation) XXX_DiscardUnknown() {
	xxx_messageInfo_Attestation.DiscardUnknown(m)
}

var xxx_messageInfo_Attestation proto.InternalMessageInfo

func (m *Attestation) GetAggregationBits() []byte {
	if m != nil {
		return m.AggregationBits
	}
	return nil
}

func (m *Attestation) GetData() *AttestationData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Attestation) GetCustodyBits() []byte {
	if m != nil {
		return m.CustodyBits
	}
	return nil
}

func (m *Attestation) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Checkpoint struct {
	// The Epoch of when the check point happens.
	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// The block root of when the check point happens.
	Root                 []byte   `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Checkpoint) Reset()         { *m = Checkpoint{} }
func (m *Checkpoint) String() string { return proto.CompactTextString(m) }
func (*Checkpoint) ProtoMessage()    {}
func (*Checkpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_e719e7d82cfa7b0d, []int{4}
}

func (m *Checkpoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Checkpoint.Unmarshal(m, b)
}
func (m *Checkpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Checkpoint.Marshal(b, m, deterministic)
}
func (m *Checkpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Checkpoint.Merge(m, src)
}
func (m *Checkpoint) XXX_Size() int {
	return xxx_messageInfo_Checkpoint.Size(m)
}
func (m *Checkpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_Checkpoint.DiscardUnknown(m)
}

var xxx_messageInfo_Checkpoint proto.InternalMessageInfo

func (m *Checkpoint) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *Checkpoint) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

type AttestationData struct {
	// 32 byte root of the LMD GHOST block vote.
	BeaconBlockRoot []byte `protobuf:"bytes,1,opt,name=beacon_block_root,json=beaconBlockRoot,proto3" json:"beacon_block_root,omitempty"`
	// Casper Friendly Finality Gadget to check point beacon chain
	// for justification and finalization.
	Source *Checkpoint `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Target *Checkpoint `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	// Crosslink voted by this attestation.
	Crosslink            *Crosslink `protobuf:"bytes,4,opt,name=crosslink,proto3" json:"crosslink,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *AttestationData) Reset()         { *m = AttestationData{} }
func (m *AttestationData) String() string { return proto.CompactTextString(m) }
func (*AttestationData) ProtoMessage()    {}
func (*AttestationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_e719e7d82cfa7b0d, []int{5}
}

func (m *AttestationData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttestationData.Unmarshal(m, b)
}
func (m *AttestationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttestationData.Marshal(b, m, deterministic)
}
func (m *AttestationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestationData.Merge(m, src)
}
func (m *AttestationData) XXX_Size() int {
	return xxx_messageInfo_AttestationData.Size(m)
}
func (m *AttestationData) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestationData.DiscardUnknown(m)
}

var xxx_messageInfo_AttestationData proto.InternalMessageInfo

func (m *AttestationData) GetBeaconBlockRoot() []byte {
	if m != nil {
		return m.BeaconBlockRoot
	}
	return nil
}

func (m *AttestationData) GetSource() *Checkpoint {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *AttestationData) GetTarget() *Checkpoint {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *AttestationData) GetCrosslink() *Crosslink {
	if m != nil {
		return m.Crosslink
	}
	return nil
}

type AttestationTarget struct {
	// Used internally to track LMD GHOST block votes and to find
	// the head of the chain.
	Slot                 uint64   `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	BlockRoot            []byte   `protobuf:"bytes,2,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	ParentRoot           []byte   `protobuf:"bytes,3,opt,name=parent_root,json=parentRoot,proto3" json:"parent_root,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttestationTarget) Reset()         { *m = AttestationTarget{} }
func (m *AttestationTarget) String() string { return proto.CompactTextString(m) }
func (*AttestationTarget) ProtoMessage()    {}
func (*AttestationTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_e719e7d82cfa7b0d, []int{6}
}

func (m *AttestationTarget) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttestationTarget.Unmarshal(m, b)
}
func (m *AttestationTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttestationTarget.Marshal(b, m, deterministic)
}
func (m *AttestationTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestationTarget.Merge(m, src)
}
func (m *AttestationTarget) XXX_Size() int {
	return xxx_messageInfo_AttestationTarget.Size(m)
}
func (m *AttestationTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestationTarget.DiscardUnknown(m)
}

var xxx_messageInfo_AttestationTarget proto.InternalMessageInfo

func (m *AttestationTarget) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *AttestationTarget) GetBlockRoot() []byte {
	if m != nil {
		return m.BlockRoot
	}
	return nil
}

func (m *AttestationTarget) GetParentRoot() []byte {
	if m != nil {
		return m.ParentRoot
	}
	return nil
}

type AttestationDataAndCustodyBit struct {
	Data *AttestationData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Challengeable bit (SSZ-bool, 1 byte) for the custody of crosslink data
	CustodyBit           bool     `protobuf:"varint,2,opt,name=custody_bit,json=custodyBit,proto3" json:"custody_bit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttestationDataAndCustodyBit) Reset()         { *m = AttestationDataAndCustodyBit{} }
func (m *AttestationDataAndCustodyBit) String() string { return proto.CompactTextString(m) }
func (*AttestationDataAndCustodyBit) ProtoMessage()    {}
func (*AttestationDataAndCustodyBit) Descriptor() ([]byte, []int) {
	return fileDescriptor_e719e7d82cfa7b0d, []int{7}
}

func (m *AttestationDataAndCustodyBit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttestationDataAndCustodyBit.Unmarshal(m, b)
}
func (m *AttestationDataAndCustodyBit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttestationDataAndCustodyBit.Marshal(b, m, deterministic)
}
func (m *AttestationDataAndCustodyBit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestationDataAndCustodyBit.Merge(m, src)
}
func (m *AttestationDataAndCustodyBit) XXX_Size() int {
	return xxx_messageInfo_AttestationDataAndCustodyBit.Size(m)
}
func (m *AttestationDataAndCustodyBit) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestationDataAndCustodyBit.DiscardUnknown(m)
}

var xxx_messageInfo_AttestationDataAndCustodyBit proto.InternalMessageInfo

func (m *AttestationDataAndCustodyBit) GetData() *AttestationData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AttestationDataAndCustodyBit) GetCustodyBit() bool {
	if m != nil {
		return m.CustodyBit
	}
	return false
}

type IndexedAttestation struct {
	// Validator indices
	CustodyBit_0Indices []uint64         `protobuf:"varint,1,rep,packed,name=custody_bit_0_indices,json=custodyBit0Indices,proto3" json:"custody_bit_0_indices,omitempty"`
	CustodyBit_1Indices []uint64         `protobuf:"varint,2,rep,packed,name=custody_bit_1_indices,json=custodyBit1Indices,proto3" json:"custody_bit_1_indices,omitempty"`
	Data                *AttestationData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// 96 bytes aggregate signature.
	Signature            []byte   `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IndexedAttestation) Reset()         { *m = IndexedAttestation{} }
func (m *IndexedAttestation) String() string { return proto.CompactTextString(m) }
func (*IndexedAttestation) ProtoMessage()    {}
func (*IndexedAttestation) Descriptor() ([]byte, []int) {
	return fileDescriptor_e719e7d82cfa7b0d, []int{8}
}

func (m *IndexedAttestation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IndexedAttestation.Unmarshal(m, b)
}
func (m *IndexedAttestation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IndexedAttestation.Marshal(b, m, deterministic)
}
func (m *IndexedAttestation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexedAttestation.Merge(m, src)
}
func (m *IndexedAttestation) XXX_Size() int {
	return xxx_messageInfo_IndexedAttestation.Size(m)
}
func (m *IndexedAttestation) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexedAttestation.DiscardUnknown(m)
}

var xxx_messageInfo_IndexedAttestation proto.InternalMessageInfo

func (m *IndexedAttestation) GetCustodyBit_0Indices() []uint64 {
	if m != nil {
		return m.CustodyBit_0Indices
	}
	return nil
}

func (m *IndexedAttestation) GetCustodyBit_1Indices() []uint64 {
	if m != nil {
		return m.CustodyBit_1Indices
	}
	return nil
}

func (m *IndexedAttestation) GetData() *AttestationData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *IndexedAttestation) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Validator struct {
	// 96 byte BLS public key used for the validator's activities.
	Pubkey []byte `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	// 32 byte hash of the withdrawal destination public key.
	WithdrawalCredentials []byte `protobuf:"bytes,2,opt,name=withdrawal_credentials,json=withdrawalCredentials,proto3" json:"withdrawal_credentials,omitempty"`
	// The validators current effective balance in gwei.
	EffectiveBalance uint64 `protobuf:"varint,3,opt,name=effective_balance,json=effectiveBalance,proto3" json:"effective_balance,omitempty"`
	// Whether or not the validator has been slashed.
	Slashed bool `protobuf:"varint,4,opt,name=slashed,proto3" json:"slashed,omitempty"`
	// Epoch when the validator became eligible for activation. This field may
	// be zero if the validator was present in the Ethereum 2.0 genesis.
	ActivationEligibilityEpoch uint64 `protobuf:"varint,5,opt,name=activation_eligibility_epoch,json=activationEligibilityEpoch,proto3" json:"activation_eligibility_epoch,omitempty"`
	// Epoch when the validator was activated. This field may be zero if the
	// validator was present in the Ethereum 2.0 genesis.
	ActivationEpoch uint64 `protobuf:"varint,6,opt,name=activation_epoch,json=activationEpoch,proto3" json:"activation_epoch,omitempty"`
	// Epoch when the validator was exited. This field may be zero if the
	// validator has not exited.
	ExitEpoch uint64 `protobuf:"varint,7,opt,name=exit_epoch,json=exitEpoch,proto3" json:"exit_epoch,omitempty"`
	// Epoch when the validator is eligible to withdraw their funds. This field
	// may be zero if the validator has not exited.
	WithdrawableEpoch    uint64   `protobuf:"varint,8,opt,name=withdrawable_epoch,json=withdrawableEpoch,proto3" json:"withdrawable_epoch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_e719e7d82cfa7b0d, []int{9}
}

func (m *Validator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Validator.Unmarshal(m, b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return xxx_messageInfo_Validator.Size(m)
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

func (m *Validator) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *Validator) GetWithdrawalCredentials() []byte {
	if m != nil {
		return m.WithdrawalCredentials
	}
	return nil
}

func (m *Validator) GetEffectiveBalance() uint64 {
	if m != nil {
		return m.EffectiveBalance
	}
	return 0
}

func (m *Validator) GetSlashed() bool {
	if m != nil {
		return m.Slashed
	}
	return false
}

func (m *Validator) GetActivationEligibilityEpoch() uint64 {
	if m != nil {
		return m.ActivationEligibilityEpoch
	}
	return 0
}

func (m *Validator) GetActivationEpoch() uint64 {
	if m != nil {
		return m.ActivationEpoch
	}
	return 0
}

func (m *Validator) GetExitEpoch() uint64 {
	if m != nil {
		return m.ExitEpoch
	}
	return 0
}

func (m *Validator) GetWithdrawableEpoch() uint64 {
	if m != nil {
		return m.WithdrawableEpoch
	}
	return 0
}

type Crosslink struct {
	// The shard that crosslinks to the beacon chain.
	Shard uint64 `protobuf:"varint,1,opt,name=shard,proto3" json:"shard,omitempty"`
	// 32 byte root of the parent crosslink.
	ParentRoot []byte `protobuf:"bytes,2,opt,name=parent_root,json=parentRoot,proto3" json:"parent_root,omitempty"`
	// Start epoch must match the parent crosslink's end epoch.
	StartEpoch uint64 `protobuf:"varint,3,opt,name=start_epoch,json=startEpoch,proto3" json:"start_epoch,omitempty"`
	// Ending epoch for this crosslink period. This field matches the attestation
	// target epoch or the start epoch + MAX_EPOCHS_PER_CROSSLINK, whichever is
	// less.
	EndEpoch uint64 `protobuf:"varint,4,opt,name=end_epoch,json=endEpoch,proto3" json:"end_epoch,omitempty"`
	// 32 byte root of the crosslinked shard data since the previous crosslink.
	DataRoot             []byte   `protobuf:"bytes,5,opt,name=data_root,json=dataRoot,proto3" json:"data_root,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Crosslink) Reset()         { *m = Crosslink{} }
func (m *Crosslink) String() string { return proto.CompactTextString(m) }
func (*Crosslink) ProtoMessage()    {}
func (*Crosslink) Descriptor() ([]byte, []int) {
	return fileDescriptor_e719e7d82cfa7b0d, []int{10}
}

func (m *Crosslink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Crosslink.Unmarshal(m, b)
}
func (m *Crosslink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Crosslink.Marshal(b, m, deterministic)
}
func (m *Crosslink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Crosslink.Merge(m, src)
}
func (m *Crosslink) XXX_Size() int {
	return xxx_messageInfo_Crosslink.Size(m)
}
func (m *Crosslink) XXX_DiscardUnknown() {
	xxx_messageInfo_Crosslink.DiscardUnknown(m)
}

var xxx_messageInfo_Crosslink proto.InternalMessageInfo

func (m *Crosslink) GetShard() uint64 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *Crosslink) GetParentRoot() []byte {
	if m != nil {
		return m.ParentRoot
	}
	return nil
}

func (m *Crosslink) GetStartEpoch() uint64 {
	if m != nil {
		return m.StartEpoch
	}
	return 0
}

func (m *Crosslink) GetEndEpoch() uint64 {
	if m != nil {
		return m.EndEpoch
	}
	return 0
}

func (m *Crosslink) GetDataRoot() []byte {
	if m != nil {
		return m.DataRoot
	}
	return nil
}

type BeaconBlockHeader struct {
	// Beacon chain slot that this block represents.
	Slot uint64 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	// 32 byte merkle tree root of the parent ssz encoded block.
	ParentRoot []byte `protobuf:"bytes,2,opt,name=parent_root,json=parentRoot,proto3" json:"parent_root,omitempty"`
	// 32 byte merkle tree root of the resulting ssz encoded state after processing this block.
	StateRoot []byte `protobuf:"bytes,3,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	// 32 byte merkle tree root of the ssz encoded block body.
	BodyRoot []byte `protobuf:"bytes,4,opt,name=body_root,json=bodyRoot,proto3" json:"body_root,omitempty"`
	// 96 byte BLS signature from the validator that produced this block.
	Signature            []byte   `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BeaconBlockHeader) Reset()         { *m = BeaconBlockHeader{} }
func (m *BeaconBlockHeader) String() string { return proto.CompactTextString(m) }
func (*BeaconBlockHeader) ProtoMessage()    {}
func (*BeaconBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_e719e7d82cfa7b0d, []int{11}
}

func (m *BeaconBlockHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BeaconBlockHeader.Unmarshal(m, b)
}
func (m *BeaconBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BeaconBlockHeader.Marshal(b, m, deterministic)
}
func (m *BeaconBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconBlockHeader.Merge(m, src)
}
func (m *BeaconBlockHeader) XXX_Size() int {
	return xxx_messageInfo_BeaconBlockHeader.Size(m)
}
func (m *BeaconBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconBlockHeader proto.InternalMessageInfo

func (m *BeaconBlockHeader) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *BeaconBlockHeader) GetParentRoot() []byte {
	if m != nil {
		return m.ParentRoot
	}
	return nil
}

func (m *BeaconBlockHeader) GetStateRoot() []byte {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

func (m *BeaconBlockHeader) GetBodyRoot() []byte {
	if m != nil {
		return m.BodyRoot
	}
	return nil
}

func (m *BeaconBlockHeader) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type BeaconBlock struct {
	// Beacon chain slot that this block represents.
	Slot uint64 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	// 32 byte root of the parent block.
	ParentRoot []byte `protobuf:"bytes,2,opt,name=parent_root,json=parentRoot,proto3" json:"parent_root,omitempty"`
	// 32 byte root of the resulting state after processing this block.
	StateRoot []byte `protobuf:"bytes,3,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	// The block body itself.
	Body *BeaconBlockBody `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	// 96 byte BLS signature from the validator that produced this block.
	Signature            []byte   `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BeaconBlock) Reset()         { *m = BeaconBlock{} }
func (m *BeaconBlock) String() string { return proto.CompactTextString(m) }
func (*BeaconBlock) ProtoMessage()    {}
func (*BeaconBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_e719e7d82cfa7b0d, []int{12}
}

func (m *BeaconBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BeaconBlock.Unmarshal(m, b)
}
func (m *BeaconBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BeaconBlock.Marshal(b, m, deterministic)
}
func (m *BeaconBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconBlock.Merge(m, src)
}
func (m *BeaconBlock) XXX_Size() int {
	return xxx_messageInfo_BeaconBlock.Size(m)
}
func (m *BeaconBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconBlock.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconBlock proto.InternalMessageInfo

func (m *BeaconBlock) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *BeaconBlock) GetParentRoot() []byte {
	if m != nil {
		return m.ParentRoot
	}
	return nil
}

func (m *BeaconBlock) GetStateRoot() []byte {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

func (m *BeaconBlock) GetBody() *BeaconBlockBody {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *BeaconBlock) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type BeaconBlockBody struct {
	// The validators RANDAO reveal 96 byte value.
	RandaoReveal []byte `protobuf:"bytes,1,opt,name=randao_reveal,json=randaoReveal,proto3" json:"randao_reveal,omitempty"`
	// A reference to the Ethereum 1.x chain.
	Eth1Data *Eth1Data `protobuf:"bytes,2,opt,name=eth1_data,json=eth1Data,proto3" json:"eth1_data,omitempty"`
	// 32 byte field of arbitrary data. This field may contain any data and
	// is not used for anything other than a fun message.
	Graffiti []byte `protobuf:"bytes,3,opt,name=graffiti,proto3" json:"graffiti,omitempty"`
	// At most MAX_PROPOSER_SLASHINGS.
	ProposerSlashings []*ProposerSlashing `protobuf:"bytes,4,rep,name=proposer_slashings,json=proposerSlashings,proto3" json:"proposer_slashings,omitempty"`
	// At most MAX_ATTESTER_SLASHINGS.
	AttesterSlashings []*AttesterSlashing `protobuf:"bytes,5,rep,name=attester_slashings,json=attesterSlashings,proto3" json:"attester_slashings,omitempty"`
	// At most MAX_ATTESTATIONS.
	Attestations []*Attestation `protobuf:"bytes,6,rep,name=attestations,proto3" json:"attestations,omitempty"`
	// At most MAX_DEPOSITS.
	Deposits []*Deposit `protobuf:"bytes,7,rep,name=deposits,proto3" json:"deposits,omitempty"`
	// At most MAX_VOLUNTARY_EXITS.
	VoluntaryExits []*VoluntaryExit `protobuf:"bytes,8,rep,name=voluntary_exits,json=voluntaryExits,proto3" json:"voluntary_exits,omitempty"`
	// At most MAX_TRANSFERS.
	Transfers            []*Transfer `protobuf:"bytes,9,rep,name=transfers,proto3" json:"transfers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *BeaconBlockBody) Reset()         { *m = BeaconBlockBody{} }
func (m *BeaconBlockBody) String() string { return proto.CompactTextString(m) }
func (*BeaconBlockBody) ProtoMessage()    {}
func (*BeaconBlockBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_e719e7d82cfa7b0d, []int{13}
}

func (m *BeaconBlockBody) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BeaconBlockBody.Unmarshal(m, b)
}
func (m *BeaconBlockBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BeaconBlockBody.Marshal(b, m, deterministic)
}
func (m *BeaconBlockBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconBlockBody.Merge(m, src)
}
func (m *BeaconBlockBody) XXX_Size() int {
	return xxx_messageInfo_BeaconBlockBody.Size(m)
}
func (m *BeaconBlockBody) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconBlockBody.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconBlockBody proto.InternalMessageInfo

func (m *BeaconBlockBody) GetRandaoReveal() []byte {
	if m != nil {
		return m.RandaoReveal
	}
	return nil
}

func (m *BeaconBlockBody) GetEth1Data() *Eth1Data {
	if m != nil {
		return m.Eth1Data
	}
	return nil
}

func (m *BeaconBlockBody) GetGraffiti() []byte {
	if m != nil {
		return m.Graffiti
	}
	return nil
}

func (m *BeaconBlockBody) GetProposerSlashings() []*ProposerSlashing {
	if m != nil {
		return m.ProposerSlashings
	}
	return nil
}

func (m *BeaconBlockBody) GetAttesterSlashings() []*AttesterSlashing {
	if m != nil {
		return m.AttesterSlashings
	}
	return nil
}

func (m *BeaconBlockBody) GetAttestations() []*Attestation {
	if m != nil {
		return m.Attestations
	}
	return nil
}

func (m *BeaconBlockBody) GetDeposits() []*Deposit {
	if m != nil {
		return m.Deposits
	}
	return nil
}

func (m *BeaconBlockBody) GetVoluntaryExits() []*VoluntaryExit {
	if m != nil {
		return m.VoluntaryExits
	}
	return nil
}

func (m *BeaconBlockBody) GetTransfers() []*Transfer {
	if m != nil {
		return m.Transfers
	}
	return nil
}

type DepositData struct {
	// 48 byte BLS public key of the validator.
	Pubkey []byte `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	// A 32 byte hash of the withdrawal address public key.
	WithdrawalCredentials []byte `protobuf:"bytes,2,opt,name=withdrawal_credentials,json=withdrawalCredentials,proto3" json:"withdrawal_credentials,omitempty"`
	// Deposit amount in gwei.
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// 96 byte signature from the validators public key.
	Signature            []byte   `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepositData) Reset()         { *m = DepositData{} }
func (m *DepositData) String() string { return proto.CompactTextString(m) }
func (*DepositData) ProtoMessage()    {}
func (*DepositData) Descriptor() ([]byte, []int) {
	return fileDescriptor_e719e7d82cfa7b0d, []int{14}
}

func (m *DepositData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepositData.Unmarshal(m, b)
}
func (m *DepositData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepositData.Marshal(b, m, deterministic)
}
func (m *DepositData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositData.Merge(m, src)
}
func (m *DepositData) XXX_Size() int {
	return xxx_messageInfo_DepositData.Size(m)
}
func (m *DepositData) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositData.DiscardUnknown(m)
}

var xxx_messageInfo_DepositData proto.InternalMessageInfo

func (m *DepositData) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *DepositData) GetWithdrawalCredentials() []byte {
	if m != nil {
		return m.WithdrawalCredentials
	}
	return nil
}

func (m *DepositData) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *DepositData) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ProposerSlashing struct {
	// Validator index of the validator that proposed the two conflicting block
	// headers.
	ProposerIndex uint64 `protobuf:"varint,1,opt,name=proposer_index,json=proposerIndex,proto3" json:"proposer_index,omitempty"`
	// First conflicting block header.
	Header_1 *BeaconBlockHeader `protobuf:"bytes,2,opt,name=header_1,json=header1,proto3" json:"header_1,omitempty"`
	// Second conflicting block header.
	Header_2             *BeaconBlockHeader `protobuf:"bytes,3,opt,name=header_2,json=header2,proto3" json:"header_2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ProposerSlashing) Reset()         { *m = ProposerSlashing{} }
func (m *ProposerSlashing) String() string { return proto.CompactTextString(m) }
func (*ProposerSlashing) ProtoMessage()    {}
func (*ProposerSlashing) Descriptor() ([]byte, []int) {
	return fileDescriptor_e719e7d82cfa7b0d, []int{15}
}

func (m *ProposerSlashing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProposerSlashing.Unmarshal(m, b)
}
func (m *ProposerSlashing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProposerSlashing.Marshal(b, m, deterministic)
}
func (m *ProposerSlashing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposerSlashing.Merge(m, src)
}
func (m *ProposerSlashing) XXX_Size() int {
	return xxx_messageInfo_ProposerSlashing.Size(m)
}
func (m *ProposerSlashing) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposerSlashing.DiscardUnknown(m)
}

var xxx_messageInfo_ProposerSlashing proto.InternalMessageInfo

func (m *ProposerSlashing) GetProposerIndex() uint64 {
	if m != nil {
		return m.ProposerIndex
	}
	return 0
}

func (m *ProposerSlashing) GetHeader_1() *BeaconBlockHeader {
	if m != nil {
		return m.Header_1
	}
	return nil
}

func (m *ProposerSlashing) GetHeader_2() *BeaconBlockHeader {
	if m != nil {
		return m.Header_2
	}
	return nil
}

type AttesterSlashing struct {
	// First conflicting attestation.
	Attestation_1 *IndexedAttestation `protobuf:"bytes,1,opt,name=attestation_1,json=attestation1,proto3" json:"attestation_1,omitempty"`
	// Second conflicting attestation.
	Attestation_2        *IndexedAttestation `protobuf:"bytes,2,opt,name=attestation_2,json=attestation2,proto3" json:"attestation_2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *AttesterSlashing) Reset()         { *m = AttesterSlashing{} }
func (m *AttesterSlashing) String() string { return proto.CompactTextString(m) }
func (*AttesterSlashing) ProtoMessage()    {}
func (*AttesterSlashing) Descriptor() ([]byte, []int) {
	return fileDescriptor_e719e7d82cfa7b0d, []int{16}
}

func (m *AttesterSlashing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttesterSlashing.Unmarshal(m, b)
}
func (m *AttesterSlashing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttesterSlashing.Marshal(b, m, deterministic)
}
func (m *AttesterSlashing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttesterSlashing.Merge(m, src)
}
func (m *AttesterSlashing) XXX_Size() int {
	return xxx_messageInfo_AttesterSlashing.Size(m)
}
func (m *AttesterSlashing) XXX_DiscardUnknown() {
	xxx_messageInfo_AttesterSlashing.DiscardUnknown(m)
}

var xxx_messageInfo_AttesterSlashing proto.InternalMessageInfo

func (m *AttesterSlashing) GetAttestation_1() *IndexedAttestation {
	if m != nil {
		return m.Attestation_1
	}
	return nil
}

func (m *AttesterSlashing) GetAttestation_2() *IndexedAttestation {
	if m != nil {
		return m.Attestation_2
	}
	return nil
}

type Deposit struct {
	// 32 byte roots in the deposit tree branch.
	Proof                [][]byte     `protobuf:"bytes,1,rep,name=proof,proto3" json:"proof,omitempty"`
	Data                 *DepositData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Deposit) Reset()         { *m = Deposit{} }
func (m *Deposit) String() string { return proto.CompactTextString(m) }
func (*Deposit) ProtoMessage()    {}
func (*Deposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_e719e7d82cfa7b0d, []int{17}
}

func (m *Deposit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deposit.Unmarshal(m, b)
}
func (m *Deposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deposit.Marshal(b, m, deterministic)
}
func (m *Deposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deposit.Merge(m, src)
}
func (m *Deposit) XXX_Size() int {
	return xxx_messageInfo_Deposit.Size(m)
}
func (m *Deposit) XXX_DiscardUnknown() {
	xxx_messageInfo_Deposit.DiscardUnknown(m)
}

var xxx_messageInfo_Deposit proto.InternalMessageInfo

func (m *Deposit) GetProof() [][]byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *Deposit) GetData() *DepositData {
	if m != nil {
		return m.Data
	}
	return nil
}

type VoluntaryExit struct {
	// The epoch on when exit request becomes valid.
	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Index of the exiting validator.
	ValidatorIndex uint64 `protobuf:"varint,2,opt,name=validator_index,json=validatorIndex,proto3" json:"validator_index,omitempty"`
	// Validator's 96 byte signature
	Signature            []byte   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoluntaryExit) Reset()         { *m = VoluntaryExit{} }
func (m *VoluntaryExit) String() string { return proto.CompactTextString(m) }
func (*VoluntaryExit) ProtoMessage()    {}
func (*VoluntaryExit) Descriptor() ([]byte, []int) {
	return fileDescriptor_e719e7d82cfa7b0d, []int{18}
}

func (m *VoluntaryExit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VoluntaryExit.Unmarshal(m, b)
}
func (m *VoluntaryExit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VoluntaryExit.Marshal(b, m, deterministic)
}
func (m *VoluntaryExit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoluntaryExit.Merge(m, src)
}
func (m *VoluntaryExit) XXX_Size() int {
	return xxx_messageInfo_VoluntaryExit.Size(m)
}
func (m *VoluntaryExit) XXX_DiscardUnknown() {
	xxx_messageInfo_VoluntaryExit.DiscardUnknown(m)
}

var xxx_messageInfo_VoluntaryExit proto.InternalMessageInfo

func (m *VoluntaryExit) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *VoluntaryExit) GetValidatorIndex() uint64 {
	if m != nil {
		return m.ValidatorIndex
	}
	return 0
}

func (m *VoluntaryExit) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Transfer struct {
	// Validator index of the sender.
	Sender uint64 `protobuf:"varint,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// Validator index of the recipient.
	Recipient uint64 `protobuf:"varint,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// Amount in gwei sent to the recipient.
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// Fee in gwei for the block proposer to include this transfer.
	Fee uint64 `protobuf:"varint,4,opt,name=fee,proto3" json:"fee,omitempty"`
	// Slot at which transfer must be processed. This is used for replay protection.
	Slot uint64 `protobuf:"varint,5,opt,name=slot,proto3" json:"slot,omitempty"`
	// 48 byte sender's withdrawal public key.
	Pubkey []byte `protobuf:"bytes,6,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	// 96 byte signature from the sender's withdrawal key.
	Signature            []byte   `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Transfer) Reset()         { *m = Transfer{} }
func (m *Transfer) String() string { return proto.CompactTextString(m) }
func (*Transfer) ProtoMessage()    {}
func (*Transfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_e719e7d82cfa7b0d, []int{19}
}

func (m *Transfer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transfer.Unmarshal(m, b)
}
func (m *Transfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transfer.Marshal(b, m, deterministic)
}
func (m *Transfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transfer.Merge(m, src)
}
func (m *Transfer) XXX_Size() int {
	return xxx_messageInfo_Transfer.Size(m)
}
func (m *Transfer) XXX_DiscardUnknown() {
	xxx_messageInfo_Transfer.DiscardUnknown(m)
}

var xxx_messageInfo_Transfer proto.InternalMessageInfo

func (m *Transfer) GetSender() uint64 {
	if m != nil {
		return m.Sender
	}
	return 0
}

func (m *Transfer) GetRecipient() uint64 {
	if m != nil {
		return m.Recipient
	}
	return 0
}

func (m *Transfer) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Transfer) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *Transfer) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *Transfer) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *Transfer) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Eth1Data struct {
	// The 32 byte deposit tree root for the last deposit included in this
	// block.
	DepositRoot []byte `protobuf:"bytes,1,opt,name=deposit_root,json=depositRoot,proto3" json:"deposit_root,omitempty"`
	// The total number of deposits included in the beacon chain since genesis
	// including the deposits in this block.
	DepositCount uint64 `protobuf:"varint,2,opt,name=deposit_count,json=depositCount,proto3" json:"deposit_count,omitempty"`
	// The 32 byte block hash of the Ethereum 1.x block considered for deposit
	// inclusion.
	BlockHash            []byte   `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Eth1Data) Reset()         { *m = Eth1Data{} }
func (m *Eth1Data) String() string { return proto.CompactTextString(m) }
func (*Eth1Data) ProtoMessage()    {}
func (*Eth1Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_e719e7d82cfa7b0d, []int{20}
}

func (m *Eth1Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Eth1Data.Unmarshal(m, b)
}
func (m *Eth1Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Eth1Data.Marshal(b, m, deterministic)
}
func (m *Eth1Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Eth1Data.Merge(m, src)
}
func (m *Eth1Data) XXX_Size() int {
	return xxx_messageInfo_Eth1Data.Size(m)
}
func (m *Eth1Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Eth1Data.DiscardUnknown(m)
}

var xxx_messageInfo_Eth1Data proto.InternalMessageInfo

func (m *Eth1Data) GetDepositRoot() []byte {
	if m != nil {
		return m.DepositRoot
	}
	return nil
}

func (m *Eth1Data) GetDepositCount() uint64 {
	if m != nil {
		return m.DepositCount
	}
	return 0
}

func (m *Eth1Data) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

type Eth1DataVote struct {
	Eth1Data *Eth1Data `protobuf:"bytes,1,opt,name=eth1_data,json=eth1Data,proto3" json:"eth1_data,omitempty"`
	// The total vote count of the Eth1DataVote.
	VoteCount            uint64   `protobuf:"varint,2,opt,name=vote_count,json=voteCount,proto3" json:"vote_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Eth1DataVote) Reset()         { *m = Eth1DataVote{} }
func (m *Eth1DataVote) String() string { return proto.CompactTextString(m) }
func (*Eth1DataVote) ProtoMessage()    {}
func (*Eth1DataVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_e719e7d82cfa7b0d, []int{21}
}

func (m *Eth1DataVote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Eth1DataVote.Unmarshal(m, b)
}
func (m *Eth1DataVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Eth1DataVote.Marshal(b, m, deterministic)
}
func (m *Eth1DataVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Eth1DataVote.Merge(m, src)
}
func (m *Eth1DataVote) XXX_Size() int {
	return xxx_messageInfo_Eth1DataVote.Size(m)
}
func (m *Eth1DataVote) XXX_DiscardUnknown() {
	xxx_messageInfo_Eth1DataVote.DiscardUnknown(m)
}

var xxx_messageInfo_Eth1DataVote proto.InternalMessageInfo

func (m *Eth1DataVote) GetEth1Data() *Eth1Data {
	if m != nil {
		return m.Eth1Data
	}
	return nil
}

func (m *Eth1DataVote) GetVoteCount() uint64 {
	if m != nil {
		return m.VoteCount
	}
	return 0
}

type HistoricalBatch struct {
	BlockRoots           [][]byte `protobuf:"bytes,1,rep,name=block_roots,json=blockRoots,proto3" json:"block_roots,omitempty"`
	StateRoots           [][]byte `protobuf:"bytes,2,rep,name=state_roots,json=stateRoots,proto3" json:"state_roots,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HistoricalBatch) Reset()         { *m = HistoricalBatch{} }
func (m *HistoricalBatch) String() string { return proto.CompactTextString(m) }
func (*HistoricalBatch) ProtoMessage()    {}
func (*HistoricalBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_e719e7d82cfa7b0d, []int{22}
}

func (m *HistoricalBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistoricalBatch.Unmarshal(m, b)
}
func (m *HistoricalBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistoricalBatch.Marshal(b, m, deterministic)
}
func (m *HistoricalBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoricalBatch.Merge(m, src)
}
func (m *HistoricalBatch) XXX_Size() int {
	return xxx_messageInfo_HistoricalBatch.Size(m)
}
func (m *HistoricalBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoricalBatch.DiscardUnknown(m)
}

var xxx_messageInfo_HistoricalBatch proto.InternalMessageInfo

func (m *HistoricalBatch) GetBlockRoots() [][]byte {
	if m != nil {
		return m.BlockRoots
	}
	return nil
}

func (m *HistoricalBatch) GetStateRoots() [][]byte {
	if m != nil {
		return m.StateRoots
	}
	return nil
}

type CompactCommittee struct {
	// The list of the validator public keys in the committee.
	Pubkeys [][]byte `protobuf:"bytes,1,rep,name=pubkeys,proto3" json:"pubkeys,omitempty"`
	// The list of the validator indices in the committee.
	CompactValidators    []uint64 `protobuf:"varint,2,rep,packed,name=compact_validators,json=compactValidators,proto3" json:"compact_validators,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CompactCommittee) Reset()         { *m = CompactCommittee{} }
func (m *CompactCommittee) String() string { return proto.CompactTextString(m) }
func (*CompactCommittee) ProtoMessage()    {}
func (*CompactCommittee) Descriptor() ([]byte, []int) {
	return fileDescriptor_e719e7d82cfa7b0d, []int{23}
}

func (m *CompactCommittee) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompactCommittee.Unmarshal(m, b)
}
func (m *CompactCommittee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompactCommittee.Marshal(b, m, deterministic)
}
func (m *CompactCommittee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactCommittee.Merge(m, src)
}
func (m *CompactCommittee) XXX_Size() int {
	return xxx_messageInfo_CompactCommittee.Size(m)
}
func (m *CompactCommittee) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactCommittee.DiscardUnknown(m)
}

var xxx_messageInfo_CompactCommittee proto.InternalMessageInfo

func (m *CompactCommittee) GetPubkeys() [][]byte {
	if m != nil {
		return m.Pubkeys
	}
	return nil
}

func (m *CompactCommittee) GetCompactValidators() []uint64 {
	if m != nil {
		return m.CompactValidators
	}
	return nil
}

func init() {
	proto.RegisterType((*BeaconState)(nil), "ethereum.beacon.p2p.v1.BeaconState")
	proto.RegisterType((*Fork)(nil), "ethereum.beacon.p2p.v1.Fork")
	proto.RegisterType((*PendingAttestation)(nil), "ethereum.beacon.p2p.v1.PendingAttestation")
	proto.RegisterType((*Attestation)(nil), "ethereum.beacon.p2p.v1.Attestation")
	proto.RegisterType((*Checkpoint)(nil), "ethereum.beacon.p2p.v1.Checkpoint")
	proto.RegisterType((*AttestationData)(nil), "ethereum.beacon.p2p.v1.AttestationData")
	proto.RegisterType((*AttestationTarget)(nil), "ethereum.beacon.p2p.v1.AttestationTarget")
	proto.RegisterType((*AttestationDataAndCustodyBit)(nil), "ethereum.beacon.p2p.v1.AttestationDataAndCustodyBit")
	proto.RegisterType((*IndexedAttestation)(nil), "ethereum.beacon.p2p.v1.IndexedAttestation")
	proto.RegisterType((*Validator)(nil), "ethereum.beacon.p2p.v1.Validator")
	proto.RegisterType((*Crosslink)(nil), "ethereum.beacon.p2p.v1.Crosslink")
	proto.RegisterType((*BeaconBlockHeader)(nil), "ethereum.beacon.p2p.v1.BeaconBlockHeader")
	proto.RegisterType((*BeaconBlock)(nil), "ethereum.beacon.p2p.v1.BeaconBlock")
	proto.RegisterType((*BeaconBlockBody)(nil), "ethereum.beacon.p2p.v1.BeaconBlockBody")
	proto.RegisterType((*DepositData)(nil), "ethereum.beacon.p2p.v1.DepositData")
	proto.RegisterType((*ProposerSlashing)(nil), "ethereum.beacon.p2p.v1.ProposerSlashing")
	proto.RegisterType((*AttesterSlashing)(nil), "ethereum.beacon.p2p.v1.AttesterSlashing")
	proto.RegisterType((*Deposit)(nil), "ethereum.beacon.p2p.v1.Deposit")
	proto.RegisterType((*VoluntaryExit)(nil), "ethereum.beacon.p2p.v1.VoluntaryExit")
	proto.RegisterType((*Transfer)(nil), "ethereum.beacon.p2p.v1.Transfer")
	proto.RegisterType((*Eth1Data)(nil), "ethereum.beacon.p2p.v1.Eth1Data")
	proto.RegisterType((*Eth1DataVote)(nil), "ethereum.beacon.p2p.v1.Eth1DataVote")
	proto.RegisterType((*HistoricalBatch)(nil), "ethereum.beacon.p2p.v1.HistoricalBatch")
	proto.RegisterType((*CompactCommittee)(nil), "ethereum.beacon.p2p.v1.CompactCommittee")
}

func init() { proto.RegisterFile("proto/beacon/p2p/v1/types.proto", fileDescriptor_e719e7d82cfa7b0d) }

var fileDescriptor_e719e7d82cfa7b0d = []byte{
	// 2223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x59, 0x4d, 0x8c, 0x1b, 0x49,
	0x15, 0x56, 0xcf, 0x78, 0x66, 0xec, 0x67, 0x4f, 0x6c, 0xd7, 0x64, 0x93, 0x26, 0x3f, 0x78, 0xe8,
	0x28, 0x4c, 0xb2, 0xec, 0xfc, 0xd8, 0x99, 0xcc, 0x4f, 0xc2, 0xee, 0x12, 0x4f, 0x26, 0x4a, 0x90,
	0x56, 0x8b, 0x3a, 0x51, 0x0e, 0x2b, 0x21, 0x53, 0x6e, 0x97, 0xed, 0x62, 0xda, 0xdd, 0x56, 0x57,
	0xd9, 0x9b, 0x89, 0x40, 0x2b, 0xc1, 0x69, 0xf9, 0x91, 0x90, 0x40, 0xe2, 0x0c, 0xe2, 0xc2, 0xcf,
	0x91, 0x0b, 0x70, 0x02, 0xc4, 0x89, 0xd3, 0x02, 0x17, 0xf6, 0xe0, 0x3b, 0x8b, 0x84, 0x84, 0x25,
	0x2e, 0x9c, 0x50, 0xfd, 0xf4, 0x8f, 0x1d, 0x7b, 0xc6, 0x13, 0x56, 0x5a, 0xed, 0xad, 0xbb, 0xea,
	0x7b, 0x5f, 0xd5, 0x7b, 0xfd, 0x5e, 0xbd, 0xf7, 0xaa, 0xa1, 0xd4, 0x0d, 0x7c, 0xee, 0x6f, 0xd6,
	0x09, 0x76, 0x7c, 0x6f, 0xb3, 0x5b, 0xe9, 0x6e, 0xf6, 0xcb, 0x9b, 0xfc, 0xb8, 0x4b, 0xd8, 0x86,
	0x9c, 0x41, 0x17, 0x08, 0x6f, 0x93, 0x80, 0xf4, 0x3a, 0x1b, 0x0a, 0xb3, 0xd1, 0xad, 0x74, 0x37,
	0xfa, 0xe5, 0x4b, 0xeb, 0x2d, 0xca, 0xdb, 0xbd, 0xfa, 0x86, 0xe3, 0x77, 0x36, 0x5b, 0x7e, 0xcb,
	0xdf, 0x94, 0xf0, 0x7a, 0xaf, 0x29, 0xdf, 0x14, 0xab, 0x78, 0x52, 0x34, 0xd6, 0xcf, 0xf2, 0x90,
	0xad, 0x4a, 0x82, 0xc7, 0x1c, 0x73, 0x82, 0x2c, 0xc8, 0xb5, 0x88, 0x47, 0x18, 0x65, 0x35, 0x4e,
	0x3b, 0xc4, 0xfc, 0xc7, 0xd2, 0xaa, 0x71, 0x23, 0x65, 0x67, 0xf5, 0xe0, 0x13, 0xda, 0x21, 0x68,
	0x05, 0x52, 0xcc, 0xf5, 0xb9, 0xf9, 0x91, 0x9a, 0x93, 0x2f, 0xa8, 0x0c, 0xa9, 0xa6, 0x1f, 0x1c,
	0x99, 0xff, 0x14, 0x83, 0xd9, 0xca, 0x95, 0x8d, 0xc9, 0xfb, 0xdb, 0x78, 0xe0, 0x07, 0x47, 0xb6,
	0x84, 0xa2, 0x77, 0x60, 0xc5, 0xc5, 0x9c, 0x30, 0x5e, 0xab, 0xbb, 0xbe, 0x73, 0x54, 0x6b, 0x13,
	0xdc, 0x20, 0x81, 0xf9, 0x41, 0x5e, 0x32, 0xdc, 0x9c, 0xc6, 0xa0, 0xb6, 0x5b, 0x15, 0x22, 0x0f,
	0xa5, 0x84, 0x5d, 0x54, 0x34, 0x89, 0x21, 0xb4, 0x07, 0x59, 0x45, 0x1a, 0xf8, 0x3e, 0x67, 0xe6,
	0x5f, 0xf2, 0xab, 0xf3, 0x37, 0x72, 0xd5, 0x0b, 0xc3, 0x41, 0x09, 0x31, 0xf6, 0x7c, 0x9d, 0xd1,
	0xe7, 0xe4, 0x8e, 0xb5, 0x57, 0xde, 0xaf, 0xbc, 0x76, 0xab, 0x62, 0xd9, 0x20, 0xb1, 0xb6, 0x80,
	0x0a, 0x49, 0x26, 0x4c, 0xa1, 0x25, 0xff, 0x7a, 0x8a, 0xa4, 0xc4, 0x2a, 0x49, 0x1b, 0x0a, 0x6d,
	0xca, 0xb8, 0x1f, 0x50, 0x07, 0xbb, 0x5a, 0xfc, 0x6f, 0x4a, 0xfc, 0xf3, 0xc3, 0x41, 0xc9, 0x8a,
	0xc5, 0xdf, 0x14, 0xb2, 0xab, 0xe2, 0xbd, 0x83, 0x9f, 0xdd, 0xb1, 0xca, 0x3b, 0xbb, 0xbb, 0xbb,
	0x95, 0xf2, 0x8e, 0x65, 0xe7, 0x63, 0x02, 0xc5, 0xf9, 0x06, 0x64, 0x08, 0x6f, 0x97, 0x6b, 0x0d,
	0xcc, 0xb1, 0xf9, 0x9b, 0x8b, 0xd2, 0x32, 0xab, 0xd3, 0x2c, 0x73, 0xc8, 0xdb, 0xe5, 0xfb, 0x98,
	0x63, 0x3b, 0x4d, 0xf4, 0x13, 0xfa, 0x2a, 0xe4, 0x23, 0xf9, 0x5a, 0xdf, 0xe7, 0x84, 0x99, 0xbf,
	0xbd, 0xb8, 0x3a, 0x3f, 0x0b, 0x4b, 0x15, 0x0d, 0x07, 0xa5, 0x73, 0xf1, 0x26, 0xb7, 0x2a, 0xdb,
	0x96, 0xbd, 0x1c, 0x32, 0x3f, 0x15, 0x5c, 0x68, 0x1d, 0x90, 0xa2, 0x27, 0x5d, 0x9f, 0x51, 0x5e,
	0xa3, 0x5e, 0x83, 0x3c, 0x33, 0x7f, 0x77, 0x51, 0x3a, 0x46, 0x41, 0x62, 0xd5, 0xcc, 0x23, 0x31,
	0x81, 0x6a, 0x00, 0x7d, 0xec, 0xd2, 0x06, 0xe6, 0x7e, 0xc0, 0xcc, 0x9f, 0x94, 0xe4, 0x46, 0x3e,
	0x37, 0x6d, 0x23, 0x4f, 0x43, 0x68, 0xf5, 0xf2, 0x70, 0x50, 0xba, 0x98, 0xd8, 0xc9, 0xfe, 0xfe,
	0xed, 0x72, 0x79, 0xa7, 0xb2, 0xbb, 0xbb, 0xbb, 0x63, 0xd9, 0x09, 0x4a, 0xb4, 0x07, 0xe9, 0x3a,
	0x76, 0xb1, 0xe7, 0x10, 0x66, 0xfe, 0x54, 0xd0, 0xa7, 0x4e, 0x96, 0x8d, 0xd0, 0x68, 0x55, 0x7e,
	0xf6, 0x80, 0xd7, 0x58, 0x1b, 0x07, 0x0d, 0xf3, 0xfd, 0x35, 0xa9, 0x02, 0xc8, 0xb1, 0xc7, 0x62,
	0x08, 0xdd, 0x85, 0x5c, 0x80, 0xbd, 0x06, 0xf6, 0x6b, 0x1d, 0xfa, 0x8c, 0x30, 0xf3, 0x3b, 0x6b,
	0xf2, 0xd3, 0x5e, 0x1c, 0x0e, 0x4a, 0x2b, 0xf1, 0xa7, 0xdd, 0xb9, 0x7d, 0xfb, 0xd6, 0x8e, 0x74,
	0x8d, 0xac, 0x42, 0xbf, 0x25, 0xc0, 0xe8, 0x01, 0x20, 0xec, 0x70, 0xda, 0x27, 0xca, 0x44, 0xda,
	0x3b, 0xbe, 0x7b, 0x0a, 0x45, 0x41, 0xc9, 0x48, 0xe3, 0x85, 0x3e, 0x66, 0x3a, 0x7e, 0xa7, 0x8b,
	0x1d, 0x5e, 0x73, 0xfc, 0x4e, 0x87, 0x72, 0x4e, 0x08, 0xd3, 0x6c, 0xdf, 0x3b, 0x85, 0xed, 0x82,
	0x96, 0x3c, 0x88, 0x04, 0x15, 0x67, 0x05, 0x32, 0xcc, 0xc5, 0xac, 0x4d, 0xbd, 0x16, 0x33, 0xff,
	0xbd, 0x21, 0xad, 0xb6, 0x32, 0x1c, 0x94, 0xf2, 0xa3, 0xfe, 0x6e, 0xd9, 0x31, 0x0c, 0xbd, 0x07,
	0x97, 0xbb, 0x01, 0xe9, 0x53, 0xbf, 0xc7, 0x6a, 0xa4, 0xeb, 0x3b, 0xed, 0x1a, 0xe6, 0x22, 0x06,
	0x31, 0xa7, 0xbe, 0xc7, 0xcc, 0xbf, 0xef, 0xc8, 0x4f, 0xfb, 0xea, 0xb4, 0x4f, 0xfb, 0x15, 0xe2,
	0x35, 0xa8, 0xd7, 0xba, 0x17, 0xcb, 0x8c, 0x79, 0x9b, 0x5a, 0xf0, 0x33, 0xe1, 0x1a, 0x87, 0x62,
	0x89, 0x04, 0x9a, 0xa1, 0x6f, 0xc2, 0x25, 0xa7, 0x17, 0x04, 0xc4, 0xe3, 0x93, 0xd6, 0xff, 0xf0,
	0xe3, 0x59, 0xdf, 0xd4, 0x4b, 0xbc, 0xb8, 0x7c, 0x1b, 0x56, 0x22, 0xfd, 0x9d, 0xc0, 0x67, 0xcc,
	0xa5, 0xde, 0x11, 0x33, 0x7f, 0xff, 0xc6, 0xc9, 0x2e, 0x7d, 0x10, 0x42, 0xc7, 0x0d, 0xac, 0xa2,
	0x0b, 0x85, 0x9c, 0x11, 0x8e, 0xa1, 0x26, 0xa0, 0x50, 0xd1, 0xc4, 0x42, 0x7f, 0xf8, 0xff, 0x16,
	0x2a, 0x6a, 0xca, 0xc4, 0x3a, 0x0c, 0xd0, 0xd7, 0x7b, 0x8c, 0xd3, 0x26, 0x75, 0xa4, 0x8e, 0xb5,
	0x3a, 0xe5, 0xcc, 0xfc, 0xf9, 0x83, 0x55, 0xe3, 0x46, 0xae, 0x7a, 0x30, 0x1c, 0x94, 0x72, 0x09,
	0x12, 0xeb, 0xbf, 0x83, 0xd2, 0x66, 0x22, 0xd3, 0x74, 0x83, 0x63, 0xd6, 0xc1, 0x9c, 0x3a, 0x2e,
	0xae, 0xb3, 0xcd, 0x96, 0xbf, 0x5e, 0xa7, 0xbc, 0x49, 0x89, 0xdb, 0xd8, 0xa8, 0x52, 0xde, 0x27,
	0x0e, 0xf7, 0x83, 0x6d, 0xbb, 0x38, 0xc2, 0x5f, 0xa5, 0x9c, 0xa1, 0x16, 0x5c, 0x8d, 0xcc, 0xa8,
	0x67, 0x49, 0xa3, 0xe6, 0xb4, 0x89, 0x73, 0xd4, 0xf5, 0xa9, 0xc7, 0xcd, 0x5f, 0x3c, 0x90, 0x47,
	0x9e, 0x35, 0x55, 0xcf, 0x08, 0x6a, 0x47, 0x0e, 0xf9, 0xe5, 0x90, 0x28, 0x9e, 0x44, 0x04, 0xae,
	0x84, 0x56, 0x9c, 0xb8, 0xce, 0x2f, 0x67, 0x5f, 0x27, 0xf4, 0xbb, 0x49, 0xcb, 0x3c, 0x85, 0xf3,
	0x4d, 0xea, 0x61, 0x97, 0x3e, 0x1f, 0xa5, 0xff, 0xd5, 0xec, 0xf4, 0x2b, 0x11, 0x41, 0x3c, 0x68,
	0xfd, 0xc8, 0x80, 0x94, 0xc8, 0x9c, 0xe8, 0x2e, 0x14, 0x22, 0x83, 0xf5, 0x49, 0xc0, 0xa8, 0xef,
	0x99, 0x86, 0xfc, 0x44, 0x85, 0xd1, 0x4f, 0xb4, 0x6d, 0xd9, 0xf9, 0x10, 0xf9, 0x54, 0x01, 0xd1,
	0x3e, 0xe4, 0x43, 0x23, 0x84, 0xb2, 0x73, 0x53, 0x64, 0xcf, 0x69, 0x60, 0x28, 0x7a, 0x1e, 0x16,
	0x64, 0x98, 0x99, 0xf3, 0xf2, 0x5c, 0x54, 0x2f, 0xd6, 0x0f, 0xe6, 0x00, 0xbd, 0x18, 0x4a, 0xa8,
	0x03, 0x05, 0xdc, 0x6a, 0x05, 0xa4, 0x95, 0x70, 0x24, 0xb5, 0xc9, 0xea, 0x48, 0x90, 0x6d, 0x6f,
	0xed, 0xef, 0x08, 0x4f, 0x7a, 0x6d, 0x56, 0x4f, 0x72, 0x29, 0xe3, 0x76, 0x3e, 0xc1, 0x2d, 0x9d,
	0xe8, 0x2e, 0xa4, 0x64, 0x7a, 0x9c, 0x93, 0x36, 0x5e, 0x9b, 0x66, 0xe3, 0xc4, 0x0e, 0x65, 0x92,
	0x94, 0x42, 0x68, 0x0d, 0xf2, 0xd4, 0x73, 0xdc, 0x9e, 0xd0, 0xb2, 0xd6, 0x20, 0x2e, 0x3e, 0xd6,
	0x2a, 0x9e, 0x8b, 0x86, 0xef, 0x8b, 0x51, 0x74, 0x1d, 0xce, 0x75, 0x03, 0xbf, 0xeb, 0x33, 0x12,
	0xe8, 0x34, 0x97, 0x92, 0xb8, 0xe5, 0x70, 0x54, 0x9e, 0xd2, 0xd6, 0x07, 0x73, 0x90, 0xfd, 0xb4,
	0xda, 0x82, 0x40, 0xce, 0xe9, 0x31, 0xee, 0x37, 0x8e, 0xd5, 0x3e, 0xe7, 0x3f, 0xb6, 0x7d, 0x66,
	0x35, 0xaf, 0xdc, 0xe3, 0x26, 0x64, 0x18, 0x6d, 0x79, 0x98, 0xf7, 0x02, 0x22, 0x8d, 0x98, 0xab,
	0x16, 0x87, 0x83, 0xd2, 0x72, 0xec, 0x80, 0xfb, 0x3b, 0x22, 0xd9, 0x84, 0x18, 0xeb, 0x11, 0x40,
	0x22, 0xc6, 0x22, 0x57, 0x34, 0x12, 0xae, 0x88, 0xae, 0x43, 0x4a, 0x64, 0x41, 0xed, 0xd0, 0x63,
	0x7c, 0x22, 0xfb, 0xc9, 0x69, 0xeb, 0xfd, 0x39, 0xc8, 0x8f, 0x29, 0x8f, 0x5e, 0x87, 0xa2, 0xb2,
	0x4e, 0x2d, 0x2e, 0x19, 0xf5, 0x37, 0x9a, 0xc0, 0x93, 0xaf, 0xc7, 0xf5, 0xa7, 0xc8, 0x9f, 0xe8,
	0x0e, 0x2c, 0x32, 0xbf, 0x17, 0x38, 0x44, 0x1b, 0x7d, 0x96, 0x20, 0xd7, 0x12, 0x42, 0x96, 0xe3,
	0xa0, 0x45, 0xb8, 0xb4, 0xf5, 0x8c, 0xb2, 0x4a, 0x02, 0xbd, 0x09, 0x99, 0x28, 0x21, 0x48, 0x33,
	0xce, 0x92, 0x0e, 0xec, 0x58, 0xc6, 0xfa, 0xbe, 0x01, 0xc5, 0x84, 0x2d, 0x9e, 0x28, 0x5a, 0xa4,
	0xab, 0x7b, 0x23, 0x51, 0xdc, 0x6f, 0x01, 0x24, 0x4c, 0x33, 0xd5, 0xc4, 0x99, 0xa8, 0x8c, 0x46,
	0x15, 0xc8, 0x76, 0xb1, 0x3c, 0x69, 0xa4, 0xc8, 0xfc, 0x34, 0x11, 0x50, 0x28, 0x21, 0x63, 0x7d,
	0x03, 0xae, 0x8c, 0x7d, 0x9a, 0x7b, 0x5e, 0xe3, 0x20, 0x72, 0x9c, 0xc8, 0xb7, 0x8d, 0x97, 0xf1,
	0xed, 0x12, 0x64, 0x13, 0xbe, 0x2d, 0x75, 0x48, 0xdb, 0x10, 0xbb, 0xa5, 0x3c, 0xcb, 0x64, 0x08,
	0x93, 0x46, 0x32, 0x7e, 0x0f, 0xe1, 0x95, 0x84, 0x5c, 0x6d, 0x4b, 0xc4, 0x3e, 0x15, 0xe5, 0xa5,
	0x21, 0xeb, 0x24, 0xf4, 0x62, 0x70, 0xd8, 0x28, 0x66, 0xdd, 0x7a, 0xa4, 0xd0, 0xe3, 0x34, 0xe5,
	0x88, 0x66, 0x6e, 0x16, 0x9a, 0x72, 0x48, 0x13, 0x9a, 0x60, 0xfe, 0x65, 0x4c, 0x70, 0xe6, 0xb8,
	0xfb, 0xd6, 0x3c, 0x64, 0xa2, 0x22, 0x1c, 0xdd, 0x84, 0xc5, 0x6e, 0xaf, 0x7e, 0x44, 0x8e, 0x27,
	0xc7, 0xc6, 0xf6, 0x9e, 0x65, 0x6b, 0x00, 0x7a, 0x08, 0x17, 0xde, 0xa5, 0xbc, 0xdd, 0x08, 0xf0,
	0xbb, 0xd8, 0xad, 0x39, 0x01, 0x69, 0x10, 0x8f, 0x53, 0xec, 0xb2, 0xe9, 0xbe, 0xf3, 0x4a, 0x2c,
	0x70, 0x10, 0xe3, 0xd1, 0x17, 0xa0, 0x48, 0x9a, 0x4d, 0xa2, 0x4a, 0x67, 0x5d, 0xac, 0xeb, 0x03,
	0xba, 0x10, 0x4d, 0x54, 0xd5, 0x38, 0x32, 0x61, 0x49, 0x56, 0xa8, 0xa4, 0x21, 0xd5, 0x4b, 0xdb,
	0xe1, 0x2b, 0xfa, 0x12, 0x5c, 0x91, 0xa5, 0xb4, 0x3a, 0x84, 0x89, 0x4b, 0x5b, 0xb4, 0x4e, 0x5d,
	0xca, 0x8f, 0x55, 0xf1, 0x68, 0x2e, 0x48, 0xc6, 0x4b, 0x31, 0xe6, 0x30, 0x86, 0xc8, 0xe2, 0x0f,
	0xdd, 0x84, 0x42, 0x92, 0x41, 0x4a, 0x2d, 0x4a, 0xa9, 0x7c, 0x42, 0x4a, 0x42, 0xaf, 0x02, 0x90,
	0x67, 0x54, 0xd7, 0xa5, 0xa6, 0x6a, 0x92, 0x33, 0x62, 0x44, 0x4d, 0xaf, 0x03, 0x8a, 0x74, 0xad,
	0xbb, 0x44, 0xc3, 0xd2, 0x12, 0x56, 0x4c, 0xce, 0x48, 0xb8, 0xf5, 0x47, 0x03, 0x32, 0x51, 0xf8,
	0x8a, 0xc3, 0x4f, 0x35, 0x28, 0xfa, 0xf0, 0x93, 0x2f, 0xe3, 0xd1, 0x36, 0x37, 0x43, 0xb4, 0x89,
	0x80, 0x50, 0x0d, 0x4f, 0x32, 0xaf, 0xab, 0x7e, 0x47, 0xed, 0xf3, 0x32, 0x64, 0x88, 0xd7, 0xd0,
	0xd3, 0x2a, 0xd7, 0xa5, 0x89, 0xd7, 0x50, 0x93, 0x1b, 0x90, 0x91, 0x2d, 0xa5, 0x5c, 0x6f, 0x61,
	0xda, 0x7a, 0x69, 0x81, 0x91, 0xb1, 0xfd, 0x2f, 0x03, 0x8a, 0x2f, 0x34, 0xee, 0x13, 0xcf, 0x9a,
	0x97, 0xd1, 0x65, 0x0b, 0x20, 0xee, 0xd9, 0xa7, 0x1f, 0x36, 0x99, 0xa8, 0x59, 0x17, 0xfb, 0xaf,
	0x8b, 0x60, 0x94, 0x02, 0xa9, 0xa9, 0xfb, 0x17, 0x18, 0x89, 0x1f, 0x89, 0x9d, 0x85, 0x19, 0x62,
	0xe7, 0x3f, 0x46, 0x78, 0xb1, 0x22, 0x15, 0xfe, 0x04, 0x55, 0xbd, 0x0b, 0x29, 0xa1, 0x86, 0x4e,
	0x11, 0x6b, 0x33, 0x5c, 0xab, 0x54, 0x85, 0xd6, 0x52, 0xe8, 0xec, 0x7a, 0x7f, 0xb4, 0x00, 0xf9,
	0x31, 0x2a, 0xb4, 0x03, 0xcb, 0xba, 0x73, 0x0e, 0x48, 0x9f, 0x60, 0x77, 0xf2, 0x01, 0x22, 0x88,
	0x74, 0x87, 0x6d, 0x4b, 0x18, 0x7a, 0x3d, 0x79, 0xf9, 0x31, 0x77, 0xe6, 0xbb, 0x8f, 0x75, 0x48,
	0xb7, 0x02, 0xdc, 0x6c, 0x52, 0x4e, 0xa7, 0x1b, 0x2a, 0x82, 0x20, 0x0a, 0x28, 0x2a, 0xf0, 0xe2,
	0x7e, 0x38, 0x25, 0xfb, 0xac, 0x1b, 0x53, 0x1b, 0x49, 0x2d, 0xf1, 0x58, 0x0b, 0xc4, 0xa5, 0xb4,
	0xbe, 0xd9, 0xb1, 0xec, 0x62, 0x77, 0x0c, 0x23, 0xba, 0x47, 0xa4, 0xda, 0xd5, 0x91, 0xa5, 0x16,
	0x4e, 0x5e, 0xea, 0x9e, 0x96, 0x88, 0x96, 0xca, 0x0f, 0x07, 0xa5, 0x6c, 0xbc, 0x94, 0x65, 0x17,
	0xf1, 0x18, 0x84, 0xa1, 0x77, 0x20, 0x37, 0xd2, 0x18, 0x2f, 0xca, 0x35, 0xae, 0xcd, 0x90, 0x38,
	0x62, 0x63, 0x29, 0xfa, 0xca, 0x9e, 0x65, 0x8f, 0x70, 0xa1, 0xb7, 0x20, 0xad, 0xef, 0x7d, 0x98,
	0xb9, 0x24, 0x79, 0x4b, 0xd3, 0x78, 0xf5, 0x2d, 0xd0, 0x04, 0xeb, 0x44, 0x14, 0xe8, 0x6b, 0x90,
	0xef, 0xfb, 0x6e, 0xcf, 0xe3, 0x38, 0x38, 0xae, 0x89, 0xe3, 0x92, 0x99, 0x69, 0xc9, 0x7a, 0x7d,
	0xea, 0x05, 0x51, 0x08, 0x3f, 0x7c, 0x36, 0x91, 0xfb, 0x5c, 0x3f, 0x09, 0x60, 0xe8, 0x6d, 0xc8,
	0xf0, 0x00, 0x7b, 0xac, 0x49, 0x02, 0x66, 0x66, 0x4e, 0xbe, 0x05, 0x7b, 0xa2, 0x81, 0x63, 0x56,
	0xde, 0xb2, 0xec, 0x98, 0xc3, 0xfa, 0xb3, 0x01, 0x59, 0xad, 0x9a, 0xf4, 0xb8, 0x4f, 0x24, 0x45,
	0x5e, 0x80, 0x45, 0xdc, 0xf1, 0x7b, 0x1e, 0xd7, 0x67, 0xb8, 0x7e, 0x3b, 0x7b, 0xba, 0xff, 0x93,
	0x01, 0x85, 0x71, 0x7f, 0x9e, 0xd0, 0xf6, 0x18, 0x13, 0xda, 0x1e, 0x74, 0x1f, 0xd2, 0xea, 0xfa,
	0xb6, 0x56, 0xd6, 0x91, 0x7a, 0x86, 0xfb, 0xdb, 0x25, 0x25, 0x5a, 0x4e, 0xb0, 0x54, 0x74, 0x89,
	0x73, 0x76, 0x96, 0x8a, 0xf5, 0x6b, 0x03, 0x0a, 0xe3, 0xc1, 0x82, 0xde, 0x86, 0xe5, 0x84, 0xf3,
	0xd6, 0xca, 0xba, 0x8a, 0x9c, 0x7a, 0x43, 0xf4, 0x62, 0x29, 0x38, 0xe2, 0xfd, 0xe5, 0x71, 0xc2,
	0x8a, 0x56, 0xfb, 0x65, 0x09, 0x2b, 0x96, 0x07, 0x4b, 0xda, 0x97, 0xd0, 0xab, 0xb0, 0xd0, 0x0d,
	0x7c, 0xbf, 0x29, 0x8b, 0xcc, 0x5c, 0xf5, 0xfc, 0x70, 0x50, 0x2a, 0x24, 0x7c, 0xe1, 0x96, 0xbc,
	0xce, 0x53, 0x10, 0xb4, 0x3b, 0x52, 0x12, 0x5e, 0x3b, 0x25, 0x02, 0xe3, 0x72, 0xd0, 0x7a, 0x0f,
	0x96, 0x47, 0x02, 0x68, 0x4a, 0x63, 0xb5, 0x06, 0xf9, 0xe8, 0x82, 0x55, 0x7b, 0xc0, 0x9c, 0x6a,
	0x90, 0xa3, 0x61, 0xe5, 0x02, 0x23, 0xfe, 0x36, 0x3f, 0x83, 0xbf, 0x7d, 0x68, 0x40, 0x3a, 0x0c,
	0x33, 0xe1, 0xc5, 0x8c, 0x78, 0x0d, 0x12, 0xe8, 0xd5, 0xf5, 0x1b, 0xba, 0x02, 0x99, 0x80, 0x38,
	0xb4, 0x4b, 0x89, 0xc7, 0xf5, 0xc2, 0xf1, 0xc0, 0x54, 0xdf, 0x2f, 0xc0, 0x7c, 0x93, 0x10, 0x5d,
	0xb5, 0x88, 0xc7, 0x28, 0xff, 0x2e, 0x24, 0xf2, 0x6f, 0x1c, 0xae, 0x8b, 0xa7, 0x85, 0xeb, 0x88,
	0x72, 0x4b, 0x33, 0x28, 0xf7, 0x63, 0x03, 0xd2, 0x61, 0x4e, 0x42, 0xdb, 0x90, 0x0b, 0x6f, 0xc8,
	0x4f, 0x6e, 0x2e, 0xb3, 0x1a, 0x26, 0x13, 0xf7, 0x35, 0x58, 0x0e, 0xa5, 0x1c, 0xa9, 0xa3, 0x52,
	0x3f, 0xa4, 0x3a, 0x90, 0x9a, 0x46, 0xad, 0x59, 0x1b, 0xb3, 0xf6, 0x09, 0xf5, 0x80, 0x04, 0x3d,
	0xc4, 0xac, 0x6d, 0xb9, 0x90, 0x3b, 0x4c, 0x5c, 0xe2, 0x8f, 0x66, 0x59, 0xe3, 0xcc, 0x59, 0xf6,
	0x2a, 0x40, 0xdf, 0xe7, 0x64, 0x64, 0x8b, 0x19, 0x31, 0x22, 0xf7, 0x67, 0x7d, 0xdb, 0x80, 0xfc,
	0xc3, 0xe8, 0xa7, 0x46, 0x15, 0x73, 0xa7, 0x8d, 0x76, 0x47, 0x7f, 0xce, 0x18, 0x33, 0xff, 0x9b,
	0xd9, 0x1d, 0xfd, 0x37, 0x33, 0x37, 0xeb, 0xaf, 0x19, 0xeb, 0x87, 0x06, 0x14, 0x0e, 0xc6, 0x6e,
	0xbf, 0xd1, 0x17, 0x61, 0x49, 0x7d, 0xdd, 0x70, 0x0b, 0xd6, 0x70, 0x50, 0xfa, 0x6c, 0xf2, 0x2f,
	0xcd, 0xf6, 0x5e, 0xe2, 0x2f, 0x8d, 0xea, 0xca, 0x42, 0x11, 0x74, 0x0f, 0x50, 0x78, 0x13, 0x9f,
	0xf8, 0xa7, 0x31, 0xbd, 0x9d, 0x2b, 0x6a, 0x74, 0xd4, 0x50, 0xb1, 0xfa, 0xa2, 0xfc, 0x07, 0x77,
	0xeb, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x4b, 0xd0, 0x5d, 0xed, 0x1b, 0x00, 0x00,
}
