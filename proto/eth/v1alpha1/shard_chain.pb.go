// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/eth/v1alpha1/shard_chain.proto

package eth

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_prysmaticlabs_go_bitfield "github.com/prysmaticlabs/go-bitfield"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ShardBlockWrapper struct {
	ShardParentRoot      []byte   `protobuf:"bytes,1,opt,name=shard_parent_root,json=shardParentRoot,proto3" json:"shard_parent_root,omitempty" ssz-size:"32"`
	BeaconParentRoot     []byte   `protobuf:"bytes,2,opt,name=beacon_parent_root,json=beaconParentRoot,proto3" json:"beacon_parent_root,omitempty" ssz-size:"32"`
	Slot                 uint64   `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`
	Body                 [][]byte `protobuf:"bytes,4,rep,name=body,proto3" json:"body,omitempty"`
	Signature            []byte   `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty" ssz-size:"96"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShardBlockWrapper) Reset()         { *m = ShardBlockWrapper{} }
func (m *ShardBlockWrapper) String() string { return proto.CompactTextString(m) }
func (*ShardBlockWrapper) ProtoMessage()    {}
func (*ShardBlockWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f64254e4dc61453, []int{0}
}
func (m *ShardBlockWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardBlockWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardBlockWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardBlockWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardBlockWrapper.Merge(m, src)
}
func (m *ShardBlockWrapper) XXX_Size() int {
	return m.Size()
}
func (m *ShardBlockWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardBlockWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_ShardBlockWrapper proto.InternalMessageInfo

func (m *ShardBlockWrapper) GetShardParentRoot() []byte {
	if m != nil {
		return m.ShardParentRoot
	}
	return nil
}

func (m *ShardBlockWrapper) GetBeaconParentRoot() []byte {
	if m != nil {
		return m.BeaconParentRoot
	}
	return nil
}

func (m *ShardBlockWrapper) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *ShardBlockWrapper) GetBody() [][]byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *ShardBlockWrapper) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ShardSignableHeader struct {
	ShardParentRoot      []byte   `protobuf:"bytes,1,opt,name=shard_parent_root,json=shardParentRoot,proto3" json:"shard_parent_root,omitempty" ssz-size:"32"`
	BeaconParentRoot     []byte   `protobuf:"bytes,2,opt,name=beacon_parent_root,json=beaconParentRoot,proto3" json:"beacon_parent_root,omitempty" ssz-size:"32"`
	Slot                 uint64   `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`
	BodyRoot             []byte   `protobuf:"bytes,4,opt,name=body_root,json=bodyRoot,proto3" json:"body_root,omitempty" ssz-size:"32"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShardSignableHeader) Reset()         { *m = ShardSignableHeader{} }
func (m *ShardSignableHeader) String() string { return proto.CompactTextString(m) }
func (*ShardSignableHeader) ProtoMessage()    {}
func (*ShardSignableHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f64254e4dc61453, []int{1}
}
func (m *ShardSignableHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardSignableHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardSignableHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardSignableHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardSignableHeader.Merge(m, src)
}
func (m *ShardSignableHeader) XXX_Size() int {
	return m.Size()
}
func (m *ShardSignableHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardSignableHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ShardSignableHeader proto.InternalMessageInfo

func (m *ShardSignableHeader) GetShardParentRoot() []byte {
	if m != nil {
		return m.ShardParentRoot
	}
	return nil
}

func (m *ShardSignableHeader) GetBeaconParentRoot() []byte {
	if m != nil {
		return m.BeaconParentRoot
	}
	return nil
}

func (m *ShardSignableHeader) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *ShardSignableHeader) GetBodyRoot() []byte {
	if m != nil {
		return m.BodyRoot
	}
	return nil
}

type ShardState struct {
	Slot                 uint64   `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	GasPrice             uint64   `protobuf:"varint,2,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty" ssz-size:"32"`
	LatestBlockRoot      []byte   `protobuf:"bytes,4,opt,name=latest_block_root,json=latestBlockRoot,proto3" json:"latest_block_root,omitempty" ssz-size:"32"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShardState) Reset()         { *m = ShardState{} }
func (m *ShardState) String() string { return proto.CompactTextString(m) }
func (*ShardState) ProtoMessage()    {}
func (*ShardState) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f64254e4dc61453, []int{2}
}
func (m *ShardState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardState.Merge(m, src)
}
func (m *ShardState) XXX_Size() int {
	return m.Size()
}
func (m *ShardState) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardState.DiscardUnknown(m)
}

var xxx_messageInfo_ShardState proto.InternalMessageInfo

func (m *ShardState) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *ShardState) GetGasPrice() uint64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func (m *ShardState) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ShardState) GetLatestBlockRoot() []byte {
	if m != nil {
		return m.LatestBlockRoot
	}
	return nil
}

type ShardTransition struct {
	StartSlot                  uint64        `protobuf:"varint,1,opt,name=start_slot,json=startSlot,proto3" json:"start_slot,omitempty"`
	ShardBlockLengths          []uint64      `protobuf:"varint,2,rep,packed,name=shard_block_lengths,json=shardBlockLengths,proto3" json:"shard_block_lengths,omitempty" ssz-max:"2048"`
	ShardDataRoots             [][]byte      `protobuf:"bytes,3,rep,name=shard_data_roots,json=shardDataRoots,proto3" json:"shard_data_roots,omitempty"`
	ShardStates                []*ShardState `protobuf:"bytes,4,rep,name=shard_states,json=shardStates,proto3" json:"shard_states,omitempty"`
	ProposerSignatureAggregate []byte        `protobuf:"bytes,5,opt,name=proposer_signature_aggregate,json=proposerSignatureAggregate,proto3" json:"proposer_signature_aggregate,omitempty" ssz-size:"96"`
	XXX_NoUnkeyedLiteral       struct{}      `json:"-"`
	XXX_unrecognized           []byte        `json:"-"`
	XXX_sizecache              int32         `json:"-"`
}

func (m *ShardTransition) Reset()         { *m = ShardTransition{} }
func (m *ShardTransition) String() string { return proto.CompactTextString(m) }
func (*ShardTransition) ProtoMessage()    {}
func (*ShardTransition) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f64254e4dc61453, []int{3}
}
func (m *ShardTransition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardTransition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardTransition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardTransition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardTransition.Merge(m, src)
}
func (m *ShardTransition) XXX_Size() int {
	return m.Size()
}
func (m *ShardTransition) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardTransition.DiscardUnknown(m)
}

var xxx_messageInfo_ShardTransition proto.InternalMessageInfo

func (m *ShardTransition) GetStartSlot() uint64 {
	if m != nil {
		return m.StartSlot
	}
	return 0
}

func (m *ShardTransition) GetShardBlockLengths() []uint64 {
	if m != nil {
		return m.ShardBlockLengths
	}
	return nil
}

func (m *ShardTransition) GetShardDataRoots() [][]byte {
	if m != nil {
		return m.ShardDataRoots
	}
	return nil
}

func (m *ShardTransition) GetShardStates() []*ShardState {
	if m != nil {
		return m.ShardStates
	}
	return nil
}

func (m *ShardTransition) GetProposerSignatureAggregate() []byte {
	if m != nil {
		return m.ProposerSignatureAggregate
	}
	return nil
}

type ShardAttestationData struct {
	Slot                 uint64           `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	Index                uint64           `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	BeaconBlockRoot      []byte           `protobuf:"bytes,3,opt,name=beacon_block_root,json=beaconBlockRoot,proto3" json:"beacon_block_root,omitempty" ssz-size:"32"`
	Source               *ShardCheckpoint `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	Target               *ShardCheckpoint `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
	HeadShardRoot        []byte           `protobuf:"bytes,6,opt,name=head_shard_root,json=headShardRoot,proto3" json:"head_shard_root,omitempty" ssz-size:"32"`
	ShardTransitionRoot  []byte           `protobuf:"bytes,7,opt,name=shard_transition_root,json=shardTransitionRoot,proto3" json:"shard_transition_root,omitempty" ssz-size:"32"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ShardAttestationData) Reset()         { *m = ShardAttestationData{} }
func (m *ShardAttestationData) String() string { return proto.CompactTextString(m) }
func (*ShardAttestationData) ProtoMessage()    {}
func (*ShardAttestationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f64254e4dc61453, []int{4}
}
func (m *ShardAttestationData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardAttestationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardAttestationData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardAttestationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardAttestationData.Merge(m, src)
}
func (m *ShardAttestationData) XXX_Size() int {
	return m.Size()
}
func (m *ShardAttestationData) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardAttestationData.DiscardUnknown(m)
}

var xxx_messageInfo_ShardAttestationData proto.InternalMessageInfo

func (m *ShardAttestationData) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *ShardAttestationData) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ShardAttestationData) GetBeaconBlockRoot() []byte {
	if m != nil {
		return m.BeaconBlockRoot
	}
	return nil
}

func (m *ShardAttestationData) GetSource() *ShardCheckpoint {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *ShardAttestationData) GetTarget() *ShardCheckpoint {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *ShardAttestationData) GetHeadShardRoot() []byte {
	if m != nil {
		return m.HeadShardRoot
	}
	return nil
}

func (m *ShardAttestationData) GetShardTransitionRoot() []byte {
	if m != nil {
		return m.ShardTransitionRoot
	}
	return nil
}

type ShardAttestation struct {
	AggregationBits      github_com_prysmaticlabs_go_bitfield.Bitlist `protobuf:"bytes,1,opt,name=aggregation_bits,json=aggregationBits,proto3,casttype=github.com/prysmaticlabs/go-bitfield.Bitlist" json:"aggregation_bits,omitempty" ssz-max:"2048"`
	Data                 *ShardAttestationData                        `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	CustodyBits          github_com_prysmaticlabs_go_bitfield.Bitlist `protobuf:"bytes,3,opt,name=custody_bits,json=custodyBits,proto3,casttype=github.com/prysmaticlabs/go-bitfield.Bitlist" json:"custody_bits,omitempty" ssz-max:"2048"`
	Signature            []byte                                       `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty" ssz-size:"96"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *ShardAttestation) Reset()         { *m = ShardAttestation{} }
func (m *ShardAttestation) String() string { return proto.CompactTextString(m) }
func (*ShardAttestation) ProtoMessage()    {}
func (*ShardAttestation) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f64254e4dc61453, []int{5}
}
func (m *ShardAttestation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardAttestation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardAttestation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardAttestation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardAttestation.Merge(m, src)
}
func (m *ShardAttestation) XXX_Size() int {
	return m.Size()
}
func (m *ShardAttestation) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardAttestation.DiscardUnknown(m)
}

var xxx_messageInfo_ShardAttestation proto.InternalMessageInfo

func (m *ShardAttestation) GetAggregationBits() github_com_prysmaticlabs_go_bitfield.Bitlist {
	if m != nil {
		return m.AggregationBits
	}
	return nil
}

func (m *ShardAttestation) GetData() *ShardAttestationData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ShardAttestation) GetCustodyBits() github_com_prysmaticlabs_go_bitfield.Bitlist {
	if m != nil {
		return m.CustodyBits
	}
	return nil
}

func (m *ShardAttestation) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type AttestationAndCommittee struct {
	Committee            []uint64          `protobuf:"varint,1,rep,packed,name=committee,proto3" json:"committee,omitempty" ssz-max:"2048"`
	Attestation          *ShardAttestation `protobuf:"bytes,2,opt,name=attestation,proto3" json:"attestation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AttestationAndCommittee) Reset()         { *m = AttestationAndCommittee{} }
func (m *AttestationAndCommittee) String() string { return proto.CompactTextString(m) }
func (*AttestationAndCommittee) ProtoMessage()    {}
func (*AttestationAndCommittee) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f64254e4dc61453, []int{6}
}
func (m *AttestationAndCommittee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttestationAndCommittee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttestationAndCommittee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttestationAndCommittee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestationAndCommittee.Merge(m, src)
}
func (m *AttestationAndCommittee) XXX_Size() int {
	return m.Size()
}
func (m *AttestationAndCommittee) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestationAndCommittee.DiscardUnknown(m)
}

var xxx_messageInfo_AttestationAndCommittee proto.InternalMessageInfo

func (m *AttestationAndCommittee) GetCommittee() []uint64 {
	if m != nil {
		return m.Committee
	}
	return nil
}

func (m *AttestationAndCommittee) GetAttestation() *ShardAttestation {
	if m != nil {
		return m.Attestation
	}
	return nil
}

type AttestationCustodyBitWrapper struct {
	AttestationRoot      []byte   `protobuf:"bytes,1,opt,name=attestation_root,json=attestationRoot,proto3" json:"attestation_root,omitempty" ssz-size:"32"`
	BlockIndex           uint64   `protobuf:"varint,2,opt,name=block_index,json=blockIndex,proto3" json:"block_index,omitempty"`
	Bit                  bool     `protobuf:"varint,3,opt,name=bit,proto3" json:"bit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttestationCustodyBitWrapper) Reset()         { *m = AttestationCustodyBitWrapper{} }
func (m *AttestationCustodyBitWrapper) String() string { return proto.CompactTextString(m) }
func (*AttestationCustodyBitWrapper) ProtoMessage()    {}
func (*AttestationCustodyBitWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f64254e4dc61453, []int{7}
}
func (m *AttestationCustodyBitWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttestationCustodyBitWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttestationCustodyBitWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttestationCustodyBitWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestationCustodyBitWrapper.Merge(m, src)
}
func (m *AttestationCustodyBitWrapper) XXX_Size() int {
	return m.Size()
}
func (m *AttestationCustodyBitWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestationCustodyBitWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_AttestationCustodyBitWrapper proto.InternalMessageInfo

func (m *AttestationCustodyBitWrapper) GetAttestationRoot() []byte {
	if m != nil {
		return m.AttestationRoot
	}
	return nil
}

func (m *AttestationCustodyBitWrapper) GetBlockIndex() uint64 {
	if m != nil {
		return m.BlockIndex
	}
	return 0
}

func (m *AttestationCustodyBitWrapper) GetBit() bool {
	if m != nil {
		return m.Bit
	}
	return false
}

type PendingAttestation struct {
	AggregationBits      github_com_prysmaticlabs_go_bitfield.Bitlist `protobuf:"bytes,1,opt,name=aggregation_bits,json=aggregationBits,proto3,casttype=github.com/prysmaticlabs/go-bitfield.Bitlist" json:"aggregation_bits,omitempty" ssz-max:"2048"`
	Data                 *ShardAttestationData                        `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	InclusionDelay       uint64                                       `protobuf:"varint,3,opt,name=inclusion_delay,json=inclusionDelay,proto3" json:"inclusion_delay,omitempty"`
	ProposerIndex        uint64                                       `protobuf:"varint,4,opt,name=proposer_index,json=proposerIndex,proto3" json:"proposer_index,omitempty"`
	CrosslinkSuccess     bool                                         `protobuf:"varint,5,opt,name=crosslink_success,json=crosslinkSuccess,proto3" json:"crosslink_success,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *PendingAttestation) Reset()         { *m = PendingAttestation{} }
func (m *PendingAttestation) String() string { return proto.CompactTextString(m) }
func (*PendingAttestation) ProtoMessage()    {}
func (*PendingAttestation) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f64254e4dc61453, []int{8}
}
func (m *PendingAttestation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingAttestation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingAttestation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingAttestation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingAttestation.Merge(m, src)
}
func (m *PendingAttestation) XXX_Size() int {
	return m.Size()
}
func (m *PendingAttestation) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingAttestation.DiscardUnknown(m)
}

var xxx_messageInfo_PendingAttestation proto.InternalMessageInfo

func (m *PendingAttestation) GetAggregationBits() github_com_prysmaticlabs_go_bitfield.Bitlist {
	if m != nil {
		return m.AggregationBits
	}
	return nil
}

func (m *PendingAttestation) GetData() *ShardAttestationData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PendingAttestation) GetInclusionDelay() uint64 {
	if m != nil {
		return m.InclusionDelay
	}
	return 0
}

func (m *PendingAttestation) GetProposerIndex() uint64 {
	if m != nil {
		return m.ProposerIndex
	}
	return 0
}

func (m *PendingAttestation) GetCrosslinkSuccess() bool {
	if m != nil {
		return m.CrosslinkSuccess
	}
	return false
}

type CompactCommittee struct {
	Pubkeys              [][]byte `protobuf:"bytes,1,rep,name=pubkeys,proto3" json:"pubkeys,omitempty"`
	CompactValidators    []uint64 `protobuf:"varint,2,rep,packed,name=compact_validators,json=compactValidators,proto3" json:"compact_validators,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CompactCommittee) Reset()         { *m = CompactCommittee{} }
func (m *CompactCommittee) String() string { return proto.CompactTextString(m) }
func (*CompactCommittee) ProtoMessage()    {}
func (*CompactCommittee) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f64254e4dc61453, []int{9}
}
func (m *CompactCommittee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompactCommittee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompactCommittee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompactCommittee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactCommittee.Merge(m, src)
}
func (m *CompactCommittee) XXX_Size() int {
	return m.Size()
}
func (m *CompactCommittee) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactCommittee.DiscardUnknown(m)
}

var xxx_messageInfo_CompactCommittee proto.InternalMessageInfo

func (m *CompactCommittee) GetPubkeys() [][]byte {
	if m != nil {
		return m.Pubkeys
	}
	return nil
}

func (m *CompactCommittee) GetCompactValidators() []uint64 {
	if m != nil {
		return m.CompactValidators
	}
	return nil
}

type ShardCheckpoint struct {
	Epoch                uint64   `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Root                 []byte   `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty" ssz-size:"32"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShardCheckpoint) Reset()         { *m = ShardCheckpoint{} }
func (m *ShardCheckpoint) String() string { return proto.CompactTextString(m) }
func (*ShardCheckpoint) ProtoMessage()    {}
func (*ShardCheckpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f64254e4dc61453, []int{10}
}
func (m *ShardCheckpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardCheckpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardCheckpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardCheckpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardCheckpoint.Merge(m, src)
}
func (m *ShardCheckpoint) XXX_Size() int {
	return m.Size()
}
func (m *ShardCheckpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardCheckpoint.DiscardUnknown(m)
}

var xxx_messageInfo_ShardCheckpoint proto.InternalMessageInfo

func (m *ShardCheckpoint) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ShardCheckpoint) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

func init() {
	proto.RegisterType((*ShardBlockWrapper)(nil), "ethereum.eth.v1alpha1.ShardBlockWrapper")
	proto.RegisterType((*ShardSignableHeader)(nil), "ethereum.eth.v1alpha1.ShardSignableHeader")
	proto.RegisterType((*ShardState)(nil), "ethereum.eth.v1alpha1.ShardState")
	proto.RegisterType((*ShardTransition)(nil), "ethereum.eth.v1alpha1.ShardTransition")
	proto.RegisterType((*ShardAttestationData)(nil), "ethereum.eth.v1alpha1.ShardAttestationData")
	proto.RegisterType((*ShardAttestation)(nil), "ethereum.eth.v1alpha1.ShardAttestation")
	proto.RegisterType((*AttestationAndCommittee)(nil), "ethereum.eth.v1alpha1.AttestationAndCommittee")
	proto.RegisterType((*AttestationCustodyBitWrapper)(nil), "ethereum.eth.v1alpha1.AttestationCustodyBitWrapper")
	proto.RegisterType((*PendingAttestation)(nil), "ethereum.eth.v1alpha1.PendingAttestation")
	proto.RegisterType((*CompactCommittee)(nil), "ethereum.eth.v1alpha1.CompactCommittee")
	proto.RegisterType((*ShardCheckpoint)(nil), "ethereum.eth.v1alpha1.ShardCheckpoint")
}

func init() {
	proto.RegisterFile("proto/eth/v1alpha1/shard_chain.proto", fileDescriptor_2f64254e4dc61453)
}

var fileDescriptor_2f64254e4dc61453 = []byte{
	// 1014 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x4f, 0x6f, 0xdc, 0x44,
	0x14, 0x97, 0x77, 0xb7, 0x69, 0xf2, 0x36, 0xc9, 0x6e, 0xa6, 0xad, 0x58, 0xa5, 0x25, 0x09, 0x16,
	0xa5, 0x91, 0x4a, 0x76, 0xdb, 0x14, 0x10, 0x2d, 0x7f, 0xaa, 0x6c, 0x82, 0x44, 0x25, 0x84, 0x22,
	0x2f, 0x02, 0x09, 0x0e, 0xd6, 0xd8, 0x9e, 0xda, 0xa3, 0x78, 0x3d, 0x96, 0xe7, 0x6d, 0xd5, 0xf4,
	0xc6, 0x27, 0xe0, 0xc6, 0x17, 0xe0, 0x53, 0x70, 0xe4, 0xc6, 0x91, 0x2b, 0x1c, 0x22, 0x94, 0x33,
	0xa7, 0x1e, 0x39, 0xa1, 0x79, 0xe3, 0xf5, 0xba, 0x6d, 0x36, 0x2d, 0x12, 0x07, 0x7a, 0xf3, 0xbc,
	0xf9, 0xbd, 0x37, 0xbf, 0x79, 0xef, 0xf7, 0xde, 0x18, 0xde, 0xce, 0x0b, 0x85, 0x6a, 0x20, 0x30,
	0x19, 0x3c, 0xba, 0xcd, 0xd3, 0x3c, 0xe1, 0xb7, 0x07, 0x3a, 0xe1, 0x45, 0xe4, 0x87, 0x09, 0x97,
	0x59, 0x9f, 0xb6, 0xd9, 0x15, 0x81, 0x89, 0x28, 0xc4, 0x64, 0xdc, 0x17, 0x98, 0xf4, 0xa7, 0xc0,
	0xf5, 0x9d, 0x58, 0x62, 0x32, 0x09, 0xfa, 0xa1, 0x1a, 0x0f, 0x62, 0x15, 0xab, 0x01, 0xa1, 0x83,
	0xc9, 0x43, 0x5a, 0xd9, 0xc8, 0xe6, 0xcb, 0x46, 0x59, 0xbf, 0x1a, 0x2b, 0x15, 0xa7, 0x62, 0x86,
	0x12, 0xe3, 0x1c, 0x8f, 0xed, 0xa6, 0xfb, 0x97, 0x03, 0x6b, 0x23, 0x73, 0xf0, 0x30, 0x55, 0xe1,
	0xd1, 0x37, 0x05, 0xcf, 0x73, 0x51, 0xb0, 0x4f, 0x60, 0xcd, 0xb2, 0xc9, 0x79, 0x21, 0x32, 0xf4,
	0x0b, 0xa5, 0xb0, 0xe7, 0x6c, 0x39, 0xdb, 0xcb, 0xc3, 0xb5, 0xa7, 0x27, 0x9b, 0x2b, 0x5a, 0x3f,
	0xd9, 0xd1, 0xf2, 0x89, 0xb8, 0xe7, 0xde, 0xd9, 0x75, 0xbd, 0x0e, 0x61, 0x0f, 0x09, 0xea, 0x29,
	0x85, 0xec, 0x3e, 0xb0, 0x40, 0xf0, 0x50, 0x65, 0xcf, 0xf8, 0x37, 0xe6, 0xf9, 0x77, 0x2d, 0xb8,
	0x16, 0x80, 0x41, 0x4b, 0xa7, 0x0a, 0x7b, 0xcd, 0x2d, 0x67, 0xbb, 0xe5, 0xd1, 0xb7, 0xb1, 0x05,
	0x2a, 0x3a, 0xee, 0xb5, 0xb6, 0x9a, 0xdb, 0xcb, 0x1e, 0x7d, 0xb3, 0x01, 0x2c, 0x69, 0x19, 0x67,
	0x1c, 0x27, 0x85, 0xe8, 0x5d, 0x38, 0x2b, 0xfe, 0xdd, 0x0f, 0x5c, 0x6f, 0x86, 0x71, 0x7f, 0x77,
	0xe0, 0x12, 0x5d, 0x77, 0x64, 0x4c, 0x41, 0x2a, 0x3e, 0x17, 0x3c, 0xfa, 0x9f, 0x5e, 0xb8, 0x0f,
	0x4b, 0xe6, 0x92, 0x36, 0x56, 0x6b, 0x5e, 0xac, 0x45, 0x83, 0x31, 0x31, 0xdc, 0x9f, 0x1c, 0x00,
	0x7b, 0x37, 0xe4, 0x28, 0xaa, 0x90, 0x4e, 0x2d, 0xe4, 0x55, 0x58, 0x8a, 0xb9, 0xf6, 0xf3, 0x42,
	0x86, 0x82, 0xe8, 0xb5, 0xbc, 0xc5, 0x98, 0xeb, 0x43, 0xb3, 0x66, 0xd7, 0xa1, 0x15, 0x71, 0xe4,
	0xc4, 0xe1, 0xcc, 0xa3, 0x68, 0xdb, 0xa4, 0x2a, 0xe5, 0x28, 0x34, 0xfa, 0x81, 0x91, 0xcc, 0x4b,
	0xe8, 0x75, 0x2c, 0x96, 0xd4, 0x45, 0x2c, 0x7f, 0x6e, 0x40, 0x87, 0x58, 0x7e, 0x55, 0xf0, 0x4c,
	0x4b, 0x94, 0x2a, 0x63, 0x6f, 0x02, 0x68, 0xe4, 0x05, 0xfa, 0x35, 0xc2, 0x4b, 0x64, 0x19, 0x19,
	0xd6, 0x43, 0xb8, 0x64, 0x8b, 0x63, 0x0f, 0x4c, 0x45, 0x16, 0x63, 0xa2, 0x7b, 0x8d, 0xad, 0xe6,
	0x76, 0x6b, 0xc8, 0x9e, 0x9e, 0x6c, 0xae, 0x9a, 0x33, 0xc7, 0xfc, 0xf1, 0x3d, 0x77, 0xf7, 0xd6,
	0x7b, 0x1f, 0xba, 0x9e, 0xad, 0x25, 0x9d, 0xf9, 0x85, 0x05, 0xb3, 0x6d, 0xe8, 0xda, 0x18, 0xe6,
	0x0e, 0xc4, 0x59, 0xf7, 0x9a, 0xa4, 0xa4, 0x55, 0xb2, 0x1f, 0x70, 0xe4, 0x86, 0x9f, 0x66, 0x07,
	0xb0, 0x6c, 0x91, 0xda, 0xa4, 0x51, 0x93, 0xde, 0xda, 0xbb, 0x6f, 0xf5, 0xcf, 0xec, 0xc5, 0xfe,
	0x2c, 0xe1, 0x5e, 0x5b, 0x57, 0xdf, 0x9a, 0x8d, 0xe0, 0x5a, 0x5e, 0xa8, 0x5c, 0x69, 0x51, 0xf8,
	0x95, 0xfc, 0x7c, 0x1e, 0xc7, 0x85, 0x88, 0x39, 0x9e, 0x23, 0xd6, 0xf5, 0xa9, 0xdb, 0x68, 0xea,
	0xb5, 0x37, 0x75, 0x72, 0xbf, 0x6f, 0xc2, 0x65, 0x3a, 0x70, 0x0f, 0x4d, 0x52, 0xb9, 0x49, 0x9e,
	0x21, 0x7e, 0x66, 0xad, 0x2f, 0xc3, 0x05, 0x99, 0x45, 0xe2, 0x71, 0x59, 0x67, 0xbb, 0x30, 0xd5,
	0x2b, 0x95, 0x5a, 0xab, 0xde, 0xdc, 0x8a, 0x77, 0x2c, 0xb6, 0xaa, 0x1e, 0xfb, 0x14, 0x16, 0xb4,
	0x9a, 0x14, 0xa1, 0xa0, 0x8a, 0xb7, 0x77, 0xdf, 0x39, 0x2f, 0x2d, 0xfb, 0x89, 0x08, 0x8f, 0x72,
	0x25, 0x33, 0xf4, 0x4a, 0x2f, 0xe3, 0x8f, 0xbc, 0x88, 0x05, 0x52, 0x02, 0xfe, 0x85, 0xbf, 0xf5,
	0x62, 0x77, 0xa1, 0x93, 0x08, 0x1e, 0xf9, 0xb6, 0x42, 0x44, 0x7e, 0x61, 0x1e, 0xf9, 0x15, 0x83,
	0xa4, 0x40, 0x44, 0xfd, 0x33, 0xb8, 0x62, 0xbd, 0xb0, 0x12, 0x9e, 0x0d, 0x70, 0x71, 0x5e, 0x00,
	0xab, 0xba, 0x99, 0x4e, 0x49, 0xbf, 0x7f, 0x34, 0xa0, 0xfb, 0x7c, 0x0d, 0xd8, 0x18, 0xba, 0xd3,
	0xd2, 0x9a, 0xb0, 0x81, 0x44, 0x5d, 0x4e, 0x8f, 0xe1, 0x8b, 0xf2, 0xfc, 0xfb, 0x64, 0xf3, 0xdd,
	0xda, 0x04, 0xcf, 0x8b, 0x63, 0x3d, 0xe6, 0x28, 0xc3, 0x94, 0x07, 0x7a, 0x10, 0xab, 0x9d, 0x40,
	0xe2, 0x43, 0x29, 0xd2, 0xa8, 0x3f, 0x94, 0x98, 0x4a, 0x8d, 0x5e, 0xa7, 0x16, 0x7b, 0x28, 0x51,
	0xb3, 0xfb, 0x65, 0xa7, 0x36, 0x28, 0x87, 0x37, 0xcf, 0xcb, 0xe1, 0x73, 0x4a, 0x29, 0x7b, 0x58,
	0xc0, 0x72, 0x38, 0xd1, 0x68, 0xa6, 0x0b, 0x71, 0x6d, 0xfe, 0x67, 0x5c, 0xdb, 0x65, 0x5c, 0xe2,
	0xf9, 0xcc, 0x78, 0x6e, 0xbd, 0xc2, 0x78, 0xfe, 0xd1, 0x81, 0x37, 0x6a, 0x8c, 0xf7, 0xb2, 0x68,
	0x5f, 0x8d, 0xc7, 0x12, 0x51, 0x08, 0x76, 0x0b, 0x96, 0xc2, 0xe9, 0xa2, 0xe7, 0xcc, 0xed, 0xfd,
	0x19, 0x88, 0x3d, 0x80, 0x36, 0x9f, 0x05, 0x2b, 0xb3, 0x75, 0xe3, 0x15, 0xb3, 0xe5, 0xd5, 0x7d,
	0xdd, 0x1f, 0x1c, 0xb8, 0x56, 0xdb, 0xdc, 0xaf, 0x2e, 0x39, 0x7d, 0x31, 0x3f, 0x86, 0x6e, 0x0d,
	0xff, 0xb2, 0xf7, 0xa3, 0x06, 0x25, 0x6d, 0x6e, 0x42, 0xdb, 0xb6, 0x63, 0xbd, 0x63, 0x81, 0x4c,
	0x0f, 0xa8, 0x6d, 0xbb, 0xd0, 0x0c, 0xa4, 0x6d, 0xd4, 0x45, 0xcf, 0x7c, 0xba, 0xbf, 0x34, 0x80,
	0x1d, 0x8a, 0x2c, 0x92, 0x59, 0xfc, 0x3a, 0x2b, 0xf1, 0x06, 0x74, 0x64, 0x16, 0xa6, 0x13, 0x6d,
	0xd8, 0x46, 0x22, 0xe5, 0xc7, 0xe5, 0x1b, 0xb8, 0x5a, 0x99, 0x0f, 0x8c, 0x95, 0x5d, 0x87, 0xd5,
	0x6a, 0xa0, 0xda, 0x2c, 0xb5, 0x08, 0xb7, 0x32, 0xb5, 0xda, 0x44, 0xdd, 0x84, 0xb5, 0xb0, 0x50,
	0x5a, 0xa7, 0x32, 0x3b, 0xf2, 0xf5, 0x24, 0x0c, 0x85, 0xd6, 0x34, 0x6b, 0x16, 0xbd, 0x6e, 0xb5,
	0x31, 0xb2, 0x76, 0xf7, 0x3b, 0xe8, 0xee, 0xab, 0x71, 0xce, 0x43, 0x9c, 0xc9, 0xac, 0x07, 0x17,
	0xf3, 0x49, 0x70, 0x24, 0x8e, 0x35, 0x89, 0x6c, 0xd9, 0x9b, 0x2e, 0xd9, 0x0e, 0xb0, 0xd0, 0xa2,
	0xfd, 0x47, 0x3c, 0x95, 0x11, 0x47, 0x55, 0x94, 0xaf, 0x90, 0xb7, 0x56, 0xee, 0x7c, 0x5d, 0x6d,
	0xb8, 0x5f, 0x96, 0xef, 0xdc, 0x6c, 0x8a, 0x99, 0x91, 0x2c, 0x72, 0x15, 0x26, 0xe5, 0x9c, 0xb6,
	0x0b, 0xf3, 0xee, 0x9e, 0xff, 0xbb, 0x40, 0xdb, 0xc3, 0xfd, 0x5f, 0x4f, 0x37, 0x9c, 0xdf, 0x4e,
	0x37, 0x9c, 0x3f, 0x4f, 0x37, 0x9c, 0x6f, 0xdf, 0x9f, 0x5b, 0x37, 0x5a, 0x0d, 0x5e, 0xfc, 0xbf,
	0xfc, 0x48, 0x60, 0x12, 0x2c, 0x90, 0xfd, 0xce, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x1a,
	0xe7, 0x6b, 0x80, 0x0a, 0x00, 0x00,
}

func (m *ShardBlockWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardBlockWrapper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ShardParentRoot) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(len(m.ShardParentRoot)))
		i += copy(dAtA[i:], m.ShardParentRoot)
	}
	if len(m.BeaconParentRoot) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(len(m.BeaconParentRoot)))
		i += copy(dAtA[i:], m.BeaconParentRoot)
	}
	if m.Slot != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(m.Slot))
	}
	if len(m.Body) > 0 {
		for _, b := range m.Body {
			dAtA[i] = 0x22
			i++
			i = encodeVarintShardChain(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShardSignableHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardSignableHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ShardParentRoot) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(len(m.ShardParentRoot)))
		i += copy(dAtA[i:], m.ShardParentRoot)
	}
	if len(m.BeaconParentRoot) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(len(m.BeaconParentRoot)))
		i += copy(dAtA[i:], m.BeaconParentRoot)
	}
	if m.Slot != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(m.Slot))
	}
	if len(m.BodyRoot) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(len(m.BodyRoot)))
		i += copy(dAtA[i:], m.BodyRoot)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShardState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slot != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(m.Slot))
	}
	if m.GasPrice != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(m.GasPrice))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.LatestBlockRoot) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(len(m.LatestBlockRoot)))
		i += copy(dAtA[i:], m.LatestBlockRoot)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShardTransition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardTransition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartSlot != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(m.StartSlot))
	}
	if len(m.ShardBlockLengths) > 0 {
		dAtA2 := make([]byte, len(m.ShardBlockLengths)*10)
		var j1 int
		for _, num := range m.ShardBlockLengths {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.ShardDataRoots) > 0 {
		for _, b := range m.ShardDataRoots {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintShardChain(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.ShardStates) > 0 {
		for _, msg := range m.ShardStates {
			dAtA[i] = 0x22
			i++
			i = encodeVarintShardChain(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ProposerSignatureAggregate) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(len(m.ProposerSignatureAggregate)))
		i += copy(dAtA[i:], m.ProposerSignatureAggregate)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShardAttestationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardAttestationData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slot != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(m.Slot))
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(m.Index))
	}
	if len(m.BeaconBlockRoot) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(len(m.BeaconBlockRoot)))
		i += copy(dAtA[i:], m.BeaconBlockRoot)
	}
	if m.Source != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(m.Source.Size()))
		n3, err := m.Source.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Target != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(m.Target.Size()))
		n4, err := m.Target.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.HeadShardRoot) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(len(m.HeadShardRoot)))
		i += copy(dAtA[i:], m.HeadShardRoot)
	}
	if len(m.ShardTransitionRoot) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(len(m.ShardTransitionRoot)))
		i += copy(dAtA[i:], m.ShardTransitionRoot)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShardAttestation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardAttestation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AggregationBits) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(len(m.AggregationBits)))
		i += copy(dAtA[i:], m.AggregationBits)
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(m.Data.Size()))
		n5, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.CustodyBits) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(len(m.CustodyBits)))
		i += copy(dAtA[i:], m.CustodyBits)
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AttestationAndCommittee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttestationAndCommittee) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Committee) > 0 {
		dAtA7 := make([]byte, len(m.Committee)*10)
		var j6 int
		for _, num := range m.Committee {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	if m.Attestation != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(m.Attestation.Size()))
		n8, err := m.Attestation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AttestationCustodyBitWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttestationCustodyBitWrapper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AttestationRoot) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(len(m.AttestationRoot)))
		i += copy(dAtA[i:], m.AttestationRoot)
	}
	if m.BlockIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(m.BlockIndex))
	}
	if m.Bit {
		dAtA[i] = 0x18
		i++
		if m.Bit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PendingAttestation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingAttestation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AggregationBits) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(len(m.AggregationBits)))
		i += copy(dAtA[i:], m.AggregationBits)
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(m.Data.Size()))
		n9, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.InclusionDelay != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(m.InclusionDelay))
	}
	if m.ProposerIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(m.ProposerIndex))
	}
	if m.CrosslinkSuccess {
		dAtA[i] = 0x28
		i++
		if m.CrosslinkSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CompactCommittee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompactCommittee) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pubkeys) > 0 {
		for _, b := range m.Pubkeys {
			dAtA[i] = 0xa
			i++
			i = encodeVarintShardChain(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.CompactValidators) > 0 {
		dAtA11 := make([]byte, len(m.CompactValidators)*10)
		var j10 int
		for _, num := range m.CompactValidators {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(j10))
		i += copy(dAtA[i:], dAtA11[:j10])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShardCheckpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardCheckpoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(m.Epoch))
	}
	if len(m.Root) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintShardChain(dAtA, i, uint64(len(m.Root)))
		i += copy(dAtA[i:], m.Root)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintShardChain(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ShardBlockWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShardParentRoot)
	if l > 0 {
		n += 1 + l + sovShardChain(uint64(l))
	}
	l = len(m.BeaconParentRoot)
	if l > 0 {
		n += 1 + l + sovShardChain(uint64(l))
	}
	if m.Slot != 0 {
		n += 1 + sovShardChain(uint64(m.Slot))
	}
	if len(m.Body) > 0 {
		for _, b := range m.Body {
			l = len(b)
			n += 1 + l + sovShardChain(uint64(l))
		}
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovShardChain(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardSignableHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShardParentRoot)
	if l > 0 {
		n += 1 + l + sovShardChain(uint64(l))
	}
	l = len(m.BeaconParentRoot)
	if l > 0 {
		n += 1 + l + sovShardChain(uint64(l))
	}
	if m.Slot != 0 {
		n += 1 + sovShardChain(uint64(m.Slot))
	}
	l = len(m.BodyRoot)
	if l > 0 {
		n += 1 + l + sovShardChain(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovShardChain(uint64(m.Slot))
	}
	if m.GasPrice != 0 {
		n += 1 + sovShardChain(uint64(m.GasPrice))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovShardChain(uint64(l))
	}
	l = len(m.LatestBlockRoot)
	if l > 0 {
		n += 1 + l + sovShardChain(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardTransition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartSlot != 0 {
		n += 1 + sovShardChain(uint64(m.StartSlot))
	}
	if len(m.ShardBlockLengths) > 0 {
		l = 0
		for _, e := range m.ShardBlockLengths {
			l += sovShardChain(uint64(e))
		}
		n += 1 + sovShardChain(uint64(l)) + l
	}
	if len(m.ShardDataRoots) > 0 {
		for _, b := range m.ShardDataRoots {
			l = len(b)
			n += 1 + l + sovShardChain(uint64(l))
		}
	}
	if len(m.ShardStates) > 0 {
		for _, e := range m.ShardStates {
			l = e.Size()
			n += 1 + l + sovShardChain(uint64(l))
		}
	}
	l = len(m.ProposerSignatureAggregate)
	if l > 0 {
		n += 1 + l + sovShardChain(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardAttestationData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovShardChain(uint64(m.Slot))
	}
	if m.Index != 0 {
		n += 1 + sovShardChain(uint64(m.Index))
	}
	l = len(m.BeaconBlockRoot)
	if l > 0 {
		n += 1 + l + sovShardChain(uint64(l))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovShardChain(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovShardChain(uint64(l))
	}
	l = len(m.HeadShardRoot)
	if l > 0 {
		n += 1 + l + sovShardChain(uint64(l))
	}
	l = len(m.ShardTransitionRoot)
	if l > 0 {
		n += 1 + l + sovShardChain(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardAttestation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AggregationBits)
	if l > 0 {
		n += 1 + l + sovShardChain(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovShardChain(uint64(l))
	}
	l = len(m.CustodyBits)
	if l > 0 {
		n += 1 + l + sovShardChain(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovShardChain(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttestationAndCommittee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Committee) > 0 {
		l = 0
		for _, e := range m.Committee {
			l += sovShardChain(uint64(e))
		}
		n += 1 + sovShardChain(uint64(l)) + l
	}
	if m.Attestation != nil {
		l = m.Attestation.Size()
		n += 1 + l + sovShardChain(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttestationCustodyBitWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationRoot)
	if l > 0 {
		n += 1 + l + sovShardChain(uint64(l))
	}
	if m.BlockIndex != 0 {
		n += 1 + sovShardChain(uint64(m.BlockIndex))
	}
	if m.Bit {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PendingAttestation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AggregationBits)
	if l > 0 {
		n += 1 + l + sovShardChain(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovShardChain(uint64(l))
	}
	if m.InclusionDelay != 0 {
		n += 1 + sovShardChain(uint64(m.InclusionDelay))
	}
	if m.ProposerIndex != 0 {
		n += 1 + sovShardChain(uint64(m.ProposerIndex))
	}
	if m.CrosslinkSuccess {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CompactCommittee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pubkeys) > 0 {
		for _, b := range m.Pubkeys {
			l = len(b)
			n += 1 + l + sovShardChain(uint64(l))
		}
	}
	if len(m.CompactValidators) > 0 {
		l = 0
		for _, e := range m.CompactValidators {
			l += sovShardChain(uint64(e))
		}
		n += 1 + sovShardChain(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardCheckpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovShardChain(uint64(m.Epoch))
	}
	l = len(m.Root)
	if l > 0 {
		n += 1 + l + sovShardChain(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovShardChain(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozShardChain(x uint64) (n int) {
	return sovShardChain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ShardBlockWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShardChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardBlockWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardBlockWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardParentRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardParentRoot = append(m.ShardParentRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.ShardParentRoot == nil {
				m.ShardParentRoot = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconParentRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeaconParentRoot = append(m.BeaconParentRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.BeaconParentRoot == nil {
				m.BeaconParentRoot = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body, make([]byte, postIndex-iNdEx))
			copy(m.Body[len(m.Body)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShardChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShardChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShardChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardSignableHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShardChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardSignableHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardSignableHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardParentRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardParentRoot = append(m.ShardParentRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.ShardParentRoot == nil {
				m.ShardParentRoot = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconParentRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeaconParentRoot = append(m.BeaconParentRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.BeaconParentRoot == nil {
				m.BeaconParentRoot = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BodyRoot = append(m.BodyRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.BodyRoot == nil {
				m.BodyRoot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShardChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShardChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShardChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShardChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			m.GasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlockRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestBlockRoot = append(m.LatestBlockRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.LatestBlockRoot == nil {
				m.LatestBlockRoot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShardChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShardChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShardChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardTransition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShardChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardTransition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardTransition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartSlot", wireType)
			}
			m.StartSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartSlot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShardChain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ShardBlockLengths = append(m.ShardBlockLengths, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShardChain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthShardChain
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthShardChain
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ShardBlockLengths) == 0 {
					m.ShardBlockLengths = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShardChain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ShardBlockLengths = append(m.ShardBlockLengths, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardBlockLengths", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardDataRoots", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardDataRoots = append(m.ShardDataRoots, make([]byte, postIndex-iNdEx))
			copy(m.ShardDataRoots[len(m.ShardDataRoots)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardStates = append(m.ShardStates, &ShardState{})
			if err := m.ShardStates[len(m.ShardStates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerSignatureAggregate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposerSignatureAggregate = append(m.ProposerSignatureAggregate[:0], dAtA[iNdEx:postIndex]...)
			if m.ProposerSignatureAggregate == nil {
				m.ProposerSignatureAggregate = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShardChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShardChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShardChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardAttestationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShardChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardAttestationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardAttestationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconBlockRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeaconBlockRoot = append(m.BeaconBlockRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.BeaconBlockRoot == nil {
				m.BeaconBlockRoot = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &ShardCheckpoint{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &ShardCheckpoint{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadShardRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadShardRoot = append(m.HeadShardRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.HeadShardRoot == nil {
				m.HeadShardRoot = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardTransitionRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardTransitionRoot = append(m.ShardTransitionRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.ShardTransitionRoot == nil {
				m.ShardTransitionRoot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShardChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShardChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShardChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardAttestation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShardChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardAttestation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardAttestation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregationBits", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregationBits = append(m.AggregationBits[:0], dAtA[iNdEx:postIndex]...)
			if m.AggregationBits == nil {
				m.AggregationBits = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ShardAttestationData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustodyBits", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustodyBits = append(m.CustodyBits[:0], dAtA[iNdEx:postIndex]...)
			if m.CustodyBits == nil {
				m.CustodyBits = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShardChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShardChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShardChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttestationAndCommittee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShardChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttestationAndCommittee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttestationAndCommittee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShardChain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Committee = append(m.Committee, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShardChain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthShardChain
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthShardChain
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Committee) == 0 {
					m.Committee = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShardChain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Committee = append(m.Committee, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Committee", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attestation == nil {
				m.Attestation = &ShardAttestation{}
			}
			if err := m.Attestation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShardChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShardChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShardChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttestationCustodyBitWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShardChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttestationCustodyBitWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttestationCustodyBitWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationRoot = append(m.AttestationRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationRoot == nil {
				m.AttestationRoot = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockIndex", wireType)
			}
			m.BlockIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bit = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipShardChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShardChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShardChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingAttestation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShardChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingAttestation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingAttestation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregationBits", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregationBits = append(m.AggregationBits[:0], dAtA[iNdEx:postIndex]...)
			if m.AggregationBits == nil {
				m.AggregationBits = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ShardAttestationData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InclusionDelay", wireType)
			}
			m.InclusionDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InclusionDelay |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerIndex", wireType)
			}
			m.ProposerIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposerIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosslinkSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CrosslinkSuccess = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipShardChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShardChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShardChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompactCommittee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShardChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompactCommittee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompactCommittee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkeys = append(m.Pubkeys, make([]byte, postIndex-iNdEx))
			copy(m.Pubkeys[len(m.Pubkeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShardChain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CompactValidators = append(m.CompactValidators, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShardChain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthShardChain
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthShardChain
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CompactValidators) == 0 {
					m.CompactValidators = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShardChain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CompactValidators = append(m.CompactValidators, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CompactValidators", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShardChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShardChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShardChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardCheckpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShardChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardCheckpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardCheckpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Root = append(m.Root[:0], dAtA[iNdEx:postIndex]...)
			if m.Root == nil {
				m.Root = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShardChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShardChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShardChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShardChain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShardChain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShardChain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShardChain
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthShardChain
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowShardChain
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipShardChain(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthShardChain
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthShardChain = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShardChain   = fmt.Errorf("proto: integer overflow")
)
