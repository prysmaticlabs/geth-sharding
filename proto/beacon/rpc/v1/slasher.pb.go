// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/beacon/rpc/v1/slasher.proto

package ethereum_beacon_rpc_v1

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_prysmaticlabs_eth2_types "github.com/prysmaticlabs/eth2-types"
	v1alpha1 "github.com/prysmaticlabs/ethereumapis/eth/v1alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HighestAttestationRequest struct {
	ValidatorIndices     []uint64 `protobuf:"varint,1,rep,packed,name=validator_indices,json=validatorIndices,proto3" json:"validator_indices,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HighestAttestationRequest) Reset()         { *m = HighestAttestationRequest{} }
func (m *HighestAttestationRequest) String() string { return proto.CompactTextString(m) }
func (*HighestAttestationRequest) ProtoMessage()    {}
func (*HighestAttestationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d75c5a5be5c552fc, []int{0}
}
func (m *HighestAttestationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HighestAttestationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HighestAttestationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HighestAttestationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HighestAttestationRequest.Merge(m, src)
}
func (m *HighestAttestationRequest) XXX_Size() int {
	return m.Size()
}
func (m *HighestAttestationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HighestAttestationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HighestAttestationRequest proto.InternalMessageInfo

func (m *HighestAttestationRequest) GetValidatorIndices() []uint64 {
	if m != nil {
		return m.ValidatorIndices
	}
	return nil
}

type HighestAttestationResponse struct {
	Attestations         []*HighestAttestation `protobuf:"bytes,1,rep,name=attestations,proto3" json:"attestations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *HighestAttestationResponse) Reset()         { *m = HighestAttestationResponse{} }
func (m *HighestAttestationResponse) String() string { return proto.CompactTextString(m) }
func (*HighestAttestationResponse) ProtoMessage()    {}
func (*HighestAttestationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d75c5a5be5c552fc, []int{1}
}
func (m *HighestAttestationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HighestAttestationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HighestAttestationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HighestAttestationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HighestAttestationResponse.Merge(m, src)
}
func (m *HighestAttestationResponse) XXX_Size() int {
	return m.Size()
}
func (m *HighestAttestationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HighestAttestationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HighestAttestationResponse proto.InternalMessageInfo

func (m *HighestAttestationResponse) GetAttestations() []*HighestAttestation {
	if m != nil {
		return m.Attestations
	}
	return nil
}

type HighestAttestation struct {
	ValidatorIndex       uint64                                    `protobuf:"varint,1,opt,name=validator_index,json=validatorIndex,proto3" json:"validator_index,omitempty"`
	HighestSourceEpoch   github_com_prysmaticlabs_eth2_types.Epoch `protobuf:"varint,2,opt,name=highest_source_epoch,json=highestSourceEpoch,proto3,casttype=github.com/prysmaticlabs/eth2-types.Epoch" json:"highest_source_epoch,omitempty"`
	HighestTargetEpoch   github_com_prysmaticlabs_eth2_types.Epoch `protobuf:"varint,3,opt,name=highest_target_epoch,json=highestTargetEpoch,proto3,casttype=github.com/prysmaticlabs/eth2-types.Epoch" json:"highest_target_epoch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *HighestAttestation) Reset()         { *m = HighestAttestation{} }
func (m *HighestAttestation) String() string { return proto.CompactTextString(m) }
func (*HighestAttestation) ProtoMessage()    {}
func (*HighestAttestation) Descriptor() ([]byte, []int) {
	return fileDescriptor_d75c5a5be5c552fc, []int{2}
}
func (m *HighestAttestation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HighestAttestation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HighestAttestation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HighestAttestation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HighestAttestation.Merge(m, src)
}
func (m *HighestAttestation) XXX_Size() int {
	return m.Size()
}
func (m *HighestAttestation) XXX_DiscardUnknown() {
	xxx_messageInfo_HighestAttestation.DiscardUnknown(m)
}

var xxx_messageInfo_HighestAttestation proto.InternalMessageInfo

func (m *HighestAttestation) GetValidatorIndex() uint64 {
	if m != nil {
		return m.ValidatorIndex
	}
	return 0
}

func (m *HighestAttestation) GetHighestSourceEpoch() github_com_prysmaticlabs_eth2_types.Epoch {
	if m != nil {
		return m.HighestSourceEpoch
	}
	return 0
}

func (m *HighestAttestation) GetHighestTargetEpoch() github_com_prysmaticlabs_eth2_types.Epoch {
	if m != nil {
		return m.HighestTargetEpoch
	}
	return 0
}

func init() {
	proto.RegisterType((*HighestAttestationRequest)(nil), "ethereum.beacon.rpc.v1.HighestAttestationRequest")
	proto.RegisterType((*HighestAttestationResponse)(nil), "ethereum.beacon.rpc.v1.HighestAttestationResponse")
	proto.RegisterType((*HighestAttestation)(nil), "ethereum.beacon.rpc.v1.HighestAttestation")
}

func init() { proto.RegisterFile("proto/beacon/rpc/v1/slasher.proto", fileDescriptor_d75c5a5be5c552fc) }

var fileDescriptor_d75c5a5be5c552fc = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x41, 0x6b, 0x13, 0x41,
	0x14, 0x66, 0xda, 0xa0, 0x30, 0x16, 0xad, 0xa3, 0x94, 0x18, 0x25, 0xad, 0x7b, 0xb0, 0x69, 0x6c,
	0x66, 0xd8, 0x78, 0x10, 0xbc, 0x19, 0x10, 0xd2, 0x8b, 0x48, 0xe2, 0x3d, 0xcc, 0x6e, 0x9e, 0xbb,
	0x83, 0x9b, 0x9d, 0x71, 0x66, 0x36, 0x34, 0xd7, 0xfe, 0x05, 0x8f, 0x9e, 0xbd, 0xfb, 0x33, 0x3c,
	0x0a, 0xde, 0x45, 0x82, 0xbf, 0xc2, 0x8b, 0xb2, 0x33, 0xab, 0xd9, 0xd0, 0x04, 0x2c, 0xde, 0x76,
	0xde, 0xfb, 0xde, 0xf7, 0x3e, 0xbe, 0xfd, 0x1e, 0x7e, 0xa8, 0xb4, 0xb4, 0x92, 0x45, 0xc0, 0x63,
	0x99, 0x33, 0xad, 0x62, 0x36, 0x0f, 0x99, 0xc9, 0xb8, 0x49, 0x41, 0x53, 0xd7, 0x23, 0x07, 0x60,
	0x53, 0xd0, 0x50, 0xcc, 0xa8, 0x47, 0x51, 0xad, 0x62, 0x3a, 0x0f, 0x5b, 0x87, 0x60, 0x53, 0x36,
	0x0f, 0x79, 0xa6, 0x52, 0x1e, 0x56, 0x0c, 0x93, 0x28, 0x93, 0xf1, 0x5b, 0x3f, 0xd8, 0x7a, 0x90,
	0x48, 0x99, 0x64, 0xc0, 0xb8, 0x12, 0x8c, 0xe7, 0xb9, 0xb4, 0xdc, 0x0a, 0x99, 0x9b, 0xaa, 0x7b,
	0xbf, 0xea, 0xba, 0x57, 0x54, 0xbc, 0x61, 0x30, 0x53, 0x76, 0x51, 0x35, 0x7b, 0x89, 0xb0, 0x69,
	0x11, 0xd1, 0x58, 0xce, 0x58, 0x22, 0x13, 0xb9, 0x42, 0x95, 0x2f, 0xaf, 0xb9, 0xfc, 0xf2, 0xf0,
	0x60, 0x88, 0xef, 0x0d, 0x45, 0x92, 0x82, 0xb1, 0xcf, 0xad, 0x05, 0xe3, 0x17, 0x8d, 0xe0, 0x5d,
	0x01, 0xc6, 0x92, 0xc7, 0xf8, 0xf6, 0x9c, 0x67, 0x62, 0xca, 0xad, 0xd4, 0x13, 0x91, 0x4f, 0x45,
	0x0c, 0xa6, 0x89, 0x8e, 0x76, 0x3b, 0x8d, 0xd1, 0xfe, 0xdf, 0xc6, 0x99, 0xaf, 0x07, 0x19, 0x6e,
	0x6d, 0x62, 0x32, 0x4a, 0xe6, 0x06, 0xc8, 0x4b, 0xbc, 0xc7, 0x57, 0x65, 0xcf, 0x72, 0xa3, 0xdf,
	0xa5, 0x9b, 0x1d, 0xa2, 0x1b, 0x98, 0xd6, 0xe6, 0x83, 0x5f, 0x08, 0x93, 0xcb, 0x20, 0x72, 0x8c,
	0x6f, 0xad, 0x29, 0x86, 0xf3, 0x26, 0x3a, 0x42, 0x9d, 0xc6, 0xe8, 0x66, 0x5d, 0x2f, 0x9c, 0x93,
	0x09, 0xbe, 0x9b, 0xfa, 0xf1, 0x89, 0x91, 0x85, 0x8e, 0x61, 0x02, 0x4a, 0xc6, 0x69, 0x73, 0xa7,
	0x44, 0x0f, 0x7a, 0x3f, 0xbf, 0x1d, 0x9e, 0xd4, 0x8c, 0x54, 0x7a, 0x61, 0x66, 0xdc, 0x8a, 0x38,
	0xe3, 0x91, 0x61, 0x60, 0xd3, 0x7e, 0xcf, 0x2e, 0x14, 0x18, 0xfa, 0xa2, 0x1c, 0x1a, 0x91, 0x8a,
	0x6a, 0xec, 0x98, 0x5c, 0xad, 0xbe, 0xc0, 0x72, 0x9d, 0x80, 0xad, 0x16, 0xec, 0xfe, 0xcf, 0x82,
	0xd7, 0x8e, 0xc9, 0xd5, 0xfa, 0x17, 0x0d, 0x7c, 0x7d, 0xec, 0xe3, 0x46, 0x3e, 0x22, 0x7c, 0x70,
	0x66, 0xdc, 0x8b, 0x47, 0x19, 0xd4, 0x1d, 0x39, 0x59, 0x59, 0x0c, 0x36, 0xa5, 0x7f, 0x52, 0x47,
	0x9d, 0x0d, 0x30, 0xad, 0x41, 0x5b, 0xc7, 0x5b, 0xa0, 0x1e, 0x03, 0xda, 0xf1, 0x8b, 0x3c, 0x09,
	0x9e, 0x5e, 0x7c, 0xfd, 0xf1, 0x7e, 0x27, 0x0c, 0x4e, 0xd9, 0x5a, 0x90, 0xab, 0xf0, 0xb3, 0xfa,
	0x8f, 0xf2, 0xc5, 0x52, 0xd4, 0x33, 0xd4, 0x25, 0x1f, 0x10, 0xde, 0xaf, 0xe9, 0x1c, 0x94, 0x91,
	0x27, 0x74, 0xcb, 0xda, 0xb1, 0x48, 0x72, 0x98, 0x0e, 0x5c, 0x2e, 0x1c, 0x72, 0x08, 0x7c, 0x0a,
	0x7a, 0xab, 0xcc, 0x57, 0x5a, 0x2a, 0x69, 0x6a, 0x32, 0xa9, 0x93, 0xd9, 0x21, 0x8f, 0x36, 0xcb,
	0x74, 0x07, 0x57, 0x13, 0x48, 0x3e, 0x21, 0x7c, 0xe7, 0x72, 0xa6, 0x0c, 0x09, 0xaf, 0x90, 0x52,
	0x7f, 0x39, 0xad, 0xfe, 0x55, 0x46, 0xfc, 0x89, 0x04, 0x7d, 0x27, 0xf7, 0x94, 0x74, 0xff, 0xc1,
	0xd5, 0x2a, 0x0f, 0x83, 0xbd, 0xcf, 0xcb, 0x36, 0xfa, 0xb2, 0x6c, 0xa3, 0xef, 0xcb, 0x36, 0x8a,
	0xae, 0xb9, 0x9b, 0x7e, 0xf2, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x82, 0x0d, 0x6d, 0xd6, 0x9b, 0x04,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SlasherClient is the client API for Slasher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SlasherClient interface {
	IsSlashableAttestation(ctx context.Context, in *v1alpha1.IndexedAttestation, opts ...grpc.CallOption) (*v1alpha1.AttesterSlashing, error)
	IsSlashableBlock(ctx context.Context, in *v1alpha1.SignedBeaconBlockHeader, opts ...grpc.CallOption) (*v1alpha1.ProposerSlashing, error)
	HighestAttestations(ctx context.Context, in *HighestAttestationRequest, opts ...grpc.CallOption) (*HighestAttestationResponse, error)
}

type slasherClient struct {
	cc *grpc.ClientConn
}

func NewSlasherClient(cc *grpc.ClientConn) SlasherClient {
	return &slasherClient{cc}
}

func (c *slasherClient) IsSlashableAttestation(ctx context.Context, in *v1alpha1.IndexedAttestation, opts ...grpc.CallOption) (*v1alpha1.AttesterSlashing, error) {
	out := new(v1alpha1.AttesterSlashing)
	err := c.cc.Invoke(ctx, "/ethereum.beacon.rpc.v1.Slasher/IsSlashableAttestation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slasherClient) IsSlashableBlock(ctx context.Context, in *v1alpha1.SignedBeaconBlockHeader, opts ...grpc.CallOption) (*v1alpha1.ProposerSlashing, error) {
	out := new(v1alpha1.ProposerSlashing)
	err := c.cc.Invoke(ctx, "/ethereum.beacon.rpc.v1.Slasher/IsSlashableBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slasherClient) HighestAttestations(ctx context.Context, in *HighestAttestationRequest, opts ...grpc.CallOption) (*HighestAttestationResponse, error) {
	out := new(HighestAttestationResponse)
	err := c.cc.Invoke(ctx, "/ethereum.beacon.rpc.v1.Slasher/HighestAttestations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlasherServer is the server API for Slasher service.
type SlasherServer interface {
	IsSlashableAttestation(context.Context, *v1alpha1.IndexedAttestation) (*v1alpha1.AttesterSlashing, error)
	IsSlashableBlock(context.Context, *v1alpha1.SignedBeaconBlockHeader) (*v1alpha1.ProposerSlashing, error)
	HighestAttestations(context.Context, *HighestAttestationRequest) (*HighestAttestationResponse, error)
}

// UnimplementedSlasherServer can be embedded to have forward compatible implementations.
type UnimplementedSlasherServer struct {
}

func (*UnimplementedSlasherServer) IsSlashableAttestation(ctx context.Context, req *v1alpha1.IndexedAttestation) (*v1alpha1.AttesterSlashing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSlashableAttestation not implemented")
}
func (*UnimplementedSlasherServer) IsSlashableBlock(ctx context.Context, req *v1alpha1.SignedBeaconBlockHeader) (*v1alpha1.ProposerSlashing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSlashableBlock not implemented")
}
func (*UnimplementedSlasherServer) HighestAttestations(ctx context.Context, req *HighestAttestationRequest) (*HighestAttestationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HighestAttestations not implemented")
}

func RegisterSlasherServer(s *grpc.Server, srv SlasherServer) {
	s.RegisterService(&_Slasher_serviceDesc, srv)
}

func _Slasher_IsSlashableAttestation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1alpha1.IndexedAttestation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlasherServer).IsSlashableAttestation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.beacon.rpc.v1.Slasher/IsSlashableAttestation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlasherServer).IsSlashableAttestation(ctx, req.(*v1alpha1.IndexedAttestation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Slasher_IsSlashableBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1alpha1.SignedBeaconBlockHeader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlasherServer).IsSlashableBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.beacon.rpc.v1.Slasher/IsSlashableBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlasherServer).IsSlashableBlock(ctx, req.(*v1alpha1.SignedBeaconBlockHeader))
	}
	return interceptor(ctx, in, info, handler)
}

func _Slasher_HighestAttestations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HighestAttestationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlasherServer).HighestAttestations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.beacon.rpc.v1.Slasher/HighestAttestations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlasherServer).HighestAttestations(ctx, req.(*HighestAttestationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Slasher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ethereum.beacon.rpc.v1.Slasher",
	HandlerType: (*SlasherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsSlashableAttestation",
			Handler:    _Slasher_IsSlashableAttestation_Handler,
		},
		{
			MethodName: "IsSlashableBlock",
			Handler:    _Slasher_IsSlashableBlock_Handler,
		},
		{
			MethodName: "HighestAttestations",
			Handler:    _Slasher_HighestAttestations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/beacon/rpc/v1/slasher.proto",
}

func (m *HighestAttestationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HighestAttestationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HighestAttestationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ValidatorIndices) > 0 {
		dAtA2 := make([]byte, len(m.ValidatorIndices)*10)
		var j1 int
		for _, num := range m.ValidatorIndices {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintSlasher(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HighestAttestationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HighestAttestationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HighestAttestationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Attestations) > 0 {
		for iNdEx := len(m.Attestations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attestations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSlasher(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HighestAttestation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HighestAttestation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HighestAttestation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HighestTargetEpoch != 0 {
		i = encodeVarintSlasher(dAtA, i, uint64(m.HighestTargetEpoch))
		i--
		dAtA[i] = 0x18
	}
	if m.HighestSourceEpoch != 0 {
		i = encodeVarintSlasher(dAtA, i, uint64(m.HighestSourceEpoch))
		i--
		dAtA[i] = 0x10
	}
	if m.ValidatorIndex != 0 {
		i = encodeVarintSlasher(dAtA, i, uint64(m.ValidatorIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSlasher(dAtA []byte, offset int, v uint64) int {
	offset -= sovSlasher(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HighestAttestationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidatorIndices) > 0 {
		l = 0
		for _, e := range m.ValidatorIndices {
			l += sovSlasher(uint64(e))
		}
		n += 1 + sovSlasher(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HighestAttestationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attestations) > 0 {
		for _, e := range m.Attestations {
			l = e.Size()
			n += 1 + l + sovSlasher(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HighestAttestation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidatorIndex != 0 {
		n += 1 + sovSlasher(uint64(m.ValidatorIndex))
	}
	if m.HighestSourceEpoch != 0 {
		n += 1 + sovSlasher(uint64(m.HighestSourceEpoch))
	}
	if m.HighestTargetEpoch != 0 {
		n += 1 + sovSlasher(uint64(m.HighestTargetEpoch))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSlasher(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSlasher(x uint64) (n int) {
	return sovSlasher(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HighestAttestationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSlasher
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HighestAttestationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HighestAttestationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSlasher
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ValidatorIndices = append(m.ValidatorIndices, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSlasher
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSlasher
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSlasher
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ValidatorIndices) == 0 {
					m.ValidatorIndices = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSlasher
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ValidatorIndices = append(m.ValidatorIndices, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorIndices", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSlasher(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSlasher
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HighestAttestationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSlasher
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HighestAttestationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HighestAttestationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlasher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSlasher
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSlasher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestations = append(m.Attestations, &HighestAttestation{})
			if err := m.Attestations[len(m.Attestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSlasher(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSlasher
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HighestAttestation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSlasher
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HighestAttestation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HighestAttestation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorIndex", wireType)
			}
			m.ValidatorIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlasher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighestSourceEpoch", wireType)
			}
			m.HighestSourceEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlasher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighestSourceEpoch |= github_com_prysmaticlabs_eth2_types.Epoch(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighestTargetEpoch", wireType)
			}
			m.HighestTargetEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlasher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighestTargetEpoch |= github_com_prysmaticlabs_eth2_types.Epoch(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSlasher(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSlasher
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSlasher(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSlasher
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSlasher
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSlasher
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSlasher
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSlasher
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSlasher
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSlasher        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSlasher          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSlasher = fmt.Errorf("proto: unexpected end of group")
)
