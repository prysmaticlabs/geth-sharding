package autogenerated

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"github.com/prysmaticlabs/prysm/shared/bls"
	"io/ioutil"
	"testing"

	"github.com/bazelbuild/rules_go/go/tools/bazel"
	"github.com/ghodss/yaml"
)

func TestSignMessageYaml(t *testing.T) {
	filepath, err := bazel.Runfile("sign_msg_formatted.yaml")
	if err != nil {
		t.Fatal(err)
	}

	file, err := ioutil.ReadFile(filepath)
	if err != nil {
		t.Fatalf("Failed to read file: %v", err)
	}

	test := &SignMessageTest{}
	if err := yaml.Unmarshal(file, test); err != nil {
		t.Fatalf("Failed to unmarshal: %v", err)
	}

	for i, tt := range test.TestCases {
		t.Run(fmt.Sprintf("Test %d", i), func(t *testing.T) {
			sk, err := bls.SecretKeyFromBytes(tt.Input.Privkey)
			if err != nil {
				t.Fatalf("Cannot unmarshal input to secret key: %v", err)
			}
			b := bytes.NewBuffer(tt.Input.Domain)
			domain, err := binary.ReadUvarint(b)
			if err != nil {
				t.Fatal(err)
			}
			sig := sk.Sign(tt.Input.Message, domain)
			if !bytes.Equal(tt.Output, sig.Marshal()) {
				t.Error("Signature does not match the expected output.")
			}
		})
	}
}