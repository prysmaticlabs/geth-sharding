// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/sharding/watchtower/watchtower.proto

package ethereum_eth_v1alpha1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	v1alpha1 "github.com/prysmaticlabs/prysm/proto/eth/v1alpha1"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("proto/sharding/watchtower/watchtower.proto", fileDescriptor_3c363b4cf6a57d12)
}

var fileDescriptor_3c363b4cf6a57d12 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0xcf, 0x4a, 0x03, 0x31,
	0x10, 0xc6, 0x29, 0x82, 0x87, 0x9c, 0x24, 0xd0, 0x1e, 0xd6, 0x9b, 0x28, 0x8a, 0x87, 0x49, 0xab,
	0x4f, 0x60, 0x41, 0xd0, 0x9b, 0xe0, 0xa1, 0xe0, 0x45, 0x26, 0xdb, 0x71, 0xb3, 0x98, 0xee, 0x2c,
	0xc9, 0xd4, 0xe2, 0x53, 0xf8, 0xca, 0xd2, 0xc4, 0xd6, 0x45, 0x76, 0x45, 0x6f, 0x81, 0xfc, 0xbe,
	0x3f, 0xf3, 0xa9, 0xcb, 0x36, 0xb0, 0xb0, 0x89, 0x0e, 0xc3, 0xb2, 0x6e, 0x2a, 0xb3, 0x41, 0x29,
	0x9d, 0xf0, 0x86, 0x42, 0xe7, 0x09, 0x09, 0xd2, 0x63, 0x12, 0x47, 0x81, 0xd6, 0x2b, 0x20, 0x71,
	0xf0, 0x36, 0x43, 0xdf, 0x3a, 0x9c, 0x15, 0xc7, 0x15, 0x73, 0xe5, 0xc9, 0x24, 0xc8, 0xae, 0x5f,
	0x0c, 0xad, 0x5a, 0x79, 0xcf, 0x9a, 0xe2, 0x2c, 0xfb, 0x93, 0x38, 0xb3, 0x13, 0x18, 0x4b, 0x58,
	0x72, 0xf3, 0x6c, 0x3d, 0x97, 0xaf, 0x5f, 0xd8, 0x69, 0x0f, 0x86, 0x22, 0x14, 0x05, 0xa5, 0xe6,
	0x26, 0x53, 0x57, 0x1f, 0x07, 0x4a, 0x2d, 0xf6, 0xad, 0x34, 0xa9, 0xc9, 0x7d, 0x7c, 0xf4, 0x18,
	0x1d, 0x5a, 0x4f, 0x37, 0xdf, 0xb8, 0x3e, 0x81, 0xde, 0xaa, 0xd0, 0x61, 0x8a, 0xf3, 0x5f, 0x19,
	0x0a, 0xc9, 0xb8, 0x6e, 0x2a, 0x4d, 0xea, 0xa8, 0x13, 0x33, 0xdf, 0xb6, 0xd6, 0x17, 0x03, 0xe2,
	0x79, 0x3a, 0x2d, 0x31, 0x77, 0x84, 0x4b, 0x0a, 0x83, 0x31, 0x0f, 0x81, 0x5b, 0x8e, 0x9d, 0x98,
	0x85, 0xd2, 0xfb, 0x90, 0xfc, 0x89, 0x3e, 0xea, 0x09, 0xe4, 0x75, 0x61, 0xb7, 0x2e, 0xdc, 0x6e,
	0xd7, 0xfd, 0xb3, 0xed, 0x74, 0xa4, 0x9f, 0xd4, 0xb8, 0x6f, 0xa4, 0xff, 0x7b, 0xff, 0x5c, 0x66,
	0x3a, 0xb2, 0x87, 0x49, 0x7a, 0xfd, 0x19, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x9a, 0x45, 0x8f, 0x47,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WatchtowerClient is the client API for Watchtower service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WatchtowerClient interface {
	IsSlashableAttestation(ctx context.Context, in *v1alpha1.Attestation, opts ...grpc.CallOption) (*v1alpha1.AttesterSlashing, error)
	IsSlashableBlock(ctx context.Context, in *v1alpha1.BeaconBlockHeader, opts ...grpc.CallOption) (*v1alpha1.ProposerSlashing, error)
	SlashableProposals(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Watchtower_SlashableProposalsClient, error)
	SlashableAttestations(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Watchtower_SlashableAttestationsClient, error)
}

type watchtowerClient struct {
	cc *grpc.ClientConn
}

func NewWatchtowerClient(cc *grpc.ClientConn) WatchtowerClient {
	return &watchtowerClient{cc}
}

func (c *watchtowerClient) IsSlashableAttestation(ctx context.Context, in *v1alpha1.Attestation, opts ...grpc.CallOption) (*v1alpha1.AttesterSlashing, error) {
	out := new(v1alpha1.AttesterSlashing)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1alpha1.Watchtower/IsSlashableAttestation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchtowerClient) IsSlashableBlock(ctx context.Context, in *v1alpha1.BeaconBlockHeader, opts ...grpc.CallOption) (*v1alpha1.ProposerSlashing, error) {
	out := new(v1alpha1.ProposerSlashing)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1alpha1.Watchtower/IsSlashableBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchtowerClient) SlashableProposals(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Watchtower_SlashableProposalsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Watchtower_serviceDesc.Streams[0], "/ethereum.eth.v1alpha1.Watchtower/SlashableProposals", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchtowerSlashableProposalsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Watchtower_SlashableProposalsClient interface {
	Recv() (*v1alpha1.ProposerSlashing, error)
	grpc.ClientStream
}

type watchtowerSlashableProposalsClient struct {
	grpc.ClientStream
}

func (x *watchtowerSlashableProposalsClient) Recv() (*v1alpha1.ProposerSlashing, error) {
	m := new(v1alpha1.ProposerSlashing)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *watchtowerClient) SlashableAttestations(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Watchtower_SlashableAttestationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Watchtower_serviceDesc.Streams[1], "/ethereum.eth.v1alpha1.Watchtower/SlashableAttestations", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchtowerSlashableAttestationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Watchtower_SlashableAttestationsClient interface {
	Recv() (*v1alpha1.AttesterSlashing, error)
	grpc.ClientStream
}

type watchtowerSlashableAttestationsClient struct {
	grpc.ClientStream
}

func (x *watchtowerSlashableAttestationsClient) Recv() (*v1alpha1.AttesterSlashing, error) {
	m := new(v1alpha1.AttesterSlashing)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WatchtowerServer is the server API for Watchtower service.
type WatchtowerServer interface {
	IsSlashableAttestation(context.Context, *v1alpha1.Attestation) (*v1alpha1.AttesterSlashing, error)
	IsSlashableBlock(context.Context, *v1alpha1.BeaconBlockHeader) (*v1alpha1.ProposerSlashing, error)
	SlashableProposals(*empty.Empty, Watchtower_SlashableProposalsServer) error
	SlashableAttestations(*empty.Empty, Watchtower_SlashableAttestationsServer) error
}

func RegisterWatchtowerServer(s *grpc.Server, srv WatchtowerServer) {
	s.RegisterService(&_Watchtower_serviceDesc, srv)
}

func _Watchtower_IsSlashableAttestation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1alpha1.Attestation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchtowerServer).IsSlashableAttestation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1alpha1.Watchtower/IsSlashableAttestation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchtowerServer).IsSlashableAttestation(ctx, req.(*v1alpha1.Attestation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watchtower_IsSlashableBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1alpha1.BeaconBlockHeader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchtowerServer).IsSlashableBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1alpha1.Watchtower/IsSlashableBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchtowerServer).IsSlashableBlock(ctx, req.(*v1alpha1.BeaconBlockHeader))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watchtower_SlashableProposals_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WatchtowerServer).SlashableProposals(m, &watchtowerSlashableProposalsServer{stream})
}

type Watchtower_SlashableProposalsServer interface {
	Send(*v1alpha1.ProposerSlashing) error
	grpc.ServerStream
}

type watchtowerSlashableProposalsServer struct {
	grpc.ServerStream
}

func (x *watchtowerSlashableProposalsServer) Send(m *v1alpha1.ProposerSlashing) error {
	return x.ServerStream.SendMsg(m)
}

func _Watchtower_SlashableAttestations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WatchtowerServer).SlashableAttestations(m, &watchtowerSlashableAttestationsServer{stream})
}

type Watchtower_SlashableAttestationsServer interface {
	Send(*v1alpha1.AttesterSlashing) error
	grpc.ServerStream
}

type watchtowerSlashableAttestationsServer struct {
	grpc.ServerStream
}

func (x *watchtowerSlashableAttestationsServer) Send(m *v1alpha1.AttesterSlashing) error {
	return x.ServerStream.SendMsg(m)
}

var _Watchtower_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ethereum.eth.v1alpha1.Watchtower",
	HandlerType: (*WatchtowerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsSlashableAttestation",
			Handler:    _Watchtower_IsSlashableAttestation_Handler,
		},
		{
			MethodName: "IsSlashableBlock",
			Handler:    _Watchtower_IsSlashableBlock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SlashableProposals",
			Handler:       _Watchtower_SlashableProposals_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SlashableAttestations",
			Handler:       _Watchtower_SlashableAttestations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/sharding/watchtower/watchtower.proto",
}
