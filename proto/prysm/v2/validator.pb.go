// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.8
// source: proto/prysm/v2/validator.proto

package v2

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	github_com_prysmaticlabs_eth2_types "github.com/prysmaticlabs/eth2-types"
	_ "github.com/prysmaticlabs/prysm/proto/eth/ext"
	v1alpha1 "github.com/prysmaticlabs/prysm/proto/eth/v1alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SyncMessageBlockRootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root []byte `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty" ssz-size:"32"`
}

func (x *SyncMessageBlockRootResponse) Reset() {
	*x = SyncMessageBlockRootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_prysm_v2_validator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncMessageBlockRootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncMessageBlockRootResponse) ProtoMessage() {}

func (x *SyncMessageBlockRootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_prysm_v2_validator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncMessageBlockRootResponse.ProtoReflect.Descriptor instead.
func (*SyncMessageBlockRootResponse) Descriptor() ([]byte, []int) {
	return file_proto_prysm_v2_validator_proto_rawDescGZIP(), []int{0}
}

func (x *SyncMessageBlockRootResponse) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

type SyncSubcommitteeIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey []byte                                   `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty" ssz-size:"48"`
	Slot      github_com_prysmaticlabs_eth2_types.Slot `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty" cast-type:"github.com/prysmaticlabs/eth2-types.Slot"`
}

func (x *SyncSubcommitteeIndexRequest) Reset() {
	*x = SyncSubcommitteeIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_prysm_v2_validator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncSubcommitteeIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncSubcommitteeIndexRequest) ProtoMessage() {}

func (x *SyncSubcommitteeIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_prysm_v2_validator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncSubcommitteeIndexRequest.ProtoReflect.Descriptor instead.
func (*SyncSubcommitteeIndexRequest) Descriptor() ([]byte, []int) {
	return file_proto_prysm_v2_validator_proto_rawDescGZIP(), []int{1}
}

func (x *SyncSubcommitteeIndexRequest) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *SyncSubcommitteeIndexRequest) GetSlot() github_com_prysmaticlabs_eth2_types.Slot {
	if x != nil {
		return x.Slot
	}
	return github_com_prysmaticlabs_eth2_types.Slot(0)
}

type SyncCommitteeContributionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot      github_com_prysmaticlabs_eth2_types.Slot `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty" cast-type:"github.com/prysmaticlabs/eth2-types.Slot"`
	PublicKey []byte                                   `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty" spec-name:"pubkey" ssz-size:"48"`
	SubnetId  uint64                                   `protobuf:"varint,3,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
}

func (x *SyncCommitteeContributionRequest) Reset() {
	*x = SyncCommitteeContributionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_prysm_v2_validator_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncCommitteeContributionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncCommitteeContributionRequest) ProtoMessage() {}

func (x *SyncCommitteeContributionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_prysm_v2_validator_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncCommitteeContributionRequest.ProtoReflect.Descriptor instead.
func (*SyncCommitteeContributionRequest) Descriptor() ([]byte, []int) {
	return file_proto_prysm_v2_validator_proto_rawDescGZIP(), []int{2}
}

func (x *SyncCommitteeContributionRequest) GetSlot() github_com_prysmaticlabs_eth2_types.Slot {
	if x != nil {
		return x.Slot
	}
	return github_com_prysmaticlabs_eth2_types.Slot(0)
}

func (x *SyncCommitteeContributionRequest) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *SyncCommitteeContributionRequest) GetSubnetId() uint64 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

type SyncSubcommitteeIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indices []uint64 `protobuf:"varint,1,rep,packed,name=indices,proto3" json:"indices,omitempty"`
}

func (x *SyncSubcommitteeIndexResponse) Reset() {
	*x = SyncSubcommitteeIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_prysm_v2_validator_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncSubcommitteeIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncSubcommitteeIndexResponse) ProtoMessage() {}

func (x *SyncSubcommitteeIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_prysm_v2_validator_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncSubcommitteeIndexResponse.ProtoReflect.Descriptor instead.
func (*SyncSubcommitteeIndexResponse) Descriptor() ([]byte, []int) {
	return file_proto_prysm_v2_validator_proto_rawDescGZIP(), []int{3}
}

func (x *SyncSubcommitteeIndexResponse) GetIndices() []uint64 {
	if x != nil {
		return x.Indices
	}
	return nil
}

var File_proto_prysm_v2_validator_proto protoreflect.FileDescriptor

var file_proto_prysm_v2_validator_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x79, 0x73, 0x6d, 0x2f, 0x76, 0x32,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x79, 0x73, 0x6d,
	0x2e, 0x76, 0x32, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x74, 0x68, 0x2f, 0x65, 0x78, 0x74, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x65, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x79, 0x73, 0x6d, 0x2f, 0x76, 0x32, 0x2f,
	0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x79, 0x73, 0x6d, 0x2f,
	0x76, 0x32, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3a, 0x0a, 0x1c, 0x53, 0x79, 0x6e, 0x63, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0x8a, 0xb5, 0x18, 0x02, 0x33, 0x32, 0x52, 0x04, 0x72,
	0x6f, 0x6f, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x1c, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x75, 0x62, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0x8a, 0xb5, 0x18, 0x02, 0x34, 0x38,
	0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x04, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2c, 0x82, 0xb5, 0x18, 0x28, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x79, 0x73, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x65, 0x74, 0x68, 0x32, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x22, 0xb2, 0x01,
	0x0a, 0x20, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x2c, 0x82, 0xb5, 0x18, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x70, 0x72, 0x79, 0x73, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x65,
	0x74, 0x68, 0x32, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x10, 0x8a, 0xb5, 0x18, 0x02, 0x34, 0x38,
	0x9a, 0xb5, 0x18, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x49, 0x64, 0x22, 0x39, 0x0a, 0x1d, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x75, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x32, 0xd1, 0x08,
	0x0a, 0x19, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x74, 0x61, 0x69, 0x72, 0x12, 0x7b, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x23, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x79, 0x73, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x6c, 0x74, 0x61,
	0x69, 0x72, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x65, 0x74, 0x68,
	0x2f, 0x76, 0x32, 0x70, 0x72, 0x79, 0x73, 0x6d, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x88, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2a, 0x2e, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x79, 0x73, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41,
	0x6c, 0x74, 0x61, 0x69, 0x72, 0x1a, 0x26, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x2e, 0x65, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x70, 0x72, 0x79, 0x73, 0x6d, 0x2f, 0x76, 0x32,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x3a, 0x01, 0x2a, 0x12, 0x97, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2f, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x2e, 0x70, 0x72, 0x79, 0x73, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d,
	0x12, 0x2b, 0x2f, 0x70, 0x72, 0x79, 0x73, 0x6d, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x81, 0x01,
	0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x27, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x70,
	0x72, 0x79, 0x73, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f, 0x70,
	0x72, 0x79, 0x73, 0x6d, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x01,
	0x2a, 0x12, 0xa8, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x75, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2f,
	0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x79, 0x73, 0x6d, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x79, 0x73, 0x6d,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x70, 0x72, 0x79, 0x73,
	0x6d, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xb8, 0x01, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x79, 0x73, 0x6d, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x70, 0x72,
	0x79, 0x73, 0x6d, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x70, 0x72, 0x79, 0x73, 0x6d,
	0x2f, 0x76, 0x32, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x3a, 0x01, 0x2a, 0x12, 0xa7, 0x01, 0x0a, 0x20, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x2d, 0x2e, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x79, 0x73, 0x6d, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x22, 0x31, 0x2f, 0x70, 0x72,
	0x79, 0x73, 0x6d, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x2f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x3a, 0x01,
	0x2a, 0x42, 0x83, 0x01, 0x0a, 0x15, 0x6f, 0x72, 0x67, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x2e, 0x70, 0x72, 0x79, 0x73, 0x6d, 0x2e, 0x76, 0x32, 0x42, 0x0e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x30, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x79, 0x73, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x70, 0x72, 0x79, 0x73, 0x6d, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x79, 0x73, 0x6d, 0x2f, 0x76, 0x32, 0x3b, 0x76, 0x32, 0xaa,
	0x02, 0x11, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x79, 0x73, 0x6d,
	0x2e, 0x56, 0x32, 0xca, 0x02, 0x11, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5c, 0x50,
	0x72, 0x79, 0x73, 0x6d, 0x5c, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_prysm_v2_validator_proto_rawDescOnce sync.Once
	file_proto_prysm_v2_validator_proto_rawDescData = file_proto_prysm_v2_validator_proto_rawDesc
)

func file_proto_prysm_v2_validator_proto_rawDescGZIP() []byte {
	file_proto_prysm_v2_validator_proto_rawDescOnce.Do(func() {
		file_proto_prysm_v2_validator_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_prysm_v2_validator_proto_rawDescData)
	})
	return file_proto_prysm_v2_validator_proto_rawDescData
}

var file_proto_prysm_v2_validator_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_prysm_v2_validator_proto_goTypes = []interface{}{
	(*SyncMessageBlockRootResponse)(nil),     // 0: ethereum.prysm.v2.SyncMessageBlockRootResponse
	(*SyncSubcommitteeIndexRequest)(nil),     // 1: ethereum.prysm.v2.SyncSubcommitteeIndexRequest
	(*SyncCommitteeContributionRequest)(nil), // 2: ethereum.prysm.v2.SyncCommitteeContributionRequest
	(*SyncSubcommitteeIndexResponse)(nil),    // 3: ethereum.prysm.v2.SyncSubcommitteeIndexResponse
	(*v1alpha1.BlockRequest)(nil),            // 4: ethereum.eth.v1alpha1.BlockRequest
	(*SignedBeaconBlockAltair)(nil),          // 5: ethereum.prysm.v2.SignedBeaconBlockAltair
	(*empty.Empty)(nil),                      // 6: google.protobuf.Empty
	(*SyncCommitteeMessage)(nil),             // 7: ethereum.prysm.v2.SyncCommitteeMessage
	(*SignedContributionAndProof)(nil),       // 8: ethereum.prysm.v2.SignedContributionAndProof
	(*BeaconBlockAltair)(nil),                // 9: ethereum.prysm.v2.BeaconBlockAltair
	(*v1alpha1.ProposeResponse)(nil),         // 10: ethereum.eth.v1alpha1.ProposeResponse
	(*SyncCommitteeContribution)(nil),        // 11: ethereum.prysm.v2.SyncCommitteeContribution
}
var file_proto_prysm_v2_validator_proto_depIdxs = []int32{
	4,  // 0: ethereum.prysm.v2.BeaconNodeValidatorAltair.GetBlock:input_type -> ethereum.eth.v1alpha1.BlockRequest
	5,  // 1: ethereum.prysm.v2.BeaconNodeValidatorAltair.ProposeBlock:input_type -> ethereum.prysm.v2.SignedBeaconBlockAltair
	6,  // 2: ethereum.prysm.v2.BeaconNodeValidatorAltair.GetSyncMessageBlockRoot:input_type -> google.protobuf.Empty
	7,  // 3: ethereum.prysm.v2.BeaconNodeValidatorAltair.SubmitSyncMessage:input_type -> ethereum.prysm.v2.SyncCommitteeMessage
	1,  // 4: ethereum.prysm.v2.BeaconNodeValidatorAltair.GetSyncSubcommitteeIndex:input_type -> ethereum.prysm.v2.SyncSubcommitteeIndexRequest
	2,  // 5: ethereum.prysm.v2.BeaconNodeValidatorAltair.GetSyncCommitteeContribution:input_type -> ethereum.prysm.v2.SyncCommitteeContributionRequest
	8,  // 6: ethereum.prysm.v2.BeaconNodeValidatorAltair.SubmitSignedContributionAndProof:input_type -> ethereum.prysm.v2.SignedContributionAndProof
	9,  // 7: ethereum.prysm.v2.BeaconNodeValidatorAltair.GetBlock:output_type -> ethereum.prysm.v2.BeaconBlockAltair
	10, // 8: ethereum.prysm.v2.BeaconNodeValidatorAltair.ProposeBlock:output_type -> ethereum.eth.v1alpha1.ProposeResponse
	0,  // 9: ethereum.prysm.v2.BeaconNodeValidatorAltair.GetSyncMessageBlockRoot:output_type -> ethereum.prysm.v2.SyncMessageBlockRootResponse
	6,  // 10: ethereum.prysm.v2.BeaconNodeValidatorAltair.SubmitSyncMessage:output_type -> google.protobuf.Empty
	3,  // 11: ethereum.prysm.v2.BeaconNodeValidatorAltair.GetSyncSubcommitteeIndex:output_type -> ethereum.prysm.v2.SyncSubcommitteeIndexResponse
	11, // 12: ethereum.prysm.v2.BeaconNodeValidatorAltair.GetSyncCommitteeContribution:output_type -> ethereum.prysm.v2.SyncCommitteeContribution
	6,  // 13: ethereum.prysm.v2.BeaconNodeValidatorAltair.SubmitSignedContributionAndProof:output_type -> google.protobuf.Empty
	7,  // [7:14] is the sub-list for method output_type
	0,  // [0:7] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_proto_prysm_v2_validator_proto_init() }
func file_proto_prysm_v2_validator_proto_init() {
	if File_proto_prysm_v2_validator_proto != nil {
		return
	}
	file_proto_prysm_v2_beacon_block_proto_init()
	file_proto_prysm_v2_sync_committee_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_prysm_v2_validator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncMessageBlockRootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_prysm_v2_validator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncSubcommitteeIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_prysm_v2_validator_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncCommitteeContributionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_prysm_v2_validator_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncSubcommitteeIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_prysm_v2_validator_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_prysm_v2_validator_proto_goTypes,
		DependencyIndexes: file_proto_prysm_v2_validator_proto_depIdxs,
		MessageInfos:      file_proto_prysm_v2_validator_proto_msgTypes,
	}.Build()
	File_proto_prysm_v2_validator_proto = out.File
	file_proto_prysm_v2_validator_proto_rawDesc = nil
	file_proto_prysm_v2_validator_proto_goTypes = nil
	file_proto_prysm_v2_validator_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BeaconNodeValidatorAltairClient is the client API for BeaconNodeValidatorAltair service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BeaconNodeValidatorAltairClient interface {
	GetBlock(ctx context.Context, in *v1alpha1.BlockRequest, opts ...grpc.CallOption) (*BeaconBlockAltair, error)
	ProposeBlock(ctx context.Context, in *SignedBeaconBlockAltair, opts ...grpc.CallOption) (*v1alpha1.ProposeResponse, error)
	GetSyncMessageBlockRoot(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SyncMessageBlockRootResponse, error)
	SubmitSyncMessage(ctx context.Context, in *SyncCommitteeMessage, opts ...grpc.CallOption) (*empty.Empty, error)
	GetSyncSubcommitteeIndex(ctx context.Context, in *SyncSubcommitteeIndexRequest, opts ...grpc.CallOption) (*SyncSubcommitteeIndexResponse, error)
	GetSyncCommitteeContribution(ctx context.Context, in *SyncCommitteeContributionRequest, opts ...grpc.CallOption) (*SyncCommitteeContribution, error)
	SubmitSignedContributionAndProof(ctx context.Context, in *SignedContributionAndProof, opts ...grpc.CallOption) (*empty.Empty, error)
}

type beaconNodeValidatorAltairClient struct {
	cc grpc.ClientConnInterface
}

func NewBeaconNodeValidatorAltairClient(cc grpc.ClientConnInterface) BeaconNodeValidatorAltairClient {
	return &beaconNodeValidatorAltairClient{cc}
}

func (c *beaconNodeValidatorAltairClient) GetBlock(ctx context.Context, in *v1alpha1.BlockRequest, opts ...grpc.CallOption) (*BeaconBlockAltair, error) {
	out := new(BeaconBlockAltair)
	err := c.cc.Invoke(ctx, "/ethereum.prysm.v2.BeaconNodeValidatorAltair/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconNodeValidatorAltairClient) ProposeBlock(ctx context.Context, in *SignedBeaconBlockAltair, opts ...grpc.CallOption) (*v1alpha1.ProposeResponse, error) {
	out := new(v1alpha1.ProposeResponse)
	err := c.cc.Invoke(ctx, "/ethereum.prysm.v2.BeaconNodeValidatorAltair/ProposeBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconNodeValidatorAltairClient) GetSyncMessageBlockRoot(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SyncMessageBlockRootResponse, error) {
	out := new(SyncMessageBlockRootResponse)
	err := c.cc.Invoke(ctx, "/ethereum.prysm.v2.BeaconNodeValidatorAltair/GetSyncMessageBlockRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconNodeValidatorAltairClient) SubmitSyncMessage(ctx context.Context, in *SyncCommitteeMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ethereum.prysm.v2.BeaconNodeValidatorAltair/SubmitSyncMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconNodeValidatorAltairClient) GetSyncSubcommitteeIndex(ctx context.Context, in *SyncSubcommitteeIndexRequest, opts ...grpc.CallOption) (*SyncSubcommitteeIndexResponse, error) {
	out := new(SyncSubcommitteeIndexResponse)
	err := c.cc.Invoke(ctx, "/ethereum.prysm.v2.BeaconNodeValidatorAltair/GetSyncSubcommitteeIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconNodeValidatorAltairClient) GetSyncCommitteeContribution(ctx context.Context, in *SyncCommitteeContributionRequest, opts ...grpc.CallOption) (*SyncCommitteeContribution, error) {
	out := new(SyncCommitteeContribution)
	err := c.cc.Invoke(ctx, "/ethereum.prysm.v2.BeaconNodeValidatorAltair/GetSyncCommitteeContribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconNodeValidatorAltairClient) SubmitSignedContributionAndProof(ctx context.Context, in *SignedContributionAndProof, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ethereum.prysm.v2.BeaconNodeValidatorAltair/SubmitSignedContributionAndProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeaconNodeValidatorAltairServer is the server API for BeaconNodeValidatorAltair service.
type BeaconNodeValidatorAltairServer interface {
	GetBlock(context.Context, *v1alpha1.BlockRequest) (*BeaconBlockAltair, error)
	ProposeBlock(context.Context, *SignedBeaconBlockAltair) (*v1alpha1.ProposeResponse, error)
	GetSyncMessageBlockRoot(context.Context, *empty.Empty) (*SyncMessageBlockRootResponse, error)
	SubmitSyncMessage(context.Context, *SyncCommitteeMessage) (*empty.Empty, error)
	GetSyncSubcommitteeIndex(context.Context, *SyncSubcommitteeIndexRequest) (*SyncSubcommitteeIndexResponse, error)
	GetSyncCommitteeContribution(context.Context, *SyncCommitteeContributionRequest) (*SyncCommitteeContribution, error)
	SubmitSignedContributionAndProof(context.Context, *SignedContributionAndProof) (*empty.Empty, error)
}

// UnimplementedBeaconNodeValidatorAltairServer can be embedded to have forward compatible implementations.
type UnimplementedBeaconNodeValidatorAltairServer struct {
}

func (*UnimplementedBeaconNodeValidatorAltairServer) GetBlock(context.Context, *v1alpha1.BlockRequest) (*BeaconBlockAltair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (*UnimplementedBeaconNodeValidatorAltairServer) ProposeBlock(context.Context, *SignedBeaconBlockAltair) (*v1alpha1.ProposeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeBlock not implemented")
}
func (*UnimplementedBeaconNodeValidatorAltairServer) GetSyncMessageBlockRoot(context.Context, *empty.Empty) (*SyncMessageBlockRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncMessageBlockRoot not implemented")
}
func (*UnimplementedBeaconNodeValidatorAltairServer) SubmitSyncMessage(context.Context, *SyncCommitteeMessage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSyncMessage not implemented")
}
func (*UnimplementedBeaconNodeValidatorAltairServer) GetSyncSubcommitteeIndex(context.Context, *SyncSubcommitteeIndexRequest) (*SyncSubcommitteeIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncSubcommitteeIndex not implemented")
}
func (*UnimplementedBeaconNodeValidatorAltairServer) GetSyncCommitteeContribution(context.Context, *SyncCommitteeContributionRequest) (*SyncCommitteeContribution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncCommitteeContribution not implemented")
}
func (*UnimplementedBeaconNodeValidatorAltairServer) SubmitSignedContributionAndProof(context.Context, *SignedContributionAndProof) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSignedContributionAndProof not implemented")
}

func RegisterBeaconNodeValidatorAltairServer(s *grpc.Server, srv BeaconNodeValidatorAltairServer) {
	s.RegisterService(&_BeaconNodeValidatorAltair_serviceDesc, srv)
}

func _BeaconNodeValidatorAltair_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1alpha1.BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconNodeValidatorAltairServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.prysm.v2.BeaconNodeValidatorAltair/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconNodeValidatorAltairServer).GetBlock(ctx, req.(*v1alpha1.BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconNodeValidatorAltair_ProposeBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedBeaconBlockAltair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconNodeValidatorAltairServer).ProposeBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.prysm.v2.BeaconNodeValidatorAltair/ProposeBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconNodeValidatorAltairServer).ProposeBlock(ctx, req.(*SignedBeaconBlockAltair))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconNodeValidatorAltair_GetSyncMessageBlockRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconNodeValidatorAltairServer).GetSyncMessageBlockRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.prysm.v2.BeaconNodeValidatorAltair/GetSyncMessageBlockRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconNodeValidatorAltairServer).GetSyncMessageBlockRoot(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconNodeValidatorAltair_SubmitSyncMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncCommitteeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconNodeValidatorAltairServer).SubmitSyncMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.prysm.v2.BeaconNodeValidatorAltair/SubmitSyncMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconNodeValidatorAltairServer).SubmitSyncMessage(ctx, req.(*SyncCommitteeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconNodeValidatorAltair_GetSyncSubcommitteeIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncSubcommitteeIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconNodeValidatorAltairServer).GetSyncSubcommitteeIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.prysm.v2.BeaconNodeValidatorAltair/GetSyncSubcommitteeIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconNodeValidatorAltairServer).GetSyncSubcommitteeIndex(ctx, req.(*SyncSubcommitteeIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconNodeValidatorAltair_GetSyncCommitteeContribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncCommitteeContributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconNodeValidatorAltairServer).GetSyncCommitteeContribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.prysm.v2.BeaconNodeValidatorAltair/GetSyncCommitteeContribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconNodeValidatorAltairServer).GetSyncCommitteeContribution(ctx, req.(*SyncCommitteeContributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconNodeValidatorAltair_SubmitSignedContributionAndProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedContributionAndProof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconNodeValidatorAltairServer).SubmitSignedContributionAndProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.prysm.v2.BeaconNodeValidatorAltair/SubmitSignedContributionAndProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconNodeValidatorAltairServer).SubmitSignedContributionAndProof(ctx, req.(*SignedContributionAndProof))
	}
	return interceptor(ctx, in, info, handler)
}

var _BeaconNodeValidatorAltair_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ethereum.prysm.v2.BeaconNodeValidatorAltair",
	HandlerType: (*BeaconNodeValidatorAltairServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlock",
			Handler:    _BeaconNodeValidatorAltair_GetBlock_Handler,
		},
		{
			MethodName: "ProposeBlock",
			Handler:    _BeaconNodeValidatorAltair_ProposeBlock_Handler,
		},
		{
			MethodName: "GetSyncMessageBlockRoot",
			Handler:    _BeaconNodeValidatorAltair_GetSyncMessageBlockRoot_Handler,
		},
		{
			MethodName: "SubmitSyncMessage",
			Handler:    _BeaconNodeValidatorAltair_SubmitSyncMessage_Handler,
		},
		{
			MethodName: "GetSyncSubcommitteeIndex",
			Handler:    _BeaconNodeValidatorAltair_GetSyncSubcommitteeIndex_Handler,
		},
		{
			MethodName: "GetSyncCommitteeContribution",
			Handler:    _BeaconNodeValidatorAltair_GetSyncCommitteeContribution_Handler,
		},
		{
			MethodName: "SubmitSignedContributionAndProof",
			Handler:    _BeaconNodeValidatorAltair_SubmitSignedContributionAndProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/prysm/v2/validator.proto",
}
