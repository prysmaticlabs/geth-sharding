// Copyright 2020 Prysmatic Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package ethereum.eth.v1;

import "google/api/annotations.proto";
import "google/protobuf/descriptor.proto";
import "proto/eth/ext/options.proto";
import "proto/gateway/event_source.proto";

option csharp_namespace = "Ethereum.Eth.v1";
option go_package = "github.com/prysmaticlabs/prysm/proto/eth/v1";
option java_multiple_files = true;
option java_outer_classname = "BeaconEventsProto";
option java_package = "org.ethereum.eth.v1";
option php_namespace = "Ethereum\\Eth\\v1";

// Events API
//
// This service is defined in the upstream eth2.0-apis repository (eth2.0-APIs/apis/debug).
service Events {
    // StreamEvents --
    rpc StreamEvents(StreamEventsRequest) returns (stream gateway.EventSource) {
      option (google.api.http) = {
        get: "/eth/v1/events"
      };
    }
}

message StreamEventsRequest {
    repeated string topics = 1;
}

message EventHead {
    uint64 slot = 1;
    bytes block = 2;
    bytes state = 3;
    bool epoch_transition = 4;
    bytes previous_duty_dependent_root = 5;
    bytes current_duty_dependent_root = 6;
}

message EventBlock {
  uint64 slot = 1;
  bytes block = 2;
}

message EventChainReorg {
    uint64 slot = 1;
    uint64 depth = 2;
    bytes old_head_block = 3;
    bytes new_head_block = 4;
    bytes old_head_state = 5;
    bytes new_head_state = 6;
    uint64 epoch = 7;
}

message EventFinalizedCheckpoint {
  // A checkpoint is every epoch's first slot. The goal of Casper FFG
  // is to link the check points together for justification and finalization.
  bytes block = 1;

  bytes state = 2;

  // Epoch the checkpoint references.
  uint64 epoch = 3 [(ethereum.eth.ext.cast_type) = "github.com/prysmaticlabs/eth2-types.Epoch"];

  // Block root of the checkpoint references.
//  bytes root = 2 [(ethereum.eth.ext.ssz_size) = "32"];
}
