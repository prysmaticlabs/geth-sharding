// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/prysmaticlabs/prysm/proto/beacon/rpc/v1 (interfaces: BeaconChainServiceServer,BeaconChainService_WaitForChainStartServer)

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	types "github.com/gogo/protobuf/types"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/prysmaticlabs/prysm/proto/beacon/rpc/v1"
	v1alpha1 "github.com/prysmaticlabs/prysm/proto/eth/v1alpha1"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockBeaconChainServiceServer is a mock of BeaconChainServiceServer interface
type MockBeaconChainServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconChainServiceServerMockRecorder
}

// MockBeaconChainServiceServerMockRecorder is the mock recorder for MockBeaconChainServiceServer
type MockBeaconChainServiceServerMockRecorder struct {
	mock *MockBeaconChainServiceServer
}

// NewMockBeaconChainServiceServer creates a new mock instance
func NewMockBeaconChainServiceServer(ctrl *gomock.Controller) *MockBeaconChainServiceServer {
	mock := &MockBeaconChainServiceServer{ctrl: ctrl}
	mock.recorder = &MockBeaconChainServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBeaconChainServiceServer) EXPECT() *MockBeaconChainServiceServerMockRecorder {
	return m.recorder
}

// BlockTree mocks base method
func (m *MockBeaconChainServiceServer) BlockTree(arg0 context.Context, arg1 *types.Empty) (*v1.BlockTreeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockTree", arg0, arg1)
	ret0, _ := ret[0].(*v1.BlockTreeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockTree indicates an expected call of BlockTree
func (mr *MockBeaconChainServiceServerMockRecorder) BlockTree(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockTree", reflect.TypeOf((*MockBeaconChainServiceServer)(nil).BlockTree), arg0, arg1)
}

// CanonicalHead mocks base method
func (m *MockBeaconChainServiceServer) CanonicalHead(arg0 context.Context, arg1 *types.Empty) (*v1alpha1.BeaconBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanonicalHead", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.BeaconBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanonicalHead indicates an expected call of CanonicalHead
func (mr *MockBeaconChainServiceServerMockRecorder) CanonicalHead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanonicalHead", reflect.TypeOf((*MockBeaconChainServiceServer)(nil).CanonicalHead), arg0, arg1)
}

// WaitForChainStart mocks base method
func (m *MockBeaconChainServiceServer) WaitForChainStart(arg0 *types.Empty, arg1 v1.BeaconChainService_WaitForChainStartServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForChainStart", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForChainStart indicates an expected call of WaitForChainStart
func (mr *MockBeaconChainServiceServerMockRecorder) WaitForChainStart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForChainStart", reflect.TypeOf((*MockBeaconChainServiceServer)(nil).WaitForChainStart), arg0, arg1)
}

// MockBeaconChainService_WaitForChainStartServer is a mock of BeaconChainService_WaitForChainStartServer interface
type MockBeaconChainService_WaitForChainStartServer struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconChainService_WaitForChainStartServerMockRecorder
}

// MockBeaconChainService_WaitForChainStartServerMockRecorder is the mock recorder for MockBeaconChainService_WaitForChainStartServer
type MockBeaconChainService_WaitForChainStartServerMockRecorder struct {
	mock *MockBeaconChainService_WaitForChainStartServer
}

// NewMockBeaconChainService_WaitForChainStartServer creates a new mock instance
func NewMockBeaconChainService_WaitForChainStartServer(ctrl *gomock.Controller) *MockBeaconChainService_WaitForChainStartServer {
	mock := &MockBeaconChainService_WaitForChainStartServer{ctrl: ctrl}
	mock.recorder = &MockBeaconChainService_WaitForChainStartServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBeaconChainService_WaitForChainStartServer) EXPECT() *MockBeaconChainService_WaitForChainStartServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockBeaconChainService_WaitForChainStartServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockBeaconChainService_WaitForChainStartServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBeaconChainService_WaitForChainStartServer)(nil).Context))
}

// RecvMsg mocks base method
func (m *MockBeaconChainService_WaitForChainStartServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockBeaconChainService_WaitForChainStartServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBeaconChainService_WaitForChainStartServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockBeaconChainService_WaitForChainStartServer) Send(arg0 *v1.ChainStartResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockBeaconChainService_WaitForChainStartServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBeaconChainService_WaitForChainStartServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockBeaconChainService_WaitForChainStartServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockBeaconChainService_WaitForChainStartServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockBeaconChainService_WaitForChainStartServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockBeaconChainService_WaitForChainStartServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockBeaconChainService_WaitForChainStartServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBeaconChainService_WaitForChainStartServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockBeaconChainService_WaitForChainStartServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockBeaconChainService_WaitForChainStartServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBeaconChainService_WaitForChainStartServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockBeaconChainService_WaitForChainStartServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockBeaconChainService_WaitForChainStartServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockBeaconChainService_WaitForChainStartServer)(nil).SetTrailer), arg0)
}
