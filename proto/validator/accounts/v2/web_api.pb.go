// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/validator/accounts/v2/web_api.proto

package ethereum_validator_accounts_v2

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "github.com/prysmaticlabs/ethereumapis/eth/v1alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreateWalletRequest_KeyManagerKind int32

const (
	CreateWalletRequest_UNKNOWN CreateWalletRequest_KeyManagerKind = 0
	CreateWalletRequest_direct  CreateWalletRequest_KeyManagerKind = 1
	CreateWalletRequest_derived CreateWalletRequest_KeyManagerKind = 2
	CreateWalletRequest_remote  CreateWalletRequest_KeyManagerKind = 3
)

var CreateWalletRequest_KeyManagerKind_name = map[int32]string{
	0: "UNKNOWN",
	1: "direct",
	2: "derived",
	3: "remote",
}

var CreateWalletRequest_KeyManagerKind_value = map[string]int32{
	"UNKNOWN": 0,
	"direct":  1,
	"derived": 2,
	"remote":  3,
}

func (x CreateWalletRequest_KeyManagerKind) String() string {
	return proto.EnumName(CreateWalletRequest_KeyManagerKind_name, int32(x))
}

func (CreateWalletRequest_KeyManagerKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8a5153635bfe042e, []int{0, 0}
}

type CreateWalletRequest struct {
	WalletPath           string                             `protobuf:"bytes,1,opt,name=wallet_path,json=walletPath,proto3" json:"wallet_path,omitempty"`
	KeyManager           CreateWalletRequest_KeyManagerKind `protobuf:"varint,2,opt,name=key_manager,json=keyManager,proto3,enum=ethereum.validator.accounts.v2.CreateWalletRequest_KeyManagerKind" json:"key_manager,omitempty"`
	WalletPassword       string                             `protobuf:"bytes,3,opt,name=wallet_password,json=walletPassword,proto3" json:"wallet_password,omitempty"`
	RemoteAddr           string                             `protobuf:"bytes,4,opt,name=remote_addr,json=remoteAddr,proto3" json:"remote_addr,omitempty"`
	RemoteCrtPath        string                             `protobuf:"bytes,5,opt,name=remote_crt_path,json=remoteCrtPath,proto3" json:"remote_crt_path,omitempty"`
	RemoteKeyPath        string                             `protobuf:"bytes,6,opt,name=remote_key_path,json=remoteKeyPath,proto3" json:"remote_key_path,omitempty"`
	RemoteCaCrtPath      string                             `protobuf:"bytes,7,opt,name=remote_ca_crt_path,json=remoteCaCrtPath,proto3" json:"remote_ca_crt_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *CreateWalletRequest) Reset()         { *m = CreateWalletRequest{} }
func (m *CreateWalletRequest) String() string { return proto.CompactTextString(m) }
func (*CreateWalletRequest) ProtoMessage()    {}
func (*CreateWalletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5153635bfe042e, []int{0}
}
func (m *CreateWalletRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateWalletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateWalletRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateWalletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateWalletRequest.Merge(m, src)
}
func (m *CreateWalletRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateWalletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateWalletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateWalletRequest proto.InternalMessageInfo

func (m *CreateWalletRequest) GetWalletPath() string {
	if m != nil {
		return m.WalletPath
	}
	return ""
}

func (m *CreateWalletRequest) GetKeyManager() CreateWalletRequest_KeyManagerKind {
	if m != nil {
		return m.KeyManager
	}
	return CreateWalletRequest_UNKNOWN
}

func (m *CreateWalletRequest) GetWalletPassword() string {
	if m != nil {
		return m.WalletPassword
	}
	return ""
}

func (m *CreateWalletRequest) GetRemoteAddr() string {
	if m != nil {
		return m.RemoteAddr
	}
	return ""
}

func (m *CreateWalletRequest) GetRemoteCrtPath() string {
	if m != nil {
		return m.RemoteCrtPath
	}
	return ""
}

func (m *CreateWalletRequest) GetRemoteKeyPath() string {
	if m != nil {
		return m.RemoteKeyPath
	}
	return ""
}

func (m *CreateWalletRequest) GetRemoteCaCrtPath() string {
	if m != nil {
		return m.RemoteCaCrtPath
	}
	return ""
}

type WalletResponse struct {
	WalletPath           string                            `protobuf:"bytes,1,opt,name=wallet_path,json=walletPath,proto3" json:"wallet_path,omitempty"`
	KeyManagerConfigs    *WalletResponse_KeyManagerConfigs `protobuf:"bytes,2,opt,name=key_manager_configs,json=keyManagerConfigs,proto3" json:"key_manager_configs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *WalletResponse) Reset()         { *m = WalletResponse{} }
func (m *WalletResponse) String() string { return proto.CompactTextString(m) }
func (*WalletResponse) ProtoMessage()    {}
func (*WalletResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5153635bfe042e, []int{1}
}
func (m *WalletResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WalletResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WalletResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WalletResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletResponse.Merge(m, src)
}
func (m *WalletResponse) XXX_Size() int {
	return m.Size()
}
func (m *WalletResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WalletResponse proto.InternalMessageInfo

func (m *WalletResponse) GetWalletPath() string {
	if m != nil {
		return m.WalletPath
	}
	return ""
}

func (m *WalletResponse) GetKeyManagerConfigs() *WalletResponse_KeyManagerConfigs {
	if m != nil {
		return m.KeyManagerConfigs
	}
	return nil
}

type WalletResponse_KeyManagerConfigs struct {
	Configs              map[string]string `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *WalletResponse_KeyManagerConfigs) Reset()         { *m = WalletResponse_KeyManagerConfigs{} }
func (m *WalletResponse_KeyManagerConfigs) String() string { return proto.CompactTextString(m) }
func (*WalletResponse_KeyManagerConfigs) ProtoMessage()    {}
func (*WalletResponse_KeyManagerConfigs) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5153635bfe042e, []int{1, 0}
}
func (m *WalletResponse_KeyManagerConfigs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WalletResponse_KeyManagerConfigs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WalletResponse_KeyManagerConfigs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WalletResponse_KeyManagerConfigs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletResponse_KeyManagerConfigs.Merge(m, src)
}
func (m *WalletResponse_KeyManagerConfigs) XXX_Size() int {
	return m.Size()
}
func (m *WalletResponse_KeyManagerConfigs) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletResponse_KeyManagerConfigs.DiscardUnknown(m)
}

var xxx_messageInfo_WalletResponse_KeyManagerConfigs proto.InternalMessageInfo

func (m *WalletResponse_KeyManagerConfigs) GetConfigs() map[string]string {
	if m != nil {
		return m.Configs
	}
	return nil
}

type EditWalletConfigRequest struct {
	RemoteAddr           string   `protobuf:"bytes,1,opt,name=remote_addr,json=remoteAddr,proto3" json:"remote_addr,omitempty"`
	RemoteCrtPath        string   `protobuf:"bytes,2,opt,name=remote_crt_path,json=remoteCrtPath,proto3" json:"remote_crt_path,omitempty"`
	RemoteKeyPath        string   `protobuf:"bytes,3,opt,name=remote_key_path,json=remoteKeyPath,proto3" json:"remote_key_path,omitempty"`
	RemoteCaCrtPath      string   `protobuf:"bytes,4,opt,name=remote_ca_crt_path,json=remoteCaCrtPath,proto3" json:"remote_ca_crt_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EditWalletConfigRequest) Reset()         { *m = EditWalletConfigRequest{} }
func (m *EditWalletConfigRequest) String() string { return proto.CompactTextString(m) }
func (*EditWalletConfigRequest) ProtoMessage()    {}
func (*EditWalletConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5153635bfe042e, []int{2}
}
func (m *EditWalletConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EditWalletConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EditWalletConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EditWalletConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditWalletConfigRequest.Merge(m, src)
}
func (m *EditWalletConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *EditWalletConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EditWalletConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EditWalletConfigRequest proto.InternalMessageInfo

func (m *EditWalletConfigRequest) GetRemoteAddr() string {
	if m != nil {
		return m.RemoteAddr
	}
	return ""
}

func (m *EditWalletConfigRequest) GetRemoteCrtPath() string {
	if m != nil {
		return m.RemoteCrtPath
	}
	return ""
}

func (m *EditWalletConfigRequest) GetRemoteKeyPath() string {
	if m != nil {
		return m.RemoteKeyPath
	}
	return ""
}

func (m *EditWalletConfigRequest) GetRemoteCaCrtPath() string {
	if m != nil {
		return m.RemoteCaCrtPath
	}
	return ""
}

type CreateAccountResponse struct {
	AccountConfigs       *CreateAccountResponse_AccountConfigs `protobuf:"bytes,2,opt,name=account_configs,json=accountConfigs,proto3" json:"account_configs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *CreateAccountResponse) Reset()         { *m = CreateAccountResponse{} }
func (m *CreateAccountResponse) String() string { return proto.CompactTextString(m) }
func (*CreateAccountResponse) ProtoMessage()    {}
func (*CreateAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5153635bfe042e, []int{3}
}
func (m *CreateAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAccountResponse.Merge(m, src)
}
func (m *CreateAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAccountResponse proto.InternalMessageInfo

func (m *CreateAccountResponse) GetAccountConfigs() *CreateAccountResponse_AccountConfigs {
	if m != nil {
		return m.AccountConfigs
	}
	return nil
}

type CreateAccountResponse_AccountConfigs struct {
	Configs              map[string]string `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateAccountResponse_AccountConfigs) Reset()         { *m = CreateAccountResponse_AccountConfigs{} }
func (m *CreateAccountResponse_AccountConfigs) String() string { return proto.CompactTextString(m) }
func (*CreateAccountResponse_AccountConfigs) ProtoMessage()    {}
func (*CreateAccountResponse_AccountConfigs) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5153635bfe042e, []int{3, 0}
}
func (m *CreateAccountResponse_AccountConfigs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAccountResponse_AccountConfigs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAccountResponse_AccountConfigs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAccountResponse_AccountConfigs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAccountResponse_AccountConfigs.Merge(m, src)
}
func (m *CreateAccountResponse_AccountConfigs) XXX_Size() int {
	return m.Size()
}
func (m *CreateAccountResponse_AccountConfigs) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAccountResponse_AccountConfigs.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAccountResponse_AccountConfigs proto.InternalMessageInfo

func (m *CreateAccountResponse_AccountConfigs) GetConfigs() map[string]string {
	if m != nil {
		return m.Configs
	}
	return nil
}

type ListAccountsRequest struct {
	GetDepositTx         bool     `protobuf:"varint,1,opt,name=get_deposit_tx,json=getDepositTx,proto3" json:"get_deposit_tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListAccountsRequest) Reset()         { *m = ListAccountsRequest{} }
func (m *ListAccountsRequest) String() string { return proto.CompactTextString(m) }
func (*ListAccountsRequest) ProtoMessage()    {}
func (*ListAccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5153635bfe042e, []int{4}
}
func (m *ListAccountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAccountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAccountsRequest.Merge(m, src)
}
func (m *ListAccountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListAccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAccountsRequest proto.InternalMessageInfo

func (m *ListAccountsRequest) GetGetDepositTx() bool {
	if m != nil {
		return m.GetDepositTx
	}
	return false
}

type ListAccountsResponse struct {
	AccountNames         []string `protobuf:"bytes,1,rep,name=account_names,json=accountNames,proto3" json:"account_names,omitempty"`
	ValidatingPublicKeys [][]byte `protobuf:"bytes,2,rep,name=validating_public_keys,json=validatingPublicKeys,proto3" json:"validating_public_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListAccountsResponse) Reset()         { *m = ListAccountsResponse{} }
func (m *ListAccountsResponse) String() string { return proto.CompactTextString(m) }
func (*ListAccountsResponse) ProtoMessage()    {}
func (*ListAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5153635bfe042e, []int{5}
}
func (m *ListAccountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAccountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAccountsResponse.Merge(m, src)
}
func (m *ListAccountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAccountsResponse proto.InternalMessageInfo

func (m *ListAccountsResponse) GetAccountNames() []string {
	if m != nil {
		return m.AccountNames
	}
	return nil
}

func (m *ListAccountsResponse) GetValidatingPublicKeys() [][]byte {
	if m != nil {
		return m.ValidatingPublicKeys
	}
	return nil
}

func init() {
	proto.RegisterEnum("ethereum.validator.accounts.v2.CreateWalletRequest_KeyManagerKind", CreateWalletRequest_KeyManagerKind_name, CreateWalletRequest_KeyManagerKind_value)
	proto.RegisterType((*CreateWalletRequest)(nil), "ethereum.validator.accounts.v2.CreateWalletRequest")
	proto.RegisterType((*WalletResponse)(nil), "ethereum.validator.accounts.v2.WalletResponse")
	proto.RegisterType((*WalletResponse_KeyManagerConfigs)(nil), "ethereum.validator.accounts.v2.WalletResponse.KeyManagerConfigs")
	proto.RegisterMapType((map[string]string)(nil), "ethereum.validator.accounts.v2.WalletResponse.KeyManagerConfigs.ConfigsEntry")
	proto.RegisterType((*EditWalletConfigRequest)(nil), "ethereum.validator.accounts.v2.EditWalletConfigRequest")
	proto.RegisterType((*CreateAccountResponse)(nil), "ethereum.validator.accounts.v2.CreateAccountResponse")
	proto.RegisterType((*CreateAccountResponse_AccountConfigs)(nil), "ethereum.validator.accounts.v2.CreateAccountResponse.AccountConfigs")
	proto.RegisterMapType((map[string]string)(nil), "ethereum.validator.accounts.v2.CreateAccountResponse.AccountConfigs.ConfigsEntry")
	proto.RegisterType((*ListAccountsRequest)(nil), "ethereum.validator.accounts.v2.ListAccountsRequest")
	proto.RegisterType((*ListAccountsResponse)(nil), "ethereum.validator.accounts.v2.ListAccountsResponse")
}

func init() {
	proto.RegisterFile("proto/validator/accounts/v2/web_api.proto", fileDescriptor_8a5153635bfe042e)
}

var fileDescriptor_8a5153635bfe042e = []byte{
	// 856 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcf, 0x8f, 0xdb, 0x44,
	0x14, 0x66, 0xec, 0x76, 0xb7, 0xfb, 0xe2, 0xcd, 0xa6, 0xb3, 0xcb, 0x12, 0x65, 0x69, 0x36, 0x72,
	0xf9, 0x11, 0x84, 0x64, 0xab, 0x69, 0x11, 0xa8, 0x5c, 0xe8, 0xa6, 0x7b, 0x0a, 0x0d, 0xc5, 0x02,
	0xf5, 0x68, 0x4d, 0xec, 0xa9, 0x63, 0xc5, 0xb1, 0x5d, 0x7b, 0x92, 0x6d, 0xc4, 0x0d, 0x89, 0xbf,
	0x80, 0x0b, 0x9c, 0xb8, 0x71, 0xe4, 0x0a, 0x5c, 0x7b, 0xe2, 0x88, 0xc4, 0x1d, 0xa1, 0x15, 0x7f,
	0x08, 0xf2, 0xcc, 0x38, 0xb1, 0x43, 0xba, 0xc9, 0x2e, 0xf4, 0x94, 0xcc, 0x7b, 0xdf, 0xbc, 0xf7,
	0xcd, 0x7b, 0xdf, 0x9b, 0x31, 0xbc, 0x17, 0x27, 0x11, 0x8b, 0xcc, 0x29, 0x09, 0x7c, 0x97, 0xb0,
	0x28, 0x31, 0x89, 0xe3, 0x44, 0x93, 0x90, 0xa5, 0xe6, 0xb4, 0x63, 0x9e, 0xd1, 0x81, 0x4d, 0x62,
	0xdf, 0xe0, 0x18, 0xdc, 0xa4, 0x6c, 0x48, 0x13, 0x3a, 0x19, 0x1b, 0x73, 0xb4, 0x91, 0xa3, 0x8d,
	0x69, 0xa7, 0x91, 0xf9, 0xcd, 0xe9, 0x1d, 0x12, 0xc4, 0x43, 0x72, 0xc7, 0x24, 0x8c, 0xd1, 0x94,
	0x11, 0xe6, 0x47, 0xa1, 0xd8, 0xdf, 0x38, 0x2e, 0xf9, 0x07, 0x94, 0x38, 0x51, 0x68, 0x0f, 0x82,
	0xc8, 0x19, 0x49, 0xc0, 0x9b, 0x5e, 0x14, 0x79, 0x01, 0x35, 0x49, 0xec, 0x9b, 0x24, 0x0c, 0x23,
	0xb1, 0x3b, 0x95, 0xde, 0x23, 0xe9, 0xe5, 0xab, 0xc1, 0xe4, 0xa9, 0x49, 0xc7, 0x31, 0x9b, 0x09,
	0xa7, 0xfe, 0xa3, 0x0a, 0xfb, 0xdd, 0x84, 0x12, 0x46, 0x9f, 0x90, 0x20, 0xa0, 0xcc, 0xa2, 0xcf,
	0x26, 0x34, 0x65, 0xf8, 0x18, 0x2a, 0x67, 0xdc, 0x60, 0xc7, 0x84, 0x0d, 0xeb, 0xa8, 0x85, 0xda,
	0x3b, 0x16, 0x08, 0xd3, 0x63, 0xc2, 0x86, 0xd8, 0x81, 0xca, 0x88, 0xce, 0xec, 0x31, 0x09, 0x89,
	0x47, 0x93, 0xba, 0xd2, 0x42, 0xed, 0x6a, 0xe7, 0xc4, 0xb8, 0xf8, 0xa8, 0xc6, 0x8a, 0x54, 0x46,
	0x8f, 0xce, 0x1e, 0x89, 0x28, 0x3d, 0x3f, 0x74, 0x2d, 0x18, 0xcd, 0xd7, 0xf8, 0x5d, 0xd8, 0x9b,
	0xb3, 0x48, 0xd3, 0xb3, 0x28, 0x71, 0xeb, 0x2a, 0x67, 0x52, 0xcd, 0x99, 0x08, 0x6b, 0x46, 0x37,
	0xa1, 0xe3, 0x88, 0x51, 0x9b, 0xb8, 0x6e, 0x52, 0xbf, 0x26, 0xe8, 0x0a, 0xd3, 0x03, 0xd7, 0x4d,
	0xf0, 0x3b, 0xb0, 0x27, 0x01, 0x4e, 0x22, 0xcf, 0x74, 0x9d, 0x83, 0x76, 0x85, 0xb9, 0x9b, 0x88,
	0x63, 0x2d, 0x70, 0xd9, 0xe9, 0x38, 0x6e, 0xab, 0x88, 0xeb, 0xd1, 0x19, 0xc7, 0xbd, 0x0f, 0x38,
	0x8f, 0x47, 0x16, 0x21, 0xb7, 0x39, 0x54, 0x46, 0xe8, 0x12, 0x19, 0x54, 0x3f, 0x81, 0x6a, 0xf9,
	0x90, 0xb8, 0x02, 0xdb, 0x5f, 0xf6, 0x7b, 0xfd, 0xcf, 0x9e, 0xf4, 0x6b, 0xaf, 0x61, 0x80, 0x2d,
	0xd7, 0x4f, 0xa8, 0xc3, 0x6a, 0x28, 0x73, 0xb8, 0x34, 0xf1, 0xa7, 0xd4, 0xad, 0x29, 0x99, 0x43,
	0x84, 0xaa, 0xa9, 0xfa, 0x9f, 0x0a, 0x54, 0xf3, 0xba, 0xa5, 0x71, 0x14, 0xa6, 0x74, 0x7d, 0x8f,
	0x62, 0xd8, 0x2f, 0xf4, 0xc8, 0x76, 0xa2, 0xf0, 0xa9, 0xef, 0xa5, 0xbc, 0x57, 0x95, 0xce, 0x27,
	0xeb, 0x7a, 0x55, 0xce, 0x56, 0x68, 0x53, 0x57, 0xc4, 0xb1, 0x6e, 0x8e, 0x96, 0x4d, 0x8d, 0x5f,
	0x10, 0xdc, 0xfc, 0x17, 0x10, 0x7b, 0xb0, 0x9d, 0xe7, 0x46, 0x2d, 0xb5, 0x5d, 0xe9, 0x3c, 0xfa,
	0xaf, 0xb9, 0x0d, 0xf9, 0x7b, 0x1a, 0xb2, 0x64, 0x66, 0xe5, 0xd1, 0x1b, 0xf7, 0x41, 0x2b, 0x3a,
	0x70, 0x0d, 0xd4, 0x11, 0x9d, 0xc9, 0xca, 0x64, 0x7f, 0xf1, 0x01, 0x5c, 0x9f, 0x92, 0x60, 0x42,
	0x79, 0x11, 0x76, 0x2c, 0xb1, 0xb8, 0xaf, 0x7c, 0x84, 0xf4, 0x9f, 0x11, 0xbc, 0x71, 0xea, 0xfa,
	0x4c, 0xa4, 0x16, 0x61, 0x0a, 0xd3, 0x50, 0x94, 0x17, 0xda, 0x44, 0x5e, 0xca, 0x86, 0xf2, 0x52,
	0x37, 0x97, 0xd7, 0xb5, 0xd5, 0xf2, 0x7a, 0xa1, 0xc0, 0xeb, 0x62, 0xb0, 0x1e, 0x88, 0x12, 0xce,
	0x15, 0x32, 0x86, 0x3d, 0x59, 0xd5, 0xa5, 0xe6, 0x3f, 0xdc, 0x6c, 0x50, 0x97, 0xe2, 0x19, 0x72,
	0x9d, 0x0b, 0xa0, 0x4a, 0x4a, 0xeb, 0xc6, 0xaf, 0x08, 0xaa, 0x65, 0x08, 0x1e, 0x2d, 0xb7, 0xfe,
	0xf3, 0xff, 0x23, 0xf3, 0x2b, 0x68, 0xff, 0xc7, 0xb0, 0xff, 0xa9, 0x9f, 0x32, 0x99, 0x27, 0xcd,
	0x3b, 0xff, 0x16, 0x54, 0x3d, 0xca, 0x6c, 0x97, 0xc6, 0x51, 0xea, 0x33, 0x9b, 0x3d, 0xe7, 0xd1,
	0x6e, 0x58, 0x9a, 0x47, 0xd9, 0x43, 0x61, 0xfc, 0xe2, 0xb9, 0xfe, 0x0c, 0x0e, 0xca, 0x9b, 0x65,
	0xfd, 0x6f, 0xc3, 0x6e, 0x5e, 0xff, 0x90, 0x8c, 0xa9, 0xa8, 0xc1, 0x8e, 0xa5, 0x49, 0x63, 0x3f,
	0xb3, 0xe1, 0x7b, 0x70, 0x28, 0x2b, 0xe1, 0x87, 0x9e, 0x1d, 0x4f, 0x06, 0x81, 0xef, 0x64, 0xf2,
	0xc8, 0x7a, 0xa5, 0xb6, 0x35, 0xeb, 0x60, 0xe1, 0x7d, 0xcc, 0x9d, 0x3d, 0x3a, 0x4b, 0x3b, 0x2f,
	0x54, 0xd8, 0x12, 0x52, 0xc5, 0xdf, 0x21, 0xd0, 0x8a, 0x17, 0x2b, 0xbe, 0x7b, 0x85, 0x6b, 0xb8,
	0x61, 0x5c, 0x6e, 0x26, 0xf5, 0xdb, 0x5f, 0xff, 0xf1, 0xf7, 0xb7, 0xca, 0x2d, 0xfd, 0x28, 0x7b,
	0xf0, 0x16, 0xcf, 0xa0, 0xb8, 0x7e, 0x4c, 0x87, 0x67, 0xc0, 0x3f, 0x20, 0x80, 0x6c, 0xa8, 0x44,
	0x5b, 0xf0, 0x87, 0xeb, 0x72, 0xbc, 0x64, 0x00, 0x2f, 0x4d, 0xae, 0xcd, 0xc9, 0xe9, 0x7a, 0x6b,
	0x35, 0x39, 0x1e, 0xdb, 0xa4, 0xae, 0xcf, 0xf0, 0x57, 0xa0, 0x15, 0x13, 0xe2, 0x43, 0x43, 0x3c,
	0x97, 0x46, 0xfe, 0x5c, 0x1a, 0xa7, 0xd9, 0x73, 0x79, 0xd5, 0xf2, 0xe0, 0xa3, 0x0b, 0x18, 0x74,
	0x7e, 0x52, 0xe0, 0x46, 0x2e, 0x1a, 0xfc, 0x0d, 0x82, 0xdd, 0x92, 0xf8, 0x5f, 0xca, 0xe5, 0x83,
	0x2b, 0xcd, 0x90, 0xfe, 0x36, 0xa7, 0x74, 0xac, 0xdf, 0x2a, 0x53, 0x9a, 0x7f, 0xb8, 0xc8, 0x9e,
	0x7d, 0x8f, 0x40, 0x2b, 0xaa, 0x79, 0xbd, 0x9c, 0x56, 0x0c, 0x4e, 0xe3, 0xde, 0xe5, 0x36, 0x49,
	0x8a, 0x4d, 0x4e, 0xb1, 0x8e, 0x0f, 0x57, 0x53, 0x3c, 0xd1, 0x7e, 0x3b, 0x6f, 0xa2, 0xdf, 0xcf,
	0x9b, 0xe8, 0xaf, 0xf3, 0x26, 0x1a, 0x6c, 0xf1, 0xba, 0xdc, 0xfd, 0x27, 0x00, 0x00, 0xff, 0xff,
	0xec, 0xf4, 0xff, 0xf0, 0x8c, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WalletClient is the client API for Wallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WalletClient interface {
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*WalletResponse, error)
	EditConfig(ctx context.Context, in *EditWalletConfigRequest, opts ...grpc.CallOption) (*WalletResponse, error)
	WalletConfig(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*WalletResponse, error)
}

type walletClient struct {
	cc *grpc.ClientConn
}

func NewWalletClient(cc *grpc.ClientConn) WalletClient {
	return &walletClient{cc}
}

func (c *walletClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*WalletResponse, error) {
	out := new(WalletResponse)
	err := c.cc.Invoke(ctx, "/ethereum.validator.accounts.v2.Wallet/CreateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) EditConfig(ctx context.Context, in *EditWalletConfigRequest, opts ...grpc.CallOption) (*WalletResponse, error) {
	out := new(WalletResponse)
	err := c.cc.Invoke(ctx, "/ethereum.validator.accounts.v2.Wallet/EditConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) WalletConfig(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*WalletResponse, error) {
	out := new(WalletResponse)
	err := c.cc.Invoke(ctx, "/ethereum.validator.accounts.v2.Wallet/WalletConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServer is the server API for Wallet service.
type WalletServer interface {
	CreateWallet(context.Context, *CreateWalletRequest) (*WalletResponse, error)
	EditConfig(context.Context, *EditWalletConfigRequest) (*WalletResponse, error)
	WalletConfig(context.Context, *types.Empty) (*WalletResponse, error)
}

// UnimplementedWalletServer can be embedded to have forward compatible implementations.
type UnimplementedWalletServer struct {
}

func (*UnimplementedWalletServer) CreateWallet(ctx context.Context, req *CreateWalletRequest) (*WalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (*UnimplementedWalletServer) EditConfig(ctx context.Context, req *EditWalletConfigRequest) (*WalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditConfig not implemented")
}
func (*UnimplementedWalletServer) WalletConfig(ctx context.Context, req *types.Empty) (*WalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletConfig not implemented")
}

func RegisterWalletServer(s *grpc.Server, srv WalletServer) {
	s.RegisterService(&_Wallet_serviceDesc, srv)
}

func _Wallet_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.validator.accounts.v2.Wallet/CreateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_EditConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditWalletConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).EditConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.validator.accounts.v2.Wallet/EditConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).EditConfig(ctx, req.(*EditWalletConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_WalletConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).WalletConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.validator.accounts.v2.Wallet/WalletConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).WalletConfig(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wallet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ethereum.validator.accounts.v2.Wallet",
	HandlerType: (*WalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWallet",
			Handler:    _Wallet_CreateWallet_Handler,
		},
		{
			MethodName: "EditConfig",
			Handler:    _Wallet_EditConfig_Handler,
		},
		{
			MethodName: "WalletConfig",
			Handler:    _Wallet_WalletConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/validator/accounts/v2/web_api.proto",
}

// AccountsClient is the client API for Accounts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountsClient interface {
	CreateAccount(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
}

type accountsClient struct {
	cc *grpc.ClientConn
}

func NewAccountsClient(cc *grpc.ClientConn) AccountsClient {
	return &accountsClient{cc}
}

func (c *accountsClient) CreateAccount(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, "/ethereum.validator.accounts.v2.Accounts/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, "/ethereum.validator.accounts.v2.Accounts/ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountsServer is the server API for Accounts service.
type AccountsServer interface {
	CreateAccount(context.Context, *types.Empty) (*CreateAccountResponse, error)
	ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error)
}

// UnimplementedAccountsServer can be embedded to have forward compatible implementations.
type UnimplementedAccountsServer struct {
}

func (*UnimplementedAccountsServer) CreateAccount(ctx context.Context, req *types.Empty) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (*UnimplementedAccountsServer) ListAccounts(ctx context.Context, req *ListAccountsRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}

func RegisterAccountsServer(s *grpc.Server, srv AccountsServer) {
	s.RegisterService(&_Accounts_serviceDesc, srv)
}

func _Accounts_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.validator.accounts.v2.Accounts/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).CreateAccount(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.validator.accounts.v2.Accounts/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).ListAccounts(ctx, req.(*ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Accounts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ethereum.validator.accounts.v2.Accounts",
	HandlerType: (*AccountsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _Accounts_CreateAccount_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _Accounts_ListAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/validator/accounts/v2/web_api.proto",
}

func (m *CreateWalletRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateWalletRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateWalletRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RemoteCaCrtPath) > 0 {
		i -= len(m.RemoteCaCrtPath)
		copy(dAtA[i:], m.RemoteCaCrtPath)
		i = encodeVarintWebApi(dAtA, i, uint64(len(m.RemoteCaCrtPath)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RemoteKeyPath) > 0 {
		i -= len(m.RemoteKeyPath)
		copy(dAtA[i:], m.RemoteKeyPath)
		i = encodeVarintWebApi(dAtA, i, uint64(len(m.RemoteKeyPath)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RemoteCrtPath) > 0 {
		i -= len(m.RemoteCrtPath)
		copy(dAtA[i:], m.RemoteCrtPath)
		i = encodeVarintWebApi(dAtA, i, uint64(len(m.RemoteCrtPath)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RemoteAddr) > 0 {
		i -= len(m.RemoteAddr)
		copy(dAtA[i:], m.RemoteAddr)
		i = encodeVarintWebApi(dAtA, i, uint64(len(m.RemoteAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.WalletPassword) > 0 {
		i -= len(m.WalletPassword)
		copy(dAtA[i:], m.WalletPassword)
		i = encodeVarintWebApi(dAtA, i, uint64(len(m.WalletPassword)))
		i--
		dAtA[i] = 0x1a
	}
	if m.KeyManager != 0 {
		i = encodeVarintWebApi(dAtA, i, uint64(m.KeyManager))
		i--
		dAtA[i] = 0x10
	}
	if len(m.WalletPath) > 0 {
		i -= len(m.WalletPath)
		copy(dAtA[i:], m.WalletPath)
		i = encodeVarintWebApi(dAtA, i, uint64(len(m.WalletPath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WalletResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WalletResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WalletResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.KeyManagerConfigs != nil {
		{
			size, err := m.KeyManagerConfigs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.WalletPath) > 0 {
		i -= len(m.WalletPath)
		copy(dAtA[i:], m.WalletPath)
		i = encodeVarintWebApi(dAtA, i, uint64(len(m.WalletPath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WalletResponse_KeyManagerConfigs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WalletResponse_KeyManagerConfigs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WalletResponse_KeyManagerConfigs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Configs) > 0 {
		for k := range m.Configs {
			v := m.Configs[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintWebApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintWebApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintWebApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EditWalletConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditWalletConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EditWalletConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RemoteCaCrtPath) > 0 {
		i -= len(m.RemoteCaCrtPath)
		copy(dAtA[i:], m.RemoteCaCrtPath)
		i = encodeVarintWebApi(dAtA, i, uint64(len(m.RemoteCaCrtPath)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RemoteKeyPath) > 0 {
		i -= len(m.RemoteKeyPath)
		copy(dAtA[i:], m.RemoteKeyPath)
		i = encodeVarintWebApi(dAtA, i, uint64(len(m.RemoteKeyPath)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RemoteCrtPath) > 0 {
		i -= len(m.RemoteCrtPath)
		copy(dAtA[i:], m.RemoteCrtPath)
		i = encodeVarintWebApi(dAtA, i, uint64(len(m.RemoteCrtPath)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RemoteAddr) > 0 {
		i -= len(m.RemoteAddr)
		copy(dAtA[i:], m.RemoteAddr)
		i = encodeVarintWebApi(dAtA, i, uint64(len(m.RemoteAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AccountConfigs != nil {
		{
			size, err := m.AccountConfigs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *CreateAccountResponse_AccountConfigs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAccountResponse_AccountConfigs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateAccountResponse_AccountConfigs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Configs) > 0 {
		for k := range m.Configs {
			v := m.Configs[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintWebApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintWebApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintWebApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListAccountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAccountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GetDepositTx {
		i--
		if m.GetDepositTx {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListAccountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAccountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ValidatingPublicKeys) > 0 {
		for iNdEx := len(m.ValidatingPublicKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ValidatingPublicKeys[iNdEx])
			copy(dAtA[i:], m.ValidatingPublicKeys[iNdEx])
			i = encodeVarintWebApi(dAtA, i, uint64(len(m.ValidatingPublicKeys[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AccountNames) > 0 {
		for iNdEx := len(m.AccountNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AccountNames[iNdEx])
			copy(dAtA[i:], m.AccountNames[iNdEx])
			i = encodeVarintWebApi(dAtA, i, uint64(len(m.AccountNames[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintWebApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovWebApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateWalletRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletPath)
	if l > 0 {
		n += 1 + l + sovWebApi(uint64(l))
	}
	if m.KeyManager != 0 {
		n += 1 + sovWebApi(uint64(m.KeyManager))
	}
	l = len(m.WalletPassword)
	if l > 0 {
		n += 1 + l + sovWebApi(uint64(l))
	}
	l = len(m.RemoteAddr)
	if l > 0 {
		n += 1 + l + sovWebApi(uint64(l))
	}
	l = len(m.RemoteCrtPath)
	if l > 0 {
		n += 1 + l + sovWebApi(uint64(l))
	}
	l = len(m.RemoteKeyPath)
	if l > 0 {
		n += 1 + l + sovWebApi(uint64(l))
	}
	l = len(m.RemoteCaCrtPath)
	if l > 0 {
		n += 1 + l + sovWebApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WalletResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletPath)
	if l > 0 {
		n += 1 + l + sovWebApi(uint64(l))
	}
	if m.KeyManagerConfigs != nil {
		l = m.KeyManagerConfigs.Size()
		n += 1 + l + sovWebApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WalletResponse_KeyManagerConfigs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for k, v := range m.Configs {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovWebApi(uint64(len(k))) + 1 + len(v) + sovWebApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovWebApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EditWalletConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RemoteAddr)
	if l > 0 {
		n += 1 + l + sovWebApi(uint64(l))
	}
	l = len(m.RemoteCrtPath)
	if l > 0 {
		n += 1 + l + sovWebApi(uint64(l))
	}
	l = len(m.RemoteKeyPath)
	if l > 0 {
		n += 1 + l + sovWebApi(uint64(l))
	}
	l = len(m.RemoteCaCrtPath)
	if l > 0 {
		n += 1 + l + sovWebApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountConfigs != nil {
		l = m.AccountConfigs.Size()
		n += 1 + l + sovWebApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateAccountResponse_AccountConfigs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for k, v := range m.Configs {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovWebApi(uint64(len(k))) + 1 + len(v) + sovWebApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovWebApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAccountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GetDepositTx {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAccountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccountNames) > 0 {
		for _, s := range m.AccountNames {
			l = len(s)
			n += 1 + l + sovWebApi(uint64(l))
		}
	}
	if len(m.ValidatingPublicKeys) > 0 {
		for _, b := range m.ValidatingPublicKeys {
			l = len(b)
			n += 1 + l + sovWebApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWebApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWebApi(x uint64) (n int) {
	return sovWebApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateWalletRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateWalletRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateWalletRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyManager", wireType)
			}
			m.KeyManager = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyManager |= CreateWalletRequest_KeyManagerKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteCrtPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteCrtPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteKeyPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteKeyPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteCaCrtPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteCaCrtPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WalletResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WalletResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WalletResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyManagerConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyManagerConfigs == nil {
				m.KeyManagerConfigs = &WalletResponse_KeyManagerConfigs{}
			}
			if err := m.KeyManagerConfigs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WalletResponse_KeyManagerConfigs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyManagerConfigs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyManagerConfigs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configs == nil {
				m.Configs = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWebApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWebApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWebApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWebApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWebApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthWebApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthWebApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWebApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthWebApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Configs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditWalletConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditWalletConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditWalletConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteCrtPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteCrtPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteKeyPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteKeyPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteCaCrtPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteCaCrtPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccountConfigs == nil {
				m.AccountConfigs = &CreateAccountResponse_AccountConfigs{}
			}
			if err := m.AccountConfigs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAccountResponse_AccountConfigs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountConfigs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountConfigs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configs == nil {
				m.Configs = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWebApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWebApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWebApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWebApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWebApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthWebApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthWebApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWebApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthWebApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Configs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAccountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAccountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAccountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetDepositTx", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GetDepositTx = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWebApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAccountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAccountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAccountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountNames = append(m.AccountNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatingPublicKeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWebApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWebApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatingPublicKeys = append(m.ValidatingPublicKeys, make([]byte, postIndex-iNdEx))
			copy(m.ValidatingPublicKeys[len(m.ValidatingPublicKeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWebApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWebApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWebApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWebApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWebApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWebApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWebApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWebApi = fmt.Errorf("proto: unexpected end of group")
)
