syntax = "proto3";

package ethereum.beacon.v1alpha;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option go_package = "github.com/prysmaticlabs/prysm/proto/beacon/v1alpha;eth";

message Attestation {
    // A bitfield representation of validator indices that have voted exactly
    // the same vote and have been aggregated into this attestation.
    // Spec type: Bitlist[N]
    bytes aggregation_bitfield = 1 [(gogoproto.moretags) = "ssz-max:\"4096\"", (gogoproto.casttype) = "github.com/prysmaticlabs/go-bitfield.Bitlist"];

    AttestationData data = 2; 

    // Not used in phase 0.
    // 
    // TODO: Add custody bitfield information.
    // bytes custody_bitfield = 3;
    bytes custody_bits = 3 [(gogoproto.moretags) = "ssz-max:\"4096\"", (gogoproto.casttype) = "github.com/prysmaticlabs/go-bitfield.Bitlist"];

    // 96 byte BLS aggregate signature.
    bytes signature = 4 [(gogoproto.moretags) = "ssz-size:\"96\""];
}

message PendingAttestation {
    // Bitfield representation of validator indices that have voted exactly
    // the same vote and have been aggregated into this attestation.
    bytes aggregation_bits = 1 [(gogoproto.moretags) = "ssz-max:\"4096\"", (gogoproto.casttype) = "github.com/prysmaticlabs/go-bitfield.Bitlist"];
    AttestationData data = 2;
    // The difference of when attestation gets created and get included on chain.
    uint64 inclusion_delay = 3;
    // The proposer who included the attestation in the block.
    uint64 proposer_index = 4;
}

message AttestationData {
    // Attestation data includes information on Casper the Friendly Finality Gadget's votes
    // See: https://arxiv.org/pdf/1710.09437.pdf

    // 32 byte root of the LMD GHOST block vote.
    bytes block_root = 1 [(gogoproto.moretags) = "ssz-size:\"32\""];

    // Source contains information relating to the recent justified epoch
    // as well as the 32 byte root of the epoch boundary block at the
    // source epoch.
    Checkpoint source = 2;

    // Target contains information relating to the epoch the attestation
    // is targeting as well as the 32 byte root of the epoch boundary 
    // block at the source epoch.
    Checkpoint target = 3;

    // Crosslink voted by this attestation.
    Crosslink crosslink = 4;
}

message AttestationTarget {
    // Used internally to track LMD GHOST block votes and to find
    // the head of the chain.
    uint64 slot = 1;
    bytes block_root = 2 [(gogoproto.moretags) = "ssz-size:\"32\""];
    bytes parent_root = 3 [(gogoproto.moretags) = "ssz-size:\"32\""];
}

message AttestationDataAndCustodyBit {
    AttestationData data = 1;
    // Challengeable bit (SSZ-bool, 1 byte) for the custody of crosslink data
    bool custody_bit = 2;
}

message Checkpoint {
    // The epoch marking the occurrence of a checkpoint
    uint64 epoch = 1;

    // The block root at the epoch boundary of the checkpoint.
    bytes root = 2 [(gogoproto.moretags) = "ssz-size:\"32\""];
}

message Crosslink {
    // The shard that crosslinks to the beacon chain.
    uint64 shard = 1;

    // Start epoch must match the parent crosslink's end epoch.
    uint64 start_epoch = 2 [(gogoproto.moretags) = "ssz-size:\"32\""];;

    // Ending epoch for this crosslink period. This field matches the attestation
    // target epoch or the start epoch + MAX_EPOCHS_PER_CROSSLINK, whichever is
    // less. 
    uint64 end_epoch = 3;

    // 32 byte root of the parent crosslink.
    bytes parent_root = 4;

    // 32 byte root of the crosslinked shard data since the previous crosslink.
    bytes data_root = 5 [(gogoproto.moretags) = "ssz-size:\"32\""];;
}
