// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/beacon/v1alpha1/validator.proto

package eth

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DutiesRequest struct {
	Epoch                uint64   `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	PublicKeys           [][]byte `protobuf:"bytes,2,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty" ssz-size:"?,48"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DutiesRequest) Reset()         { *m = DutiesRequest{} }
func (m *DutiesRequest) String() string { return proto.CompactTextString(m) }
func (*DutiesRequest) ProtoMessage()    {}
func (*DutiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9994fd7b0f53059c, []int{0}
}
func (m *DutiesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DutiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DutiesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DutiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DutiesRequest.Merge(m, src)
}
func (m *DutiesRequest) XXX_Size() int {
	return m.Size()
}
func (m *DutiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DutiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DutiesRequest proto.InternalMessageInfo

func (m *DutiesRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *DutiesRequest) GetPublicKeys() [][]byte {
	if m != nil {
		return m.PublicKeys
	}
	return nil
}

type DutiesResponse struct {
	Duties               []*DutiesResponse_Duty `protobuf:"bytes,1,rep,name=duties,proto3" json:"duties,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *DutiesResponse) Reset()         { *m = DutiesResponse{} }
func (m *DutiesResponse) String() string { return proto.CompactTextString(m) }
func (*DutiesResponse) ProtoMessage()    {}
func (*DutiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9994fd7b0f53059c, []int{1}
}
func (m *DutiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DutiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DutiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DutiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DutiesResponse.Merge(m, src)
}
func (m *DutiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *DutiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DutiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DutiesResponse proto.InternalMessageInfo

func (m *DutiesResponse) GetDuties() []*DutiesResponse_Duty {
	if m != nil {
		return m.Duties
	}
	return nil
}

type DutiesResponse_Duty struct {
	PublicKey            []byte   `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty" ssz-size:"48"`
	AttestationSlot      uint64   `protobuf:"varint,2,opt,name=attestation_slot,json=attestationSlot,proto3" json:"attestation_slot,omitempty"`
	AttestationShard     uint64   `protobuf:"varint,3,opt,name=attestation_shard,json=attestationShard,proto3" json:"attestation_shard,omitempty"`
	BlockProposalSlot    uint64   `protobuf:"varint,4,opt,name=block_proposal_slot,json=blockProposalSlot,proto3" json:"block_proposal_slot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DutiesResponse_Duty) Reset()         { *m = DutiesResponse_Duty{} }
func (m *DutiesResponse_Duty) String() string { return proto.CompactTextString(m) }
func (*DutiesResponse_Duty) ProtoMessage()    {}
func (*DutiesResponse_Duty) Descriptor() ([]byte, []int) {
	return fileDescriptor_9994fd7b0f53059c, []int{1, 0}
}
func (m *DutiesResponse_Duty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DutiesResponse_Duty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DutiesResponse_Duty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DutiesResponse_Duty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DutiesResponse_Duty.Merge(m, src)
}
func (m *DutiesResponse_Duty) XXX_Size() int {
	return m.Size()
}
func (m *DutiesResponse_Duty) XXX_DiscardUnknown() {
	xxx_messageInfo_DutiesResponse_Duty.DiscardUnknown(m)
}

var xxx_messageInfo_DutiesResponse_Duty proto.InternalMessageInfo

func (m *DutiesResponse_Duty) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *DutiesResponse_Duty) GetAttestationSlot() uint64 {
	if m != nil {
		return m.AttestationSlot
	}
	return 0
}

func (m *DutiesResponse_Duty) GetAttestationShard() uint64 {
	if m != nil {
		return m.AttestationShard
	}
	return 0
}

func (m *DutiesResponse_Duty) GetBlockProposalSlot() uint64 {
	if m != nil {
		return m.BlockProposalSlot
	}
	return 0
}

type BlockRequest struct {
	Slot                 uint64   `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	RandaoReveal         []byte   `protobuf:"bytes,2,opt,name=randao_reveal,json=randaoReveal,proto3" json:"randao_reveal,omitempty" ssz-size:"48"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockRequest) Reset()         { *m = BlockRequest{} }
func (m *BlockRequest) String() string { return proto.CompactTextString(m) }
func (*BlockRequest) ProtoMessage()    {}
func (*BlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9994fd7b0f53059c, []int{2}
}
func (m *BlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockRequest.Merge(m, src)
}
func (m *BlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *BlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockRequest proto.InternalMessageInfo

func (m *BlockRequest) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *BlockRequest) GetRandaoReveal() []byte {
	if m != nil {
		return m.RandaoReveal
	}
	return nil
}

type AttestationDataRequest struct {
	ProofOfCustodyBit    []byte   `protobuf:"bytes,1,opt,name=proof_of_custody_bit,json=proofOfCustodyBit,proto3" json:"proof_of_custody_bit,omitempty"`
	Slot                 uint64   `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	Shard                uint64   `protobuf:"varint,3,opt,name=shard,proto3" json:"shard,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttestationDataRequest) Reset()         { *m = AttestationDataRequest{} }
func (m *AttestationDataRequest) String() string { return proto.CompactTextString(m) }
func (*AttestationDataRequest) ProtoMessage()    {}
func (*AttestationDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9994fd7b0f53059c, []int{3}
}
func (m *AttestationDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttestationDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttestationDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttestationDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestationDataRequest.Merge(m, src)
}
func (m *AttestationDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *AttestationDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestationDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AttestationDataRequest proto.InternalMessageInfo

func (m *AttestationDataRequest) GetProofOfCustodyBit() []byte {
	if m != nil {
		return m.ProofOfCustodyBit
	}
	return nil
}

func (m *AttestationDataRequest) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *AttestationDataRequest) GetShard() uint64 {
	if m != nil {
		return m.Shard
	}
	return 0
}

type Validator struct {
	PublicKey                 []byte   `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty" ssz-size:"48"`
	WithdrawalCredentials     []byte   `protobuf:"bytes,2,opt,name=withdrawal_credentials,json=withdrawalCredentials,proto3" json:"withdrawal_credentials,omitempty" ssz-size:"32"`
	ActivationEligiblityEpoch uint64   `protobuf:"varint,3,opt,name=activation_eligiblity_epoch,json=activationEligiblityEpoch,proto3" json:"activation_eligiblity_epoch,omitempty"`
	ActivationEpoch           uint64   `protobuf:"varint,4,opt,name=activation_epoch,json=activationEpoch,proto3" json:"activation_epoch,omitempty"`
	ExitEpoch                 uint64   `protobuf:"varint,5,opt,name=exit_epoch,json=exitEpoch,proto3" json:"exit_epoch,omitempty"`
	WithdrawableEpoch         uint64   `protobuf:"varint,6,opt,name=withdrawable_epoch,json=withdrawableEpoch,proto3" json:"withdrawable_epoch,omitempty"`
	Slashed                   bool     `protobuf:"varint,7,opt,name=slashed,proto3" json:"slashed,omitempty"`
	EffectiveBalance          uint64   `protobuf:"varint,8,opt,name=effective_balance,json=effectiveBalance,proto3" json:"effective_balance,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_9994fd7b0f53059c, []int{4}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

func (m *Validator) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *Validator) GetWithdrawalCredentials() []byte {
	if m != nil {
		return m.WithdrawalCredentials
	}
	return nil
}

func (m *Validator) GetActivationEligiblityEpoch() uint64 {
	if m != nil {
		return m.ActivationEligiblityEpoch
	}
	return 0
}

func (m *Validator) GetActivationEpoch() uint64 {
	if m != nil {
		return m.ActivationEpoch
	}
	return 0
}

func (m *Validator) GetExitEpoch() uint64 {
	if m != nil {
		return m.ExitEpoch
	}
	return 0
}

func (m *Validator) GetWithdrawableEpoch() uint64 {
	if m != nil {
		return m.WithdrawableEpoch
	}
	return 0
}

func (m *Validator) GetSlashed() bool {
	if m != nil {
		return m.Slashed
	}
	return false
}

func (m *Validator) GetEffectiveBalance() uint64 {
	if m != nil {
		return m.EffectiveBalance
	}
	return 0
}

func init() {
	proto.RegisterType((*DutiesRequest)(nil), "ethereum.beacon.v1alpha1.DutiesRequest")
	proto.RegisterType((*DutiesResponse)(nil), "ethereum.beacon.v1alpha1.DutiesResponse")
	proto.RegisterType((*DutiesResponse_Duty)(nil), "ethereum.beacon.v1alpha1.DutiesResponse.Duty")
	proto.RegisterType((*BlockRequest)(nil), "ethereum.beacon.v1alpha1.BlockRequest")
	proto.RegisterType((*AttestationDataRequest)(nil), "ethereum.beacon.v1alpha1.AttestationDataRequest")
	proto.RegisterType((*Validator)(nil), "ethereum.beacon.v1alpha1.Validator")
}

func init() {
	proto.RegisterFile("proto/beacon/v1alpha1/validator.proto", fileDescriptor_9994fd7b0f53059c)
}

var fileDescriptor_9994fd7b0f53059c = []byte{
	// 842 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x4f, 0x8f, 0xdb, 0x44,
	0x14, 0x97, 0xf3, 0x67, 0xbb, 0x99, 0x66, 0x29, 0x99, 0x5d, 0x56, 0x26, 0xa5, 0xd9, 0xc8, 0x28,
	0x6d, 0xaa, 0x12, 0xbb, 0xdd, 0x56, 0x80, 0x40, 0x02, 0x91, 0x36, 0x5a, 0x24, 0x24, 0x40, 0xae,
	0xc4, 0xa1, 0x1c, 0xac, 0xb1, 0xfd, 0x12, 0x8f, 0x3a, 0xf1, 0x18, 0xcf, 0x24, 0x25, 0x3d, 0x21,
	0x0e, 0xf0, 0x01, 0xb8, 0x71, 0xe0, 0x8b, 0x70, 0xe1, 0xc8, 0x11, 0x89, 0x7b, 0x85, 0x56, 0x7c,
	0x82, 0x7e, 0x02, 0xe4, 0x19, 0x3b, 0x76, 0x51, 0xb2, 0x1b, 0xf5, 0xe6, 0xf7, 0x7e, 0xbf, 0xf7,
	0xde, 0x6f, 0xde, 0xbc, 0x37, 0x46, 0x83, 0x24, 0xe5, 0x92, 0x3b, 0x3e, 0x90, 0x80, 0xc7, 0xce,
	0xf2, 0x1e, 0x61, 0x49, 0x44, 0xee, 0x39, 0x4b, 0xc2, 0x68, 0x48, 0x24, 0x4f, 0x6d, 0x85, 0x63,
	0x13, 0x64, 0x04, 0x29, 0x2c, 0xe6, 0xb6, 0x66, 0xda, 0x05, 0xb3, 0x3b, 0x9a, 0x51, 0x19, 0x2d,
	0x7c, 0x3b, 0xe0, 0x73, 0x67, 0xc6, 0x67, 0xdc, 0x51, 0x01, 0xfe, 0x62, 0xaa, 0x2c, 0x9d, 0x3d,
	0xfb, 0xd2, 0x89, 0xba, 0xef, 0xcc, 0x38, 0x9f, 0x31, 0x70, 0x48, 0x42, 0x1d, 0x12, 0xc7, 0x5c,
	0x12, 0x49, 0x79, 0x2c, 0x72, 0xf4, 0x7a, 0x8e, 0xae, 0x73, 0xc0, 0x3c, 0x91, 0xab, 0x1c, 0x1c,
	0x6e, 0x96, 0xaa, 0x6d, 0xcf, 0x67, 0x3c, 0x78, 0x9a, 0x33, 0x6f, 0x6d, 0x66, 0x12, 0x29, 0x41,
	0xe8, 0x82, 0x9a, 0x68, 0x7d, 0x8b, 0x0e, 0x1e, 0x2d, 0x24, 0x05, 0xe1, 0xc2, 0x77, 0x0b, 0x10,
	0x12, 0x1f, 0xa1, 0x26, 0x24, 0x3c, 0x88, 0x4c, 0xa3, 0x6f, 0x0c, 0x1b, 0xae, 0x36, 0xf0, 0x03,
	0x74, 0x35, 0x59, 0xf8, 0x8c, 0x06, 0xde, 0x53, 0x58, 0x09, 0xb3, 0xd6, 0xaf, 0x0f, 0xdb, 0xe3,
	0xc3, 0x97, 0x2f, 0x4e, 0xae, 0x09, 0xf1, 0x7c, 0x24, 0xe8, 0x73, 0xf8, 0xc8, 0xfa, 0xf4, 0xbd,
	0x07, 0x1f, 0x5a, 0x2e, 0xd2, 0xbc, 0x2f, 0x60, 0x25, 0xac, 0x5f, 0x6b, 0xe8, 0x8d, 0x22, 0xbb,
	0x48, 0x78, 0x2c, 0x00, 0x4f, 0xd0, 0x5e, 0xa8, 0x3c, 0xa6, 0xd1, 0xaf, 0x0f, 0xaf, 0x9e, 0x8e,
	0xec, 0x6d, 0x7d, 0xb5, 0x5f, 0x8d, 0xcc, 0xcc, 0x95, 0x9b, 0x07, 0x77, 0xff, 0x30, 0x50, 0x23,
	0x73, 0xe0, 0xbb, 0x08, 0x95, 0xc2, 0x94, 0xe6, 0xf6, 0xb8, 0xf3, 0xf2, 0xc5, 0xc9, 0x41, 0xa9,
	0x2b, 0x53, 0xd5, 0x5a, 0xab, 0xc2, 0xb7, 0xd1, 0x9b, 0x95, 0x36, 0x78, 0x82, 0x71, 0x69, 0xd6,
	0xd4, 0x59, 0xaf, 0x55, 0xfc, 0x8f, 0x19, 0x97, 0xf8, 0x0e, 0xea, 0xbc, 0x42, 0x8d, 0x48, 0x1a,
	0x9a, 0x75, 0xc5, 0xad, 0xe6, 0x78, 0x9c, 0xf9, 0xb1, 0x8d, 0x0e, 0xd5, 0x0d, 0x78, 0x49, 0xca,
	0x13, 0x2e, 0x08, 0xd3, 0xa9, 0x1b, 0x8a, 0xde, 0x51, 0xd0, 0xd7, 0x39, 0x92, 0x25, 0xb7, 0x9e,
	0xa0, 0xf6, 0x38, 0x73, 0x16, 0x8d, 0xc7, 0xa8, 0xa1, 0x02, 0x74, 0xdf, 0xd5, 0x37, 0x7e, 0x1f,
	0x1d, 0xa4, 0x24, 0x0e, 0x09, 0xf7, 0x52, 0x58, 0x02, 0x61, 0x4a, 0xe8, 0xc6, 0x03, 0xb6, 0x35,
	0xcf, 0x55, 0x34, 0x4b, 0xa0, 0xe3, 0xcf, 0x4a, 0x7d, 0x8f, 0x88, 0x24, 0x45, 0x15, 0x07, 0x1d,
	0x25, 0x29, 0xe7, 0x53, 0x8f, 0x4f, 0xbd, 0x60, 0x21, 0x24, 0x0f, 0x57, 0x9e, 0x4f, 0x75, 0xd5,
	0xb6, 0xdb, 0x51, 0xd8, 0x57, 0xd3, 0x87, 0x1a, 0x19, 0xd3, 0x52, 0x56, 0xad, 0x22, 0xeb, 0x08,
	0x35, 0xab, 0xbd, 0xd0, 0x86, 0xf5, 0x73, 0x1d, 0xb5, 0xbe, 0x29, 0xb6, 0xe6, 0x35, 0x2e, 0xe6,
	0x73, 0x74, 0xfc, 0x8c, 0xca, 0x28, 0x4c, 0xc9, 0x33, 0xc2, 0xbc, 0x20, 0x85, 0x10, 0x62, 0x49,
	0x09, 0x13, 0x9b, 0x4f, 0x7d, 0xff, 0xd4, 0x72, 0xdf, 0x2a, 0x03, 0x1e, 0x96, 0x7c, 0xfc, 0x09,
	0xba, 0x4e, 0x02, 0x49, 0x97, 0xfa, 0xda, 0x80, 0xd1, 0x19, 0xf5, 0x19, 0x95, 0x2b, 0x4f, 0x4f,
	0xb6, 0x56, 0xfd, 0x76, 0x49, 0x99, 0xac, 0x19, 0x13, 0x35, 0xed, 0xd9, 0x88, 0x54, 0xe2, 0x55,
	0x50, 0x23, 0x1f, 0x91, 0x32, 0x48, 0x51, 0x6f, 0x20, 0x04, 0xdf, 0x53, 0x99, 0x93, 0x9a, 0x8a,
	0xd4, 0xca, 0x3c, 0x1a, 0x1e, 0x21, 0xbc, 0x96, 0xe8, 0x33, 0xc8, 0x69, 0x7b, 0x7a, 0x26, 0xaa,
	0x88, 0xa6, 0x9b, 0xe8, 0x8a, 0x60, 0x44, 0x44, 0x10, 0x9a, 0x57, 0xfa, 0xc6, 0x70, 0xdf, 0x2d,
	0xcc, 0x6c, 0x14, 0x61, 0x3a, 0x85, 0xac, 0x3a, 0x78, 0x3e, 0x61, 0x24, 0x0e, 0xc0, 0xdc, 0xd7,
	0xa3, 0xb8, 0x06, 0xc6, 0xda, 0x7f, 0xfa, 0x7b, 0x13, 0x1d, 0x8e, 0xd5, 0x36, 0x7d, 0xc9, 0x43,
	0x28, 0xef, 0xe4, 0x27, 0x03, 0xb5, 0xce, 0x40, 0xea, 0xc5, 0xc2, 0xb7, 0x2e, 0x5f, 0x3d, 0x35,
	0x33, 0xdd, 0xe1, 0xae, 0x3b, 0x6a, 0xdd, 0xfc, 0xf1, 0xef, 0x7f, 0x7f, 0xa9, 0xf5, 0x71, 0xcf,
	0x01, 0x19, 0x6d, 0x78, 0x4b, 0x1d, 0xbd, 0xbe, 0xf8, 0x07, 0x03, 0xed, 0x9f, 0x81, 0x54, 0xf3,
	0x8f, 0x6f, 0x6e, 0x4f, 0x5f, 0x5d, 0x90, 0xee, 0xe0, 0x02, 0x9e, 0xb2, 0x15, 0xdb, 0x1a, 0x28,
	0x0d, 0x27, 0xf8, 0xc6, 0x36, 0x0d, 0x6a, 0x15, 0xb1, 0x44, 0x6d, 0xbd, 0x8e, 0xa0, 0x55, 0xec,
	0x96, 0xbd, 0x7b, 0x6c, 0xeb, 0x07, 0xda, 0x2e, 0x1e, 0x68, 0x7b, 0x92, 0x3d, 0xd0, 0x45, 0x55,
	0xeb, 0x92, 0xaa, 0xbf, 0x19, 0x08, 0x9f, 0x81, 0xfc, 0xdf, 0x72, 0xe2, 0xbb, 0xdb, 0x8b, 0x6f,
	0xde, 0xe3, 0xee, 0xed, 0x9d, 0x23, 0xac, 0x3b, 0x4a, 0xda, 0x00, 0xbf, 0xbb, 0x4d, 0x5a, 0xe5,
	0x29, 0xcb, 0x6e, 0x06, 0xe7, 0x7d, 0xa9, 0xe4, 0xb9, 0xa8, 0x3b, 0x15, 0xda, 0xd6, 0xee, 0xe4,
	0x12, 0xac, 0x5d, 0x24, 0x8c, 0x27, 0x7f, 0x9e, 0xf7, 0x8c, 0xbf, 0xce, 0x7b, 0xc6, 0x3f, 0xe7,
	0x3d, 0xe3, 0xc9, 0x07, 0x95, 0xbf, 0x6b, 0x92, 0xae, 0xc4, 0x9c, 0x48, 0x1a, 0x30, 0xe2, 0x0b,
	0x6d, 0x39, 0x9b, 0x7e, 0x74, 0x1f, 0x83, 0x8c, 0xfc, 0x3d, 0x85, 0xdc, 0xff, 0x2f, 0x00, 0x00,
	0xff, 0xff, 0xda, 0x89, 0x8b, 0x20, 0xe0, 0x07, 0x00, 0x00,
}

func (m *DutiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DutiesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintValidator(dAtA, i, uint64(m.Epoch))
	}
	if len(m.PublicKeys) > 0 {
		for _, b := range m.PublicKeys {
			dAtA[i] = 0x12
			i++
			i = encodeVarintValidator(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DutiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DutiesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Duties) > 0 {
		for _, msg := range m.Duties {
			dAtA[i] = 0xa
			i++
			i = encodeVarintValidator(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DutiesResponse_Duty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DutiesResponse_Duty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintValidator(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	if m.AttestationSlot != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintValidator(dAtA, i, uint64(m.AttestationSlot))
	}
	if m.AttestationShard != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintValidator(dAtA, i, uint64(m.AttestationShard))
	}
	if m.BlockProposalSlot != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintValidator(dAtA, i, uint64(m.BlockProposalSlot))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slot != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintValidator(dAtA, i, uint64(m.Slot))
	}
	if len(m.RandaoReveal) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintValidator(dAtA, i, uint64(len(m.RandaoReveal)))
		i += copy(dAtA[i:], m.RandaoReveal)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AttestationDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttestationDataRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProofOfCustodyBit) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintValidator(dAtA, i, uint64(len(m.ProofOfCustodyBit)))
		i += copy(dAtA[i:], m.ProofOfCustodyBit)
	}
	if m.Slot != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintValidator(dAtA, i, uint64(m.Slot))
	}
	if m.Shard != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintValidator(dAtA, i, uint64(m.Shard))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintValidator(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	if len(m.WithdrawalCredentials) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintValidator(dAtA, i, uint64(len(m.WithdrawalCredentials)))
		i += copy(dAtA[i:], m.WithdrawalCredentials)
	}
	if m.ActivationEligiblityEpoch != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintValidator(dAtA, i, uint64(m.ActivationEligiblityEpoch))
	}
	if m.ActivationEpoch != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintValidator(dAtA, i, uint64(m.ActivationEpoch))
	}
	if m.ExitEpoch != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintValidator(dAtA, i, uint64(m.ExitEpoch))
	}
	if m.WithdrawableEpoch != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintValidator(dAtA, i, uint64(m.WithdrawableEpoch))
	}
	if m.Slashed {
		dAtA[i] = 0x38
		i++
		if m.Slashed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EffectiveBalance != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintValidator(dAtA, i, uint64(m.EffectiveBalance))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintValidator(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DutiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovValidator(uint64(m.Epoch))
	}
	if len(m.PublicKeys) > 0 {
		for _, b := range m.PublicKeys {
			l = len(b)
			n += 1 + l + sovValidator(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DutiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Duties) > 0 {
		for _, e := range m.Duties {
			l = e.Size()
			n += 1 + l + sovValidator(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DutiesResponse_Duty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	if m.AttestationSlot != 0 {
		n += 1 + sovValidator(uint64(m.AttestationSlot))
	}
	if m.AttestationShard != 0 {
		n += 1 + sovValidator(uint64(m.AttestationShard))
	}
	if m.BlockProposalSlot != 0 {
		n += 1 + sovValidator(uint64(m.BlockProposalSlot))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovValidator(uint64(m.Slot))
	}
	l = len(m.RandaoReveal)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttestationDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProofOfCustodyBit)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	if m.Slot != 0 {
		n += 1 + sovValidator(uint64(m.Slot))
	}
	if m.Shard != 0 {
		n += 1 + sovValidator(uint64(m.Shard))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.WithdrawalCredentials)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	if m.ActivationEligiblityEpoch != 0 {
		n += 1 + sovValidator(uint64(m.ActivationEligiblityEpoch))
	}
	if m.ActivationEpoch != 0 {
		n += 1 + sovValidator(uint64(m.ActivationEpoch))
	}
	if m.ExitEpoch != 0 {
		n += 1 + sovValidator(uint64(m.ExitEpoch))
	}
	if m.WithdrawableEpoch != 0 {
		n += 1 + sovValidator(uint64(m.WithdrawableEpoch))
	}
	if m.Slashed {
		n += 2
	}
	if m.EffectiveBalance != 0 {
		n += 1 + sovValidator(uint64(m.EffectiveBalance))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovValidator(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozValidator(x uint64) (n int) {
	return sovValidator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DutiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DutiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DutiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKeys = append(m.PublicKeys, make([]byte, postIndex-iNdEx))
			copy(m.PublicKeys[len(m.PublicKeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DutiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DutiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DutiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duties = append(m.Duties, &DutiesResponse_Duty{})
			if err := m.Duties[len(m.Duties)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DutiesResponse_Duty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Duty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Duty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationSlot", wireType)
			}
			m.AttestationSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttestationSlot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationShard", wireType)
			}
			m.AttestationShard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttestationShard |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockProposalSlot", wireType)
			}
			m.BlockProposalSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockProposalSlot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandaoReveal", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandaoReveal = append(m.RandaoReveal[:0], dAtA[iNdEx:postIndex]...)
			if m.RandaoReveal == nil {
				m.RandaoReveal = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttestationDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttestationDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttestationDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofOfCustodyBit", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofOfCustodyBit = append(m.ProofOfCustodyBit[:0], dAtA[iNdEx:postIndex]...)
			if m.ProofOfCustodyBit == nil {
				m.ProofOfCustodyBit = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			m.Shard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shard |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalCredentials", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawalCredentials = append(m.WithdrawalCredentials[:0], dAtA[iNdEx:postIndex]...)
			if m.WithdrawalCredentials == nil {
				m.WithdrawalCredentials = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationEligiblityEpoch", wireType)
			}
			m.ActivationEligiblityEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivationEligiblityEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationEpoch", wireType)
			}
			m.ActivationEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivationEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitEpoch", wireType)
			}
			m.ExitEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExitEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawableEpoch", wireType)
			}
			m.WithdrawableEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawableEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slashed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Slashed = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveBalance", wireType)
			}
			m.EffectiveBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EffectiveBalance |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValidator
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthValidator
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowValidator
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipValidator(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthValidator
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthValidator = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidator   = fmt.Errorf("proto: integer overflow")
)
