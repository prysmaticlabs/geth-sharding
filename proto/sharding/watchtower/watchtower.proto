syntax = "proto3";

package ethereum.eth.v1alpha1;

import "google/protobuf/empty.proto";
import "proto/eth/v1alpha1/beacon_block.proto";
import "proto/eth/v1alpha1/attestation.proto";


// Watchtower service API
// 
// Watchtower service provides an interface for validators and beacon server to query
// to subscribe for slashable events on the network as well as to make sure that the 
// attestation or proposal they are going to submit to the network are not going to 
// produce a slashable event.
service Watchtower {
    
    // Gets AttesterSlashing container if the attestation that 
    // was recieved produces a slashable event.
    rpc IsSlashableAttestation(ethereum.eth.v1alpha1.Attestation) returns (ethereum.eth.v1alpha1.AttesterSlashing) ;

    // Gets ProposerSlashing container if the block header that 
    // was recieved produces a slashable event.
    rpc IsSlashableBlock(ethereum.eth.v1alpha1.BeaconBlockHeader) returns (ethereum.eth.v1alpha1.ProposerSlashing) ;

    // Subscription to recieve all slashable proposer slashing events found by the watchtower.
    rpc SlashableProposals(google.protobuf.Empty) returns (stream ethereum.eth.v1alpha1.ProposerSlashing);
    
    // Subscription to recieve all slashable attester slashing events found by the watchtower.
    rpc SlashableAttestations(google.protobuf.Empty) returns (stream ethereum.eth.v1alpha1.AttesterSlashing);

}
