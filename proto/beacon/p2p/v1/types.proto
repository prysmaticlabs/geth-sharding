syntax = "proto3";

package ethereum.beacon.p2p.v1;

import "proto/common/messages.proto";

message BeaconState {
  // Validator registry [1-1000] 
  repeated ValidatorRecord validator_registry = 1;
  uint64 validator_registry_latest_change_slot = 2;
  uint64 validator_registry_exit_count = 3;
  bytes validator_registry_delta_chain_tip_hash32 = 4;
  repeated uint64 validator_balances = 5; // Balance in Gwei

  // Randomness and committees [1001-2000]
  repeated ShardCommitteeArray shard_committees_at_slots = 1003;
  repeated bytes latest_randao_mixes_hash32s = 1004;
  repeated bytes latest_vdf_outputs_hash32s = 1005;

  // Finality [2001-3000] 
  uint64 previous_justified_slot = 2001;
  uint64 justified_slot = 2002;
  uint64 justification_bitfield = 2003;
  uint64 finalized_slot = 2004;

  // Recent state [3001-4000]
  repeated CrosslinkRecord latest_crosslinks = 3001;
  repeated bytes latest_block_root_hash32s = 3003;
  repeated bytes batched_block_root_hash32s = 3004;
  repeated uint64 latest_penalized_exit_balances = 3005;
  repeated PendingAttestationRecord latest_attestations = 3006;

  // Ethereum 1.0 deposit root [4001-5000]
  bytes latest_deposit_root_hash32 = 4001;
  repeated DepositRootVote deposit_root_votes = 4002;

  // Miscellaneous [5001-6000]
  uint64 genesis_time = 5001;
  ForkData fork_data = 5002;
  uint64 slot = 5003;

  // Proof of custody [6001-7000]
  // Placeholders, ProofOfCustodyChallenge is defined in phase 1,
  // the list will remain empty throughout phase 0
  repeated CustodyChallenge custody_challenges = 6001;
}

message ForkData {
  uint64 pre_fork_version = 1;
  uint64 post_fork_version = 2;
  uint64 fork_slot = 3;
}

message DepositRootVote {
  bytes deposit_root_hash32 = 1;
  uint64 vote_count = 2;
}

message PendingAttestationRecord {
  AttestationData data = 1;
  bytes participation_bitfield = 2;
  bytes custody_bitfield = 3;
  uint64 slot_included = 4;
}

message Attestation {
  AttestationData data = 1;
  bytes participation_bitfield = 2;
  bytes custody_bitfield = 3;
  bytes aggregate_signature = 4; // Type of [uint384] ?
}

message AttestationData {
  uint64 slot = 1;
  uint64 shard = 2;
  bytes beacon_block_root_hash32 = 3;
  bytes epoch_boundary_root_hash32  = 4;
  bytes shard_block_root_hash32 = 5;
  bytes latest_crosslink_root_hash32 = 6;
  uint64 justified_slot = 7;
  bytes justified_block_root_hash32 = 8;
}

message AttestationDataAndCustodyBit {
  AttestationData data = 1;
  bool custody_bit = 2;
}

message ValidatorRecord {
  bytes pubkey = 1;
  // TODO(781): The usage of withdrawal_credentials is not defined in spec. Not used in Prysm yet.
  bytes withdrawal_credentials_hash32 = 2;
  bytes randao_commitment_hash32 = 3;
  uint64 randao_layers = 4;
  uint64 activation_slot = 5;
  uint64 exit_slot = 6;
  uint64 withdrawal_slot = 7;
  uint64 penalized_slot = 8;
  uint64 exit_count = 9;
  // Possible validator status code:
  // https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md#constants
  enum StatusFlags {
    INITIAL = 0; // validator status initial value.
    INITIATED_EXIT = 1; // validator initiated exit.
    WITHDRAWABLE = 2; // validator is participating validator duties.
  }
  StatusFlags status_flags = 10;
  bytes custody_commitment_hash32 = 11;
  uint64 latest_custody_reseed_slot = 12;
  uint64 penultimate_custody_reseed_slot = 13;

  // Deprecated fields
  // All fields must be annotated with [deprecated=true];
  // Balance in Gwei
  uint64 balance = 1000 [deprecated=true]; // Keeping this until we refactor epoch processing.
}

message ShardReassignmentRecord {
  uint32 validator_index = 1;
  uint64 shard = 2;
  uint64 slot = 3;
}

message CrosslinkRecord {
  uint64 slot = 1;
  bytes shard_block_root_hash32 = 2;
}

message ShardCommitteeArray {
  repeated ShardCommittee array_shard_committee = 1;
}

message ShardCommittee {
  uint64 shard = 1;
  repeated uint32 committee = 2;
  uint64 total_validator_count = 3;
}

message BeaconBlock {
  uint64 slot = 1;
  bytes parent_root_hash32 = 2;
  bytes state_root_hash32 = 3;
  bytes randao_reveal_hash32 = 4;
  bytes deposit_root_hash32 = 5;
  repeated bytes signature = 6; // Type of [uint384]?

  // Block Body
  BeaconBlockBody body = 7;
}

message BeaconBlockBody {
  repeated Attestation attestations = 1;
  repeated ProposerSlashing proposer_slashings  = 2;
  repeated CasperSlashing casper_slashings = 3;
  repeated Deposit deposits = 4;
  repeated Exit exits = 5;
}

message DepositInput {
  bytes pubkey = 1;
  bytes proof_of_possession = 2; // Type of ['uint384']??
  // TODO(781): The usage of withdrawal_credentials is not defined in spec. Not used in Prysm yet.
  bytes withdrawal_credentials_hash32 = 3;
  bytes randao_commitment_hash32 = 4;
  bytes custody_commitment_hash32 = 5;
}

message ProposalSignedData {
  uint64 slot = 1;
  uint64 shard = 2;
  bytes block_root_hash32 = 3;
}

message SlashableVoteData {
  repeated uint32 custody_bit_0_indices = 1; // proof of custody indices for 0 bits.
  repeated uint32 custody_bit_1_indices = 2; // proof of custody indices for 1 bits.
  AttestationData data = 3;
  bytes aggregate_signature = 4; // Type of [uint384]?
}

message DepositData {
  DepositInput deposit_input = 1;
  uint64 amount = 2; // Amount in Gwei
  uint64 timestamp = 3;
}

message ProposerSlashing {
  uint32 proposer_index = 1;
  ProposalSignedData proposal_data_1 = 2;
  bytes proposal_signature_1 = 3; // Type of [uint384]?
  ProposalSignedData proposal_data_2 = 4;
  bytes proposal_signature_2 = 5;
}

message CasperSlashing {
  SlashableVoteData votes_1 = 1;
  SlashableVoteData votes_2 = 2;
}

message Deposit {
  repeated bytes merkle_branch_hash32s = 1;
  uint64 merkle_tree_index = 2;
  bytes deposit_data = 3;
}

message Exit {
  uint64 slot = 1;
  uint32 validator_index = 2;
  bytes signature = 3; // Type of [uint384]?
}

message ValidatorRegistryDeltaBlock {
  bytes latest_registry_delta_root_hash32 = 1;
  uint32 validator_index = 2;
  bytes pubkey = 3;
  uint64 slot = 4;
  enum ValidatorRegistryDeltaFlags {
      ACTIVATION = 0;
      EXIT = 1;
  }
  ValidatorRegistryDeltaFlags flag = 5;
}

message CustodyChallenge {} // Empty until phase 1
