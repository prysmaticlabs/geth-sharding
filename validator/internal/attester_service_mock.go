// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/prysmaticlabs/prysm/proto/beacon/rpc/v1 (interfaces: AttesterServiceClient)

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/prysmaticlabs/ethereumapis/eth/v1alpha1"
	v1 "github.com/prysmaticlabs/prysm/proto/beacon/rpc/v1"
	grpc "google.golang.org/grpc"
)

// MockAttesterServiceClient is a mock of AttesterServiceClient interface
type MockAttesterServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAttesterServiceClientMockRecorder
}

// MockAttesterServiceClientMockRecorder is the mock recorder for MockAttesterServiceClient
type MockAttesterServiceClientMockRecorder struct {
	mock *MockAttesterServiceClient
}

// NewMockAttesterServiceClient creates a new mock instance
func NewMockAttesterServiceClient(ctrl *gomock.Controller) *MockAttesterServiceClient {
	mock := &MockAttesterServiceClient{ctrl: ctrl}
	mock.recorder = &MockAttesterServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAttesterServiceClient) EXPECT() *MockAttesterServiceClientMockRecorder {
	return m.recorder
}

// RequestAttestation mocks base method
func (m *MockAttesterServiceClient) RequestAttestation(arg0 context.Context, arg1 *v1.AttestationRequest, arg2 ...grpc.CallOption) (*v1alpha1.AttestationData, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestAttestation", varargs...)
	ret0, _ := ret[0].(*v1alpha1.AttestationData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestAttestation indicates an expected call of RequestAttestation
func (mr *MockAttesterServiceClientMockRecorder) RequestAttestation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestAttestation", reflect.TypeOf((*MockAttesterServiceClient)(nil).RequestAttestation), varargs...)
}

// SubmitAttestation mocks base method
func (m *MockAttesterServiceClient) SubmitAttestation(arg0 context.Context, arg1 *v1alpha1.Attestation, arg2 ...grpc.CallOption) (*v1.AttestResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitAttestation", varargs...)
	ret0, _ := ret[0].(*v1.AttestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitAttestation indicates an expected call of SubmitAttestation
func (mr *MockAttesterServiceClientMockRecorder) SubmitAttestation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitAttestation", reflect.TypeOf((*MockAttesterServiceClient)(nil).SubmitAttestation), varargs...)
}
